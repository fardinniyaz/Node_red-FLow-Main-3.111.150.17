[
    {
        "id": "5b16feb696a83054",
        "type": "tab",
        "label": "Vatturker Main",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "8951196369fc9661",
        "type": "tab",
        "label": "Database storage",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3b8dd7c3553d4844",
        "type": "tab",
        "label": "Avon_Sim",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e149d7250d3f3e9d",
        "type": "tab",
        "label": "Pidilite_Mahad",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e625e67d45a2a57",
        "type": "tab",
        "label": "Spectrometer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b21b717b84c9578",
        "type": "tab",
        "label": "Falna",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c1e01897118eb874",
        "type": "tab",
        "label": "Classic Stripes",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e8ab1e8943fdcd97",
        "type": "tab",
        "label": "Naxnova EM",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d757b67b1f0e02b2",
        "type": "tab",
        "label": "Naxnova Tape Pasting",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5256b1739de0f91b",
        "type": "tab",
        "label": "OFFICE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "be07d30774e85419",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f68cc45902e5c2d5",
        "type": "tab",
        "label": "OFFICE OEE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `object` containing the updated properties of a table row by sending msg.<tableDataProp>.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5a58299dd6df8d38",
        "type": "group",
        "z": "5b16feb696a83054",
        "name": "Outlet Pressure",
        "style": {
            "label": true
        },
        "nodes": [
            "3b15d55d21108664",
            "28bb777ee39b613b",
            "21a24da55543701f",
            "ac4c4c41fd64ebfe",
            "f238c387f6e5e795",
            "4e3b13e8499be418",
            "981facb9674ee055",
            "0989b55c29ea8963",
            "9fd0ecbd5f5aaaf0"
        ],
        "x": 34,
        "y": 719,
        "w": 972,
        "h": 202
    },
    {
        "id": "d3e07fe858bfa615",
        "type": "group",
        "z": "5b16feb696a83054",
        "name": "Voltage",
        "style": {
            "label": true
        },
        "nodes": [
            "07fb47ef6942ce85",
            "7fff1a855787ce32",
            "db4acf3540250236",
            "d7e71232f871918e",
            "f64c029.2c5838",
            "6e888b6a.40c874",
            "10c86d67fe8eba27",
            "7a60eab0f397ce83",
            "d6115d23700372a7",
            "f25d287982dcb499"
        ],
        "x": 54,
        "y": 259,
        "w": 1192,
        "h": 142
    },
    {
        "id": "4615186676e8646c",
        "type": "group",
        "z": "5b16feb696a83054",
        "name": "Flow Count",
        "style": {
            "label": true
        },
        "nodes": [
            "395cdda3adfa7ded",
            "21ea818a4c29ac4c",
            "7a13dfd0af01b704",
            "349196e67d0c604d",
            "ec687e4fef065ac8",
            "010a773a6e22c4f9",
            "7722b6d627e9ae5e"
        ],
        "x": 54,
        "y": 39,
        "w": 692,
        "h": 202
    },
    {
        "id": "e705993c6aabb46d",
        "type": "group",
        "z": "5b16feb696a83054",
        "name": "Chlorine PPM",
        "style": {
            "label": true
        },
        "nodes": [
            "2280564996fe54c4",
            "c07ad7a3aa32e7be",
            "3b069038a4cbea9f",
            "a57f2ad93bb558bc",
            "21326e5c8c810209"
        ],
        "x": 54,
        "y": 439,
        "w": 852,
        "h": 142
    },
    {
        "id": "773a42a7032f469e",
        "type": "group",
        "z": "5b16feb696a83054",
        "name": "Inlet Depth",
        "style": {
            "label": true
        },
        "nodes": [
            "c06c48f862bc203f",
            "1de5c37c613d610f",
            "5888ea1afcc6ea43",
            "57e3b56469b607d1"
        ],
        "x": 54,
        "y": 599,
        "w": 852,
        "h": 82
    },
    {
        "id": "e1e1c1532edcb723",
        "type": "group",
        "z": "e149d7250d3f3e9d",
        "name": "Get MQTT data from field and store in context",
        "style": {
            "label": true
        },
        "nodes": [
            "33505b09b974ab2f",
            "5d1633da7b1da8fa",
            "93e00c3d2abd686d",
            "d319c136564a4d7c",
            "93e521df5928fe95",
            "79710492b0e0aa9e",
            "3f9c73d8804b8d11",
            "d0decc444504341f"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "d266316bb8967303",
        "type": "group",
        "z": "e149d7250d3f3e9d",
        "name": "Push Data to Thingsboard",
        "style": {
            "label": true
        },
        "nodes": [
            "b0bb80e8a848ae47",
            "68d51a574af962da",
            "795280e033bf07c3",
            "52a725e7ed90d45f",
            "11686801cda5c3b1",
            "0b174c80883fe5f0",
            "88c82445ebcec3fa",
            "c766f28540c6839b",
            "7768fee09bee42cd"
        ],
        "x": 14,
        "y": 259
    },
    {
        "id": "bb0c0c967e53f4c9",
        "type": "group",
        "z": "e149d7250d3f3e9d",
        "name": "Push Shift Wise",
        "style": {
            "label": true
        },
        "nodes": [
            "ac54da3fa6672dfe",
            "7ac86265bc5e196f",
            "c3d0a10ba285d267",
            "4c68eb45d46b295b",
            "a3280168c109030d",
            "e49db31a7637b835",
            "7b4d8a235630b389"
        ],
        "x": 14,
        "y": 519
    },
    {
        "id": "fde10959108ef8cc",
        "type": "group",
        "z": "5256b1739de0f91b",
        "name": "Incoming Data",
        "style": {
            "label": true
        },
        "nodes": [
            "8118f86e028e545b",
            "b2341ed58539b0ff",
            "205a43e85ecfbc5f",
            "158da8931102fddd",
            "1362570454b6473f",
            "7ebfc56d99967190",
            "1840221122eb8e69",
            "de692c7bfbe8bda4",
            "119a5f4ecec6317c",
            "a02f652f972f7920",
            "a738f584b9fddc16",
            "85e15026447ddf5f",
            "9264d5c228cb60c1",
            "e8787c44530a51be",
            "8d511018be2d54f5",
            "1d6d98d5036cf474"
        ],
        "x": 34,
        "y": 19
    },
    {
        "id": "f4559bb1d40e1d21",
        "type": "group",
        "z": "5256b1739de0f91b",
        "name": "Office Energy TOD",
        "style": {
            "label": true
        },
        "nodes": [
            "bee49cfd87408da1",
            "a560eb1e9e2a7f7d",
            "1d1404420c9f1e9a",
            "e90202df9c8c8c1b",
            "f38c27dee81d6d06",
            "10f14a9e461de4dd",
            "659063189bf30d54",
            "327bf3c86db62337",
            "4d45c539783077b8",
            "71016a146d11a71d",
            "4ff6e67c9ad9e641",
            "106ee1a0db09a5ba",
            "a17c676f2c7cd83c",
            "7a87537c8bfb151a",
            "e33305c9f8e9c3cf",
            "f679e36439281ee6",
            "39d0168780e80f1a",
            "6e991fee29a49c7e",
            "eb1fef0be2664f07",
            "d993a3cbed73e15d",
            "706678d744e082a7"
        ],
        "x": 14,
        "y": 439
    },
    {
        "id": "0b75b6adef8e59b4",
        "type": "group",
        "z": "5256b1739de0f91b",
        "name": "MAIN OFFICE",
        "style": {
            "label": true
        },
        "nodes": [
            "a50891da17a75302",
            "4ba7d561d23ddf09",
            "bd5e486278be4924",
            "13817aa63cdf72fc",
            "257c815d560de8c0",
            "8e132a5b705ae941",
            "3bcc5ce881f61c21",
            "189742384f11f07d",
            "dfd9e2499472b89c",
            "a51d9a3a4fc44f3c",
            "b19b545c100f8e43",
            "cdbe53353904968c",
            "d20549764d2246c4",
            "9597e01f77c167d7",
            "11722d2d3687abaf",
            "f22b4cb710689d97",
            "6b7dce91e87a34fc",
            "e885dfdd2e5ab80f",
            "902536bf259edc18",
            "2332baa58651e724",
            "1d8e779961eac347"
        ],
        "x": 14,
        "y": 979
    },
    {
        "id": "d0aec0a065e03058",
        "type": "group",
        "z": "5256b1739de0f91b",
        "name": "JE Mech",
        "style": {
            "fill": "#ffff00",
            "fill-opacity": "0.25",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "e648714c14a99fb9",
            "42921b628f776e55",
            "790d89d6937eb1fd",
            "e37e718262ead913",
            "e00143de82a3ecc7",
            "e3326c01e19655c2",
            "0055f303a855eb55",
            "36c1ed2b951f6267",
            "6282894a489c64d5",
            "77a642c1a4449212",
            "c70eb6329c0d1a90",
            "e5324e34132c652a",
            "f48f516bc9b9b197",
            "958c0971c443b20d",
            "46e4a19c0d7f375c",
            "895786a37cf351f1",
            "1d70cf3e15a4c765",
            "11c5ab258a6a38d8",
            "cc431901746fbc2d",
            "dc8aa3d875da55a4",
            "c7a920a37ea2097d",
            "b355c2d48351f36e",
            "6f9c9ea8ad22c8d6"
        ],
        "x": 34,
        "y": 1439
    },
    {
        "id": "875dd8acbf1f9402",
        "type": "group",
        "z": "f68cc45902e5c2d5",
        "name": "Shutdown Time",
        "style": {
            "label": true
        },
        "nodes": [
            "e27c247e4311833d",
            "0a2e92875d2c7709",
            "1f6ff09b038e415c",
            "861e565d129be742",
            "64b980207c49283e",
            "61828b43a0feb666",
            "a7b81bd10dd5a4a7",
            "49ee5ba83c531b9b"
        ],
        "x": 54,
        "y": 339
    },
    {
        "id": "f545a640936fc892",
        "type": "group",
        "z": "f68cc45902e5c2d5",
        "name": "Unplanned Time",
        "style": {
            "label": true
        },
        "nodes": [
            "e951c3ed5df2e670",
            "3af72093016a856d",
            "8ee66768d70ffd63",
            "806de01c271c12af",
            "33af2b36c60ac4b8",
            "04115b17e8da1192",
            "db5f7979e23d4a95",
            "89fb7e86b9e12876",
            "8555341694376891",
            "e18a1fe5292c0f21",
            "56d92074d0c236c4",
            "57cd673ba084d019",
            "9adb62a8d09f59a3"
        ],
        "x": 54,
        "y": 559
    },
    {
        "id": "cb4af27768414654",
        "type": "group",
        "z": "be07d30774e85419",
        "name": "Machine Simulator",
        "style": {
            "label": true
        },
        "nodes": [
            "99b0644f5dbde726",
            "f6d8d0dbf16308d8",
            "719b613d22ad63b2"
        ],
        "x": 634,
        "y": 39
    },
    {
        "id": "e5eb009d748ff2a8",
        "type": "group",
        "z": "be07d30774e85419",
        "name": "Checkweigher Simulator",
        "style": {
            "label": true
        },
        "nodes": [
            "81fbed20ec881af9",
            "32c7889a89981ccd",
            "f14a89d0ba973b19",
            "8f41961a42c418c8",
            "fe49b10621a733a5",
            "dc5ec02a036baf61",
            "a5defb6a66662703"
        ],
        "x": 174,
        "y": 739
    },
    {
        "id": "e62e4efa7e4c7c36",
        "type": "group",
        "z": "5256b1739de0f91b",
        "name": "Office Energy 2nd FloorTOD",
        "style": {
            "label": true
        },
        "nodes": [
            "529e0b2af095914c",
            "2806248d56c5183d",
            "afd58dbb83644bda",
            "2c5ebf8f03ce4b25",
            "02fba8c0aa407afa",
            "e6f7556b3e41dce4",
            "3570124044cf33e9",
            "322a09ac63ac21ed",
            "71c8b69d6ffda6f8",
            "1c10e7f9fafea414",
            "9c03a41f24e0c1b1",
            "6494657ed2d34db4",
            "a0b11256fb212088",
            "a56fa2abce2d7a4f",
            "c7652317807cb29b",
            "4bbee88f2001a9fd",
            "550c20cf415c80db",
            "105d808a9a195c56",
            "2ec564add7d81e1a",
            "330c47e0636008da",
            "f126394d53967047"
        ],
        "x": 14,
        "y": 2319
    },
    {
        "id": "fb79b5093b5e05ec",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "noderedserver",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "eeb221fb.ab27f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "test",
        "name": "InfluxDB AMPLIOT",
        "usetls": true,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com/",
        "rejectUnauthorized": true
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "7508e0a65803fa42",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7afb8e48636a3f64",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Avon_IoT",
        "usetls": false,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com/",
        "rejectUnauthorized": true
    },
    {
        "id": "0f359e6fe6861745",
        "type": "mqtt-broker",
        "name": "Hive MQ",
        "broker": "http://broker.hivemq.com/",
        "port": "1883",
        "tls": "d50d0c9f.31e858",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c2c514c647c94711",
        "type": "mqtt-broker",
        "name": "manufacturing pidilite",
        "broker": "manufacturing.pidilite.com",
        "port": "1889",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9b14792972648b23",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ab79866d752577c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "91.121.93.94",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5d9c7c09b59a886b",
        "type": "mqtt-broker",
        "name": "Office Temperature Sensor",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4f7a59ae918876e9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "manufacturing.pidilite.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "85b376574223a0c1",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.absolutemotion.in",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b71233c4d16bcb61",
        "type": "email-transport",
        "name": "",
        "host": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "2ae7b06027bfa13c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "13.232.159.32",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea380550660ffbb0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1a11e909d0b659c4",
        "type": "ui_tab",
        "name": "VYOM",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f0da6b294fcbaf52",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#375fd7",
                "baseFont": "Times New Roman,Times,serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#41aaec",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#375fd7",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#375fd7",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#7792e4",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#375fd7",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "Times New Roman,Times,serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "13ad8bd5156e8abe",
        "type": "ui_group",
        "name": "Machine Process",
        "tab": "1a11e909d0b659c4",
        "order": 1,
        "disp": true,
        "width": 50,
        "collapse": false,
        "className": ""
    },
    {
        "id": "76f5a230de5cbe45",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 1,
        "width": 3,
        "height": 1
    },
    {
        "id": "fcfebb14d2422213",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "4296d60c99dcfcb8",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 5,
        "width": 38,
        "height": 1
    },
    {
        "id": "c273277a6ad24175",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "cfc0cad9159c6770",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "313d945dffd97698",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 8,
        "width": 38,
        "height": 1
    },
    {
        "id": "c1ea54f5fe4360ce",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "5ea3dc7d67e15a7d",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "f2604005c16e899c",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 11,
        "width": 38,
        "height": 1
    },
    {
        "id": "9c58a86e3c12e088",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 12,
        "width": 50,
        "height": 1
    },
    {
        "id": "7baf39ec543ee4ec",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 13,
        "width": 50,
        "height": 1
    },
    {
        "id": "a3fb01c9447c6837",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 14,
        "width": 50,
        "height": 1
    },
    {
        "id": "42e08d15f47f8fd7",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "6b01c91c865648bc",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 17,
        "width": 40,
        "height": 1
    },
    {
        "id": "ad0c0951891b9fab",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 18,
        "width": 5,
        "height": 1
    },
    {
        "id": "65eb8991cb6dcff1",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 19,
        "width": 40,
        "height": 1
    },
    {
        "id": "cb7c6a8aa506d9b9",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 20,
        "width": 50,
        "height": 1
    },
    {
        "id": "36f8626f7bc4d316",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 21,
        "width": 3,
        "height": 1
    },
    {
        "id": "d3de22b13ed95d80",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "55c6ca81a69fc04b",
        "type": "ui_spacer",
        "z": "be07d30774e85419",
        "name": "spacer",
        "group": "13ad8bd5156e8abe",
        "order": 25,
        "width": 38,
        "height": 1
    },
    {
        "id": "0c04e06d2e189f5c",
        "type": "ui_tab",
        "name": "OEE",
        "icon": "OEE",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0373d8596dbb0f89",
        "type": "ui_group",
        "name": "OEE",
        "tab": "0c04e06d2e189f5c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df19db5e803f7272",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "123456789",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\") && msg.payload.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.payload.object)) {\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.payload.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "395cdda3adfa7ded",
        "type": "mqtt in",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "",
        "topic": "vatturkeriot232",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "21ea818a4c29ac4c"
            ]
        ]
    },
    {
        "id": "2280564996fe54c4",
        "type": "mqtt in",
        "z": "5b16feb696a83054",
        "g": "e705993c6aabb46d",
        "name": "",
        "topic": "vatturkeriot232",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "c07ad7a3aa32e7be"
            ]
        ]
    },
    {
        "id": "c06c48f862bc203f",
        "type": "mqtt in",
        "z": "5b16feb696a83054",
        "g": "773a42a7032f469e",
        "name": "",
        "topic": "vatturkeriot232",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 640,
        "wires": [
            [
                "1de5c37c613d610f"
            ]
        ]
    },
    {
        "id": "3b15d55d21108664",
        "type": "mqtt in",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "",
        "topic": "vatturkeriot23",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "28bb777ee39b613b",
                "f238c387f6e5e795"
            ]
        ]
    },
    {
        "id": "28bb777ee39b613b",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "Get Value",
        "func": "var a = msg.payload.AI1;\nvar b = parseFloat(a);\nmsg.payload = b;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 820,
        "wires": [
            [
                "9fd0ecbd5f5aaaf0"
            ]
        ]
    },
    {
        "id": "21a24da55543701f",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "Set Value Var",
        "func": "var o = msg.payload\nmsg.payload = msg.payload.v.v;\nflow.set(\"value\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "21ea818a4c29ac4c",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "Set Flowcount Var",
        "func": "var a = msg.payload.PULSE;\nvar b = parseInt(a);\nvar c = (b*217)/1000;\nflow.set(\"flowcount\", c);\nglobal.set(\"g_flowcount\",c);\nmsg.payload = c;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1de5c37c613d610f",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "773a42a7032f469e",
        "name": "Get Value",
        "func": "var a = msg.payload.AI1;\nvar b = parseFloat(a);\nmsg.payload = b;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "57e3b56469b607d1"
            ]
        ]
    },
    {
        "id": "c07ad7a3aa32e7be",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "e705993c6aabb46d",
        "name": "Get Value",
        "func": "var a = msg.payload.AI2;\nvar b = parseFloat(a);\nmsg.payload = b;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "21326e5c8c810209"
            ]
        ]
    },
    {
        "id": "07fb47ef6942ce85",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "Set Mains Voltage",
        "func": "var a = global.get(\"g_chlorineppm\");\n\nif (a > 0)\n{\nglobal.set(\"g_mainvoltage\",msg.payload);\n}\nelse\n{\nglobal.set(\"g_mainvoltage\", 0);\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3b069038a4cbea9f",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "e705993c6aabb46d",
        "name": "Set Chlorine PPM",
        "func": "msg.payload = msg.payload;\nglobal.set(\"g_chlorineppm\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5888ea1afcc6ea43",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "773a42a7032f469e",
        "name": "Set Inlet Depth",
        "func": "var a = msg.payload;\n//Ignore negative value of depth \nif (a < 0) \n{\n    a = 0;\n}\n\nglobal.set(\"g_inletdepth\",a);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ac4c4c41fd64ebfe",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "Set Outlet Pressure",
        "func": "var a = msg.payload;\n//Ignore negative value of pressure \nif (a < 0) \n{\n    a = 0;\n}\nglobal.set(\"g_outletpressure\",a);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7fff1a855787ce32",
        "type": "timeouttrigger",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "ontimeouttype": "str",
        "ontimeoutval": "timeout",
        "duration": "120",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 370,
        "y": 360,
        "wires": [
            [
                "db4acf3540250236"
            ]
        ]
    },
    {
        "id": "db4acf3540250236",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "watchdog timeout",
        "func": "if (msg.payload == \"timeout\") \n{\n    global.set(\"g_chlorineppm\", 0);\n    global.set(\"g_inletdepth\", 0);\n    global.set(\"g_mainvoltage\", 0);\n    global.set(\"g_outletpressure\", 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f238c387f6e5e795",
        "type": "timeouttrigger",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "ontimeouttype": "str",
        "ontimeoutval": "timeout",
        "duration": "120",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 450,
        "y": 860,
        "wires": [
            [
                "4e3b13e8499be418"
            ]
        ]
    },
    {
        "id": "4e3b13e8499be418",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "watchdog timeout",
        "func": "if (msg.payload == \"timeout\") \n{\n    global.set(\"g_outletpressure\", 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "d7e71232f871918e",
        "type": "mqtt in",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "",
        "topic": "vatturkeriot232",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7508e0a65803fa42",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 320,
        "wires": [
            [
                "10c86d67fe8eba27",
                "7fff1a855787ce32"
            ]
        ]
    },
    {
        "id": "f64c029.2c5838",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "IEEE-754 to float",
        "func": "/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6e888b6a.40c874",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "Value",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1150,
        "y": 300,
        "wires": []
    },
    {
        "id": "10c86d67fe8eba27",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "function 2",
        "func": "var o = msg.payload.PV1\nvar a = parseInt(o);\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "7a60eab0f397ce83"
            ]
        ]
    },
    {
        "id": "7a60eab0f397ce83",
        "type": "function",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "function 3",
        "func": "var o = msg.payload;\nvar hexString = o.toString(16);\nvar prestring = \"0x\";\nvar poststring = \"0000\";\nvar hex_conv = hexString.toString();\nvar join = prestring.concat(hexString,poststring);\n\nmsg.payload = join;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "f64c029.2c5838"
            ]
        ]
    },
    {
        "id": "7a13dfd0af01b704",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "debug 31",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "349196e67d0c604d",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec687e4fef065ac8",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "Pulse Raw",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload.PULSE",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "010a773a6e22c4f9",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "Analog 1",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload.AI1",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "7722b6d627e9ae5e",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "4615186676e8646c",
        "name": "Analog 2",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload.AI2",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 80,
        "wires": []
    },
    {
        "id": "a57f2ad93bb558bc",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "e705993c6aabb46d",
        "name": "debug 34",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 800,
        "y": 480,
        "wires": []
    },
    {
        "id": "981facb9674ee055",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 460,
        "y": 760,
        "wires": []
    },
    {
        "id": "0989b55c29ea8963",
        "type": "debug",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "name": "debug 36",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 860,
        "y": 760,
        "wires": []
    },
    {
        "id": "9fd0ecbd5f5aaaf0",
        "type": "range",
        "z": "5b16feb696a83054",
        "g": "5a58299dd6df8d38",
        "minin": "4",
        "maxin": "20",
        "minout": "0",
        "maxout": "2",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "ac4c4c41fd64ebfe"
            ]
        ]
    },
    {
        "id": "21326e5c8c810209",
        "type": "range",
        "z": "5b16feb696a83054",
        "g": "e705993c6aabb46d",
        "minin": "4",
        "maxin": "20",
        "minout": "0",
        "maxout": "0.49",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 620,
        "y": 500,
        "wires": [
            [
                "3b069038a4cbea9f"
            ]
        ]
    },
    {
        "id": "57e3b56469b607d1",
        "type": "range",
        "z": "5b16feb696a83054",
        "g": "773a42a7032f469e",
        "minin": "4",
        "maxin": "20",
        "minout": "0",
        "maxout": "75",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 610,
        "y": 640,
        "wires": [
            [
                "5888ea1afcc6ea43"
            ]
        ]
    },
    {
        "id": "f25d287982dcb499",
        "type": "random",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "",
        "low": "247",
        "high": "250",
        "inte": "false",
        "property": "payload",
        "x": 940,
        "y": 360,
        "wires": [
            [
                "07fb47ef6942ce85"
            ]
        ]
    },
    {
        "id": "d6115d23700372a7",
        "type": "inject",
        "z": "5b16feb696a83054",
        "g": "d3e07fe858bfa615",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 790,
        "y": 360,
        "wires": [
            [
                "f25d287982dcb499"
            ]
        ]
    },
    {
        "id": "c66a10406443bdea",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "15_Minutes",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 890,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b6b9569.70cbcc",
        "type": "comment",
        "z": "8951196369fc9661",
        "name": "Write Operation 15 mins",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "a597c07f658b0cae",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Flow count",
        "func": "var getter = global.get(\"g_flowcount\");\nmsg.payload = getter/1000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 80,
        "wires": [
            [
                "c66a10406443bdea"
            ]
        ]
    },
    {
        "id": "b6e2d3c8451a0467",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8742322734b9eeab",
        "type": "trigger",
        "z": "8951196369fc9661",
        "name": "",
        "op1": "true",
        "op2": "0",
        "op1type": "bool",
        "op2type": "str",
        "duration": "-60",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 80,
        "wires": [
            [
                "a597c07f658b0cae",
                "b9f306ebb89742eb",
                "06d5c240fc7bc5e7",
                "208e6676645dd7e0",
                "85d82f7a9012a50e",
                "cf7045d533410119"
            ]
        ]
    },
    {
        "id": "b9f306ebb89742eb",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Mains Voltage",
        "func": "var getter = global.get(\"g_mainvoltage\");\nmsg.payload = getter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "4e1488617c65b999"
            ]
        ]
    },
    {
        "id": "4e1488617c65b999",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "mains_voltage",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 900,
        "y": 120,
        "wires": []
    },
    {
        "id": "06d5c240fc7bc5e7",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Chlorine PPM Write",
        "func": "var getter = global.get(\"g_chlorineppm\");\nmsg.payload = getter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "9ff047b2fbdc88e5"
            ]
        ]
    },
    {
        "id": "9ff047b2fbdc88e5",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "chlorineppm",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "208e6676645dd7e0",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Inlet Depth Write",
        "func": "var getter = global.get(\"g_inletdepth\");\nmsg.payload = getter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "91a7a78c941be345"
            ]
        ]
    },
    {
        "id": "91a7a78c941be345",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "inletdepth",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "85d82f7a9012a50e",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Outlet Pressure Write",
        "func": "var getter = global.get(\"g_outletpressure\");\nmsg.payload = getter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            [
                "66d8342a891d997e",
                "8e6430ea60746f56"
            ]
        ]
    },
    {
        "id": "66d8342a891d997e",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "outletpressure",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 900,
        "y": 240,
        "wires": []
    },
    {
        "id": "c7ecf03ba824d372",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "value",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 890,
        "y": 360,
        "wires": []
    },
    {
        "id": "cf7045d533410119",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Table Logger",
        "func": "var a = global.get(\"g_flowcount\");\nvar b = global.get(\"g_mainvoltage\");\nvar c = global.get(\"g_chlorineppm\");\nvar d = global.get(\"g_inletdepth\");\nvar e = global.get(\"g_outletpressure\");\nvar f = (a/7000);   //Lpcd\nglobal.set(\"g_lpcd\", f);\n\n// Get stored value, use payload if nothing is stored\n//var previous = flow.get(\"previousvalue\") || 0;\n// Save this value for next time\n//flow.set(\"previousvalue\", a);\n// Compare the wo\n//var difference = a - previous;\n//global.set(\"g_difference\", difference);\n\n//var g = global.get(\"g_difference\");\n\nmsg.payload = {\n    flow_value: a,\n    voltage: b,\n    residual_chlorine: c,\n    water_table:d,\n    outlet_pressure: e,\n    lpcd : f,\n   daily_dif : 0,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 360,
        "wires": [
            [
                "c7ecf03ba824d372"
            ]
        ]
    },
    {
        "id": "80059331055326e1",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "dd0d04d6ed7d18f5"
            ]
        ]
    },
    {
        "id": "dd0d04d6ed7d18f5",
        "type": "trigger",
        "z": "8951196369fc9661",
        "name": "",
        "op1": "true",
        "op2": "0",
        "op1type": "bool",
        "op2type": "str",
        "duration": "-2",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 310,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ef6d97027eea6d82",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 18 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f3ebd32672c1efde",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3e916c6a75bad328",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 06 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a54cab9d161fc826",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3ff490942f027b46",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "LPCD Write",
        "func": "var getter = global.get(\"g_lpcd\");\nmsg.payload = getter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "ba134a96c9c3c9cb"
            ]
        ]
    },
    {
        "id": "ba134a96c9c3c9cb",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "lpcd",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "c5e6a6f6019ac0ce",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Daily Consumption calc",
        "func": "var a = global.get(\"g_flowcount\");\n\n// Get stored value, use payload if nothing is stored\nvar previous = flow.get(\"previousvalue\") || 0;\n// Save this value for next time\nflow.set(\"previousvalue\", a);\n// Compare the wo\nvar difference = a - previous;\nglobal.set(\"g_difference\", difference);\n\nvar g = global.get(\"g_difference\");\nmsg.payload = g;\nvar b = g/5000;\nglobal.set(\"g_dailylpcd\",b);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 440,
        "wires": [
            [
                "6f8230a4509dac08"
            ]
        ]
    },
    {
        "id": "6f8230a4509dac08",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "dailyconsumption",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 990,
        "y": 440,
        "wires": []
    },
    {
        "id": "8e6430ea60746f56",
        "type": "debug",
        "z": "8951196369fc9661",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 800,
        "y": 20,
        "wires": []
    },
    {
        "id": "0d17456a3d355aad",
        "type": "influxdb out",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "daily_lpcd",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "wateriot",
        "x": 960,
        "y": 480,
        "wires": []
    },
    {
        "id": "21b40f0fd44e7489",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Daily LPCD",
        "func": "var a = global.get(\"g_dailylpcd\");\nmsg.payload = a;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "0d17456a3d355aad",
                "514ba0589008d2e5"
            ]
        ]
    },
    {
        "id": "514ba0589008d2e5",
        "type": "debug",
        "z": "8951196369fc9661",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 520,
        "wires": []
    },
    {
        "id": "64e00b937a511805",
        "type": "function",
        "z": "8951196369fc9661",
        "name": "Force Values to 0",
        "func": "global.set(\"g_dailylpcd\", 0);\nglobal.set(\"g_difference\", 0);\nglobal.set(\"lasthourvalue\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "037a2dd22b36203b",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 580,
        "wires": [
            [
                "64e00b937a511805"
            ]
        ]
    },
    {
        "id": "939fb5c46a0eed24",
        "type": "influxdb in",
        "z": "8951196369fc9661",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "query": "from(bucket: \"wateriot\")\n  |> range(start: -24h)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"15_Minutes\")\n  |> filter(fn: (r) => r[\"_field\"] == \"value\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Development Team IoT",
        "x": 690,
        "y": 680,
        "wires": [
            [
                "58e61a9fa0fe8088"
            ]
        ]
    },
    {
        "id": "58e61a9fa0fe8088",
        "type": "debug",
        "z": "8951196369fc9661",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 700,
        "wires": []
    },
    {
        "id": "c2659a31a9494892",
        "type": "inject",
        "z": "8951196369fc9661",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 680,
        "wires": [
            [
                "939fb5c46a0eed24"
            ]
        ]
    },
    {
        "id": "0278a3c9f79c154d",
        "type": "function",
        "z": "3b8dd7c3553d4844",
        "name": "Random Generator",
        "func": "// Define the range for percentage generation for Actual values\nconst minPercentage = 95; // Minimum percentage (adjust as needed)\nconst maxPercentage = 100; // Maximum percentage (adjust as needed)\n\n// Define the input data with Set Speed and Actual values\n\nvar a = flow.get(\"impellerMotorSetSpeed\");\nvar b = flow.get(\"chopperMotorSetSpeed\");\nvar c = flow.get(\"comilMotorSetSpeed\");\n\nvar d = flow.get(\"impellerMotorActualCurrent\");\nvar e = flow.get(\"chopperMotorActualCurrent\");\nvar f = flow.get(\"comilMotorActualCurrent\");\n\nconst data = {\n    \"Impeller Motor Set Speed\": a,\n    \"Impeller Motor Actual Speed\": a,\n    \"Impeller Motor Actual Current\": d,\n    \"Chopper Motor Set Speed\": b,\n    \"Chopper Motor Actual Speed\": b,\n    \"Chopper Motor Actual Current\": e,\n    \"Comil Motor Set Speed\": c,\n    \"Comil Motor Actual Speed\": c,\n    \"Comil Motor Actual Current\": f,\n};\n\n// Generate a new object with randomized Actual values while keeping Set Speed values constant\nconst randomizedData = {};\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        if (key.includes(\"Set Speed\")) {\n            randomizedData[key] = data[key];\n        } else if (key.includes(\"Actual\")) {\n            const percentage = Math.random() * (maxPercentage - minPercentage) + minPercentage;\n            const randomValue = (percentage / 100) * data[key];\n            randomizedData[key] = parseFloat(randomValue.toFixed(2)); // Fixed to two decimal points\n        }\n    }\n}\n\n// Create a new message with the randomized data\nconst msg0 = { payload: randomizedData };\n\nreturn msg0;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cc717f1a6cb292e1",
        "type": "inject",
        "z": "3b8dd7c3553d4844",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "0278a3c9f79c154d"
            ]
        ]
    },
    {
        "id": "ee0c4cdb84b8c530",
        "type": "influxdb out",
        "z": "3b8dd7c3553d4844",
        "influxdb": "7afb8e48636a3f64",
        "name": "Influx DB",
        "measurement": "value",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Development Team IoT",
        "bucket": "Avon_IoT",
        "x": 660,
        "y": 400,
        "wires": []
    },
    {
        "id": "25c8bf21b532ffe5",
        "type": "comment",
        "z": "3b8dd7c3553d4844",
        "name": "Influx_Access_Token",
        "info": "1yIlhxq-aXRyU_2aSlJmjpVGqQCGiX_dt9nLTzkAkmrhiH0_qM25ID6jMWxceca3oYtgonuCSBhgSCWa56D-uA==",
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "1d7040b5f616dda2",
        "type": "trigger",
        "z": "3b8dd7c3553d4844",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "a085eaad969cce44"
            ]
        ]
    },
    {
        "id": "a085eaad969cce44",
        "type": "function",
        "z": "3b8dd7c3553d4844",
        "name": "Increment Variables",
        "func": "var impellerMotorSetSpeed = flow.get('impellerMotorSetSpeed') || 0;\nvar impellerMotorActualCurrent = flow.get('impellerMotorActualCurrent') || 0;\nvar chopperMotorSetSpeed = flow.get('chopperMotorSetSpeed') || 0;\nvar chopperMotorActualCurrent = flow.get('chopperMotorActualCurrent') || 0;\nvar comilMotorSetSpeed = flow.get('comilMotorSetSpeed') || 0;\nvar comilMotorActualCurrent = flow.get('comilMotorActualCurrent') || 0;\n\nif (msg.payload === '1') {\n    // Increment the variables\n    impellerMotorSetSpeed = Math.min(impellerMotorSetSpeed + 10, 1440);\n    impellerMotorActualCurrent = Math.min(impellerMotorActualCurrent + 1, 99.9);\n    chopperMotorSetSpeed = Math.min(chopperMotorSetSpeed + 10, 2840);\n    chopperMotorActualCurrent = Math.min(chopperMotorActualCurrent + 1, 99.9);\n    comilMotorSetSpeed = Math.min(comilMotorSetSpeed + 10, 2840);\n    comilMotorActualCurrent = Math.min(comilMotorActualCurrent + 0.5, 9.9);\n} else if (msg.payload === '0') {\n    // Decrement the variables\n    impellerMotorSetSpeed = Math.max(impellerMotorSetSpeed - 10, 0);\n    impellerMotorActualCurrent = Math.max(impellerMotorActualCurrent - 1, 0);\n    chopperMotorSetSpeed = Math.max(chopperMotorSetSpeed - 20, 0);\n    chopperMotorActualCurrent = Math.max(chopperMotorActualCurrent - 1, 0);\n    comilMotorSetSpeed = Math.max(comilMotorSetSpeed - 20, 0);\n    comilMotorActualCurrent = Math.max(comilMotorActualCurrent - 0.5, 0);\n}\n\nflow.set('impellerMotorSetSpeed', impellerMotorSetSpeed);\nflow.set('impellerMotorActualCurrent', impellerMotorActualCurrent);\nflow.set('chopperMotorSetSpeed', chopperMotorSetSpeed);\nflow.set('chopperMotorActualCurrent', chopperMotorActualCurrent);\nflow.set('comilMotorSetSpeed', comilMotorSetSpeed);\nflow.set('comilMotorActualCurrent', comilMotorActualCurrent);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "84abeaf4e2067c91",
        "type": "inject",
        "z": "3b8dd7c3553d4844",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d50d37fe5b51e1c1",
        "type": "mqtt in",
        "z": "3b8dd7c3553d4844",
        "name": "",
        "topic": "myaccount/avonpmec",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4a15e70efc124e48",
        "type": "debug",
        "z": "3b8dd7c3553d4844",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 260,
        "wires": []
    },
    {
        "id": "33505b09b974ab2f",
        "type": "mqtt in",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "",
        "topic": "myaccount/data2/mahadline6",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7508e0a65803fa42",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 100,
        "wires": [
            [
                "93e00c3d2abd686d",
                "79710492b0e0aa9e",
                "594b053b589348ca"
            ]
        ]
    },
    {
        "id": "5d1633da7b1da8fa",
        "type": "mqtt in",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "",
        "topic": "myaccount/data/mahadline3",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7508e0a65803fa42",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "d319c136564a4d7c",
                "93e521df5928fe95",
                "594b053b589348ca"
            ]
        ]
    },
    {
        "id": "93e00c3d2abd686d",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "Store to context",
        "func": "// Access and store the values from the message payload in the flow context with \"Line6\" added to each variable name\nflow.set(\"Line6_Planned_StopTime\", msg.payload.tag11);\nflow.set(\"Line6_Unplanned_StopTime\", msg.payload.tag12);\nflow.set(\"Line6_OEE\", msg.payload.tag8);\nflow.set(\"Line6_Quality\", msg.payload.tag13);\nflow.set(\"Line6_Performance\", msg.payload.tag17);\nflow.set(\"Line6_Availability\", msg.payload.tag9);\nflow.set(\"Line6_SKU_Name\", msg.payload.tag4);\nflow.set(\"Line6_Product\", msg.payload.tag5);\nflow.set(\"Line6_Line_Number\", msg.payload.tag6);\nflow.set(\"Line6_Size\", msg.payload.tag7);\nflow.set(\"Line6_SKU_code\", msg.payload.tag3);\nflow.set(\"Line6_Stop_Time\", msg.payload.tag2);\nflow.set(\"Line6_Reason_Code\", msg.payload.tag1);\nflow.set(\"Line6_Reason_1\", msg.payload.tag101);\nflow.set(\"Line6_Reason_2\", msg.payload.tag102);\nflow.set(\"Line6_Reason_3\", msg.payload.tag103);\nflow.set(\"Line6_Reason_4\", msg.payload.tag104);\nflow.set(\"Line6_Reason_5\", msg.payload.tag105);\nflow.set(\"Line6_Reason_6\", msg.payload.tag106);\nflow.set(\"Line6_Reason_7\", msg.payload.tag107);\nflow.set(\"Line6_Reason_8\", msg.payload.tag108);\nflow.set(\"Line6_Reason_9\", msg.payload.tag201);\nflow.set(\"Line6_Reason_10\", msg.payload.tag202);\nflow.set(\"Line6_Reason_11\", msg.payload.tag203);\nflow.set(\"Line6_Reason_12\", msg.payload.tag204);\nflow.set(\"Line6_Reason_13\", msg.payload.tag205);\nflow.set(\"Line6_Reason_14\", msg.payload.tag206);\nflow.set(\"Line6_Reason_15\", msg.payload.tag207);\nflow.set(\"Line6_Reason_16\", msg.payload.tag208);\nflow.set(\"Line6_Reason_17\", msg.payload.tag209);\nflow.set(\"Line6_Reason_18\", msg.payload.tag210);\nflow.set(\"Line6_Reason_19\", msg.payload.tag211);\nflow.set(\"Line6_Reason_20\", msg.payload.tag212);\nflow.set(\"Line6_Reason_21\", msg.payload.tag213);\nflow.set(\"Line6_Reason_22\", msg.payload.tag214);\nflow.set(\"Line6_Reason_23\", msg.payload.tag215);\nflow.set(\"Line6_Reason_24\", msg.payload.tag216);\nflow.set(\"Line6_Reason_25\", msg.payload.tag217);\nflow.set(\"Line6_Reason_26\", msg.payload.tag218);\nflow.set(\"Line6_Reason_27\", msg.payload.tag219);\nflow.set(\"Line6_Reason_28\", msg.payload.tag220);\nflow.set(\"Line6_Reason_29\", msg.payload.tag221);\nflow.set(\"Line6_Reason_30\", msg.payload.tag222);\nflow.set(\"Line6_Total_ShiftTime\", msg.payload.tag10);\nflow.set(\"Line6_Good_Production\", msg.payload.tag14);\nflow.set(\"Line6_Total_Production\", msg.payload.tag15);\nflow.set(\"Line6_Bad_Production\", msg.payload.tag16);\nflow.set(\"Line6_Actual_MC_Speed\", msg.payload.tag18);\nflow.set(\"Line6_Designed_MC_Speed\", msg.payload.tag19);\nflow.set(\"Line6_Head_Select\", msg.payload.tag300);\n//flow.set(\"Line6_Shift\", msg.payload.tag301);\nflow.set(\"Line6_ShiftNum\", msg.payload.tag302);\nflow.set(\"Line6_DHDesigned_MC_Speed\", msg.payload.tag303);\nflow.set(\"Line6_Total_MC_Production\", msg.payload.tag304);\n\nflow.set(\"Line6_MachineStatus\", msg.payload.tag20);\nflow.set(\"Line6_TimeoutStatus\", msg.payload.tag21);\n\n\n\nfunction getShift() {\n    // Get current date and time in UTC\n    const nowUTC = new Date();\n\n    // Convert UTC time to IST (Indian Standard Time)\n    const istOffset = 5.5 * 60 * 60 * 1000; // 5.5 hours ahead of UTC\n    const nowIST = new Date(nowUTC.getTime() + istOffset);\n\n    // Get current hour in IST\n    const currentHour = nowIST.getHours();\n\n    // Determine the shift based on the current hour\n    if (currentHour >= 8 && currentHour < 16) {\n        return 'A';\n    } else if (currentHour >= 16 && currentHour < 24) {\n        return 'B';\n    } else {\n        return 'C';\n    }\n}\n\n// Test the function\nconst currentShift = getShift();\nflow.set(\"Line6_Shift\", currentShift);\n\n\n// Pass the input message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d319c136564a4d7c",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "Store to context",
        "func": "// Access and store the values from the message payload in the flow context with \"Line3\" added to each variable name\nflow.set(\"Line3_Planned_StopTime\", msg.payload.tag11);\nflow.set(\"Line3_Unplanned_StopTime\", msg.payload.tag12);\nflow.set(\"Line3_OEE\", msg.payload.tag8);\nflow.set(\"Line3_Quality\", msg.payload.tag13);\nflow.set(\"Line3_Performance\", msg.payload.tag17);\nflow.set(\"Line3_Availability\", msg.payload.tag9);\nflow.set(\"Line3_SKU_Name\", msg.payload.tag4);\nflow.set(\"Line3_Product\", msg.payload.tag5);\nflow.set(\"Line3_Line_Number\", msg.payload.tag6);\nflow.set(\"Line3_Size\", msg.payload.tag7);\nflow.set(\"Line3_SKU_code\", msg.payload.tag3);\nflow.set(\"Line3_Stop_Time\", msg.payload.tag2);\nflow.set(\"Line3_Reason_Code\", msg.payload.tag1);\nflow.set(\"Line3_Reason_1\", msg.payload.tag101);\nflow.set(\"Line3_Reason_2\", msg.payload.tag102);\nflow.set(\"Line3_Reason_3\", msg.payload.tag103);\nflow.set(\"Line3_Reason_4\", msg.payload.tag104);\nflow.set(\"Line3_Reason_5\", msg.payload.tag105);\nflow.set(\"Line3_Reason_6\", msg.payload.tag106);\nflow.set(\"Line3_Reason_7\", msg.payload.tag107);\nflow.set(\"Line3_Reason_8\", msg.payload.tag108);\nflow.set(\"Line3_Reason_9\", msg.payload.tag201);\nflow.set(\"Line3_Reason_10\", msg.payload.tag202);\nflow.set(\"Line3_Reason_11\", msg.payload.tag203);\nflow.set(\"Line3_Reason_12\", msg.payload.tag204);\nflow.set(\"Line3_Reason_13\", msg.payload.tag205);\nflow.set(\"Line3_Reason_14\", msg.payload.tag206);\nflow.set(\"Line3_Reason_15\", msg.payload.tag207);\nflow.set(\"Line3_Reason_16\", msg.payload.tag208);\nflow.set(\"Line3_Reason_17\", msg.payload.tag209);\nflow.set(\"Line3_Reason_18\", msg.payload.tag210);\nflow.set(\"Line3_Reason_19\", msg.payload.tag211);\nflow.set(\"Line3_Reason_20\", msg.payload.tag212);\nflow.set(\"Line3_Total_ShiftTime\", msg.payload.tag10);\nflow.set(\"Line3_Good_Production\", msg.payload.tag14);\nflow.set(\"Line3_Total_Production\", msg.payload.tag15);\nflow.set(\"Line3_Bad_Production\", msg.payload.tag16);\nflow.set(\"Line3_Actual_MC_Speed\", msg.payload.tag18);\nflow.set(\"Line3_Designed_MC_Speed\", msg.payload.tag19);\nflow.set(\"Line3_Head_Select\", msg.payload.tag300);\n//flow.set(\"Line3_Shift\", msg.payload.tag301);\nflow.set(\"Line3_ShiftNum\", msg.payload.tag302);\n\nfunction getShift() {\n    // Get current date and time in UTC\n    const nowUTC = new Date();\n\n    // Convert UTC time to IST (Indian Standard Time)\n    const istOffset = 5.5 * 60 * 60 * 1000; // 5.5 hours ahead of UTC\n    const nowIST = new Date(nowUTC.getTime() + istOffset);\n\n    // Get current hour in IST\n    const currentHour = nowIST.getHours();\n\n    // Determine the shift based on the current hour\n    if (currentHour >= 8 && currentHour < 16) {\n        return 'A';\n    } else if (currentHour >= 16 && currentHour < 24) {\n        return 'B';\n    } else {\n        return 'C';\n    }\n}\n\n// Test the function\nconst currentShift = getShift();\nflow.set(\"Line3_Shift\", currentShift);\n\n\n\n\n// Pass the input message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b0bb80e8a848ae47",
        "type": "inject",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "2 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "795280e033bf07c3",
                "52a725e7ed90d45f",
                "68d51a574af962da",
                "11686801cda5c3b1",
                "7768fee09bee42cd"
            ]
        ]
    },
    {
        "id": "68d51a574af962da",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "Average OEE Calcs for Mahad",
        "func": "// Calculate the average values for Line3 and Line6 for OEE, Quality, Performance, and Availability\nvar line3OEE = flow.get(\"Line3_OEE\");\nvar line6OEE = flow.get(\"Line6_OEE\");\n\nvar line3Quality = flow.get(\"Line3_Quality\");\nvar line6Quality = flow.get(\"Line6_Quality\");\n\nvar line3Performance = flow.get(\"Line3_Performance\");\nvar line6Performance = flow.get(\"Line6_Performance\");\n\nvar line3Availability = flow.get(\"Line3_Availability\");\nvar line6Availability = flow.get(\"Line6_Availability\");\n\nif (\n    line3OEE !== undefined && line6OEE !== undefined &&\n    line3Quality !== undefined && line6Quality !== undefined &&\n    line3Performance !== undefined && line6Performance !== undefined &&\n    line3Availability !== undefined && line6Availability !== undefined\n) {\n    var mahadOEE = (line3OEE + line6OEE) / 2;\n    var mahadQuality = (line3Quality + line6Quality) / 2;\n    var mahadPerformance = (line3Performance + line6Performance) / 2;\n    var mahadAvailability = (line3Availability + line6Availability) / 2;\n\n    flow.set(\"Mahad_OEE\", mahadOEE);\n    flow.set(\"Mahad_Quality\", mahadQuality);\n    flow.set(\"Mahad_Performance\", mahadPerformance);\n    flow.set(\"Mahad_Availability\", mahadAvailability);\n} else {\n    // Handle the case where one or more values are missing\n    node.error(\"One or more Line3/Line6 values are missing.\");\n}\n\n\n\n// Pass the input message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "795280e033bf07c3",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "Line6 JSON",
        "func": "var Line6_Timeout = flow.get(\"Line6_Timeout\");\nvar Line6_MachineStatus = flow.get(\"Line6_MachineStatus\");\n\n\n\nif (Line6_Timeout == false)\n{\nvar Line6_Planned_StopTime = flow.get(\"Line6_Planned_StopTime\");\nvar Line6_Unplanned_StopTime = flow.get(\"Line6_Unplanned_StopTime\");\nvar Line6_OEE = flow.get(\"Line6_OEE\");\nvar Line6_Quality = flow.get(\"Line6_Quality\");\nvar Line6_Performance = flow.get(\"Line6_Performance\");\nvar Line6_Availability = flow.get(\"Line6_Availability\");\nvar Line6_SKU_Name = flow.get(\"Line6_SKU_Name\");\nvar Line6_Product = flow.get(\"Line6_Product\");\nvar Line6_Line_Number = flow.get(\"Line6_Line_Number\");\nvar Line6_Size = flow.get(\"Line6_Size\");\nvar Line6_SKU_code = flow.get(\"Line6_SKU_code\");\nvar Line6_Stop_Time = flow.get(\"Line6_Stop_Time\");\nvar Line6_Reason_Code = flow.get(\"Line6_Reason_Code\");\nvar Line6_Total_ShiftTime = flow.get(\"Line6_Total_ShiftTime\");\nvar Line6_Good_Production = flow.get(\"Line6_Good_Production\");\nvar Line6_Total_Production = flow.get(\"Line6_Total_Production\");\nvar Line6_Bad_Production = flow.get(\"Line6_Bad_Production\");\nvar Line6_Actual_MC_Speed = flow.get(\"Line6_Actual_MC_Speed\");\nvar Line6_DHDesigned_MC_Speed = flow.get(\"Line6_DHDesigned_MC_Speed\");\nvar Line6_Head_Select = flow.get(\"Line6_Head_Select\");\nvar Line6_Shift = flow.get(\"Line6_Shift\");\nvar Line6_ShiftNum = flow.get(\"Line6_ShiftNum\");\n\n\n    if (Line6_MachineStatus == true)   //Performance score should not be reported\n{\n// Create a JSON object with the \"Line6\" prefix removed from each name\n        msg.payload = {\n    \"Planned_StopTime\": Line6_Planned_StopTime,\n    \"Unplanned_StopTime\": Line6_Unplanned_StopTime,\n    \"OEE\": Line6_OEE,\n    \"Quality\": Line6_Quality,\n    \"Performance\": Line6_Performance,\n    \"Availability\": Line6_Availability,\n    \"SKU_Name\": Line6_SKU_Name,\n    \"Product\": Line6_Product,\n    \"Line_Number\": Line6_Line_Number,\n    \"Size\": Line6_Size,\n    \"SKU_code\": Line6_SKU_code,\n    \"Stop_Time\": Line6_Stop_Time,\n    \"Reason_Code\": Line6_Reason_Code,\n    \"Total_ShiftTime\": Line6_Total_ShiftTime,\n    \"Good_Production\": Line6_Good_Production,\n    \"Total_Production\": Line6_Total_Production,\n    \"Bad_Production\": Line6_Bad_Production,\n    \"Actual_MC_Speed\": Line6_Actual_MC_Speed,\n    \"Designed_MC_Speed\": Line6_DHDesigned_MC_Speed,\n    \"Head_Select\": Line6_Head_Select,\n    \"Shift\": Line6_Shift,\n    \"ShiftNum\": Line6_ShiftNum\n};\n\n}\n\nelse\n{\n        // Create a JSON object with the \"Line6\" prefix removed from each name\n        msg.payload = {\n            \"Planned_StopTime\": Line6_Planned_StopTime,\n            \"Unplanned_StopTime\": Line6_Unplanned_StopTime,\n            \"Quality\": Line6_Quality,\n            \"Availability\": Line6_Availability,\n            \"SKU_Name\": Line6_SKU_Name,\n            \"Product\": Line6_Product,\n            \"Line_Number\": Line6_Line_Number,\n            \"Size\": Line6_Size,\n            \"SKU_code\": Line6_SKU_code,\n            \"Stop_Time\": Line6_Stop_Time,\n            \"Reason_Code\": Line6_Reason_Code,\n            \"Total_ShiftTime\": Line6_Total_ShiftTime,\n            \"Good_Production\": Line6_Good_Production,\n            \"Total_Production\": Line6_Total_Production,\n            \"Bad_Production\": Line6_Bad_Production,\n            \"Actual_MC_Speed\": Line6_Actual_MC_Speed,\n            \"Designed_MC_Speed\": Line6_DHDesigned_MC_Speed,\n            \"Head_Select\": Line6_Head_Select,\n            \"Shift\": Line6_Shift,\n            \"ShiftNum\": Line6_ShiftNum  \n}\n}\n\n// Pass the JSON object to the next node or do any other desired operation\n\nreturn msg;\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "88c82445ebcec3fa"
            ]
        ]
    },
    {
        "id": "52a725e7ed90d45f",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "Line3 JSON",
        "func": "// Retrieve Line3 values from the flow context\nvar Line3_Timeout = flow.get(\"Line3_Timeout\");\n\nif (Line3_Timeout == false) {\n\n\nvar Line3_Planned_StopTime = flow.get(\"Line3_Planned_StopTime\");\nvar Line3_Unplanned_StopTime = flow.get(\"Line3_Unplanned_StopTime\");\nvar Line3_OEE = flow.get(\"Line3_OEE\");\nvar Line3_Quality = flow.get(\"Line3_Quality\");\nvar Line3_Performance = flow.get(\"Line3_Performance\");\nvar Line3_Availability = flow.get(\"Line3_Availability\");\nvar Line3_SKU_Name = flow.get(\"Line3_SKU_Name\");\nvar Line3_Product = flow.get(\"Line3_Product\");\nvar Line3_Line_Number = flow.get(\"Line3_Line_Number\");\nvar Line3_Size = flow.get(\"Line3_Size\");\nvar Line3_SKU_code = flow.get(\"Line3_SKU_code\");\nvar Line3_Stop_Time = flow.get(\"Line3_Stop_Time\");\nvar Line3_Reason_Code = flow.get(\"Line3_Reason_Code\");\nvar Line3_Total_ShiftTime = flow.get(\"Line3_Total_ShiftTime\");\nvar Line3_Good_Production = flow.get(\"Line3_Good_Production\");\nvar Line3_Total_Production = flow.get(\"Line3_Total_Production\");\nvar Line3_Bad_Production = flow.get(\"Line3_Bad_Production\");\nvar Line3_Actual_MC_Speed = flow.get(\"Line3_Actual_MC_Speed\");\nvar Line3_Designed_MC_Speed = flow.get(\"Line3_Designed_MC_Speed\");\nvar Line3_Head_Select = flow.get(\"Line3_Head_Select\");\nvar Line3_Shift = flow.get(\"Line3_Shift\");\nvar Line3_ShiftNum = flow.get(\"Line3_ShiftNum\");\n\n\n// Create a JSON object with the \"Line3\" prefix removed from each name\nvar Line3_JSON = {\n    \"Planned_StopTime\": Line3_Planned_StopTime,\n    \"Unplanned_StopTime\": Line3_Unplanned_StopTime,\n    \"OEE\": Line3_OEE,\n    \"Quality\": Line3_Quality,\n    \"Performance\": Line3_Performance,\n    \"Availability\": Line3_Availability,\n    \"SKU_Name\": Line3_SKU_Name,\n    \"Product\": Line3_Product,\n    \"Line_Number\": Line3_Line_Number,\n    \"Size\": Line3_Size,\n    \"SKU_code\": Line3_SKU_code,\n    \"Stop_Time\": Line3_Stop_Time,\n    \"Reason_Code\": Line3_Reason_Code,\n    \"Total_ShiftTime\": Line3_Total_ShiftTime,\n    \"Good_Production\": Line3_Good_Production,\n    \"Total_Production\": Line3_Total_Production,\n    \"Bad_Production\": Line3_Bad_Production,\n    \"Actual_MC_Speed\": Line3_Actual_MC_Speed,\n    \"Designed_MC_Speed\": Line3_Designed_MC_Speed,\n    \"Head_Select\": Line3_Head_Select,\n    \"Shift\": Line3_Shift,\n    \"ShiftNum\": Line3_ShiftNum\n    \n};\n\n// Pass the JSON object to the next node or do any other desired operation\nmsg.payload = Line3_JSON;\nreturn msg;\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 420,
        "wires": [
            [
                "0b174c80883fe5f0"
            ]
        ]
    },
    {
        "id": "11686801cda5c3b1",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "Mahad Avg JSON",
        "func": "// Retrieve the average values from the flow context\nvar Line6_Timeout = flow.get(\"Line6_Timeout\");\nvar Line3_Timeout = flow.get(\"Line3_Timeout\");\nif (Line3_Timeout == false || Line6_Timeout == false) \n\n{\n\n\nvar Mahad_OEE = flow.get(\"Mahad_OEE\");\nvar Mahad_Quality = flow.get(\"Mahad_Quality\");\nvar Mahad_Performance = flow.get(\"Mahad_Performance\");\nvar Mahad_Availability = flow.get(\"Mahad_Availability\");\n\n// Create a JSON object for the average values\nvar Mahad_Average_JSON = {\n    \"OEE\": Mahad_OEE,\n    \"Quality\": Mahad_Quality,\n    \"Performance\": Mahad_Performance,\n    \"Availability\": Mahad_Availability\n};\n\n// Pass the Mahad average JSON object to the next node or perform other desired operations\nmsg.payload = Mahad_Average_JSON;\nreturn msg;\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 460,
        "wires": [
            [
                "c766f28540c6839b"
            ]
        ]
    },
    {
        "id": "ac54da3fa6672dfe",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "Line6 Shift End Push",
        "func": "// Retrieve Line6 values from the flow context\nvar Line6_Timeout = flow.get(\"Line6_Timeout\");\n\nif (Line6_Timeout == false) {\n    var Line6_Reason_1 = flow.get(\"Line6_Reason_1\");\n    var Line6_Reason_2 = flow.get(\"Line6_Reason_2\");\n    var Line6_Reason_3 = flow.get(\"Line6_Reason_3\");\n    var Line6_Reason_4 = flow.get(\"Line6_Reason_4\");\n    var Line6_Reason_5 = flow.get(\"Line6_Reason_5\");\n    var Line6_Reason_6 = flow.get(\"Line6_Reason_6\");\n    var Line6_Reason_7 = flow.get(\"Line6_Reason_7\");\n    var Line6_Reason_8 = flow.get(\"Line6_Reason_8\");\n    var Line6_Reason_9 = flow.get(\"Line6_Reason_9\");\n    var Line6_Reason_10 = flow.get(\"Line6_Reason_10\");\n    var Line6_Reason_11 = flow.get(\"Line6_Reason_11\");\n    var Line6_Reason_12 = flow.get(\"Line6_Reason_12\");\n    var Line6_Reason_13 = flow.get(\"Line6_Reason_13\");\n    var Line6_Reason_14 = flow.get(\"Line6_Reason_14\");\n    var Line6_Reason_15 = flow.get(\"Line6_Reason_15\");\n    var Line6_Reason_16 = flow.get(\"Line6_Reason_16\");\n    var Line6_Reason_17 = flow.get(\"Line6_Reason_17\");\n    var Line6_Reason_18 = flow.get(\"Line6_Reason_18\");\n    var Line6_Reason_19 = flow.get(\"Line6_Reason_19\");\n    var Line6_Reason_20 = flow.get(\"Line6_Reason_20\");\n    var Line6_Reason_21 = flow.get(\"Line6_Reason_21\");\n    var Line6_Reason_22 = flow.get(\"Line6_Reason_22\");\n    var Line6_Reason_23 = flow.get(\"Line6_Reason_23\");\n    var Line6_Reason_24 = flow.get(\"Line6_Reason_24\");\n    var Line6_Reason_25 = flow.get(\"Line6_Reason_25\");\n    var Line6_Reason_26 = flow.get(\"Line6_Reason_26\");\n    var Line6_Reason_27 = flow.get(\"Line6_Reason_27\");\n    var Line6_Reason_28 = flow.get(\"Line6_Reason_28\");\n    var Line6_Reason_29 = flow.get(\"Line6_Reason_29\");\n    var Line6_Reason_30 = flow.get(\"Line6_Reason_30\");\n    var Line6_Total_Production = flow.get(\"Line6_Total_Production\");\n    var Line6_Shift = flow.get(\"Line6_Shift\");\n    var Line6_SKU_Name = flow.get(\"Line6_SKU_Name\");\n    var Line6_Product = flow.get(\"Line6_Product\");\n    var Line6_OEE = flow.get(\"Line6_OEE\");\n    var a = flow.get(\"Line6_Planned_StopTime\");\n    var d = flow.get(\"Line6_Unplanned_StopTime\");\n    var Line6_Total_MC_Production = flow.get(\"Line6_Total_MC_Production\");\n    var bad_prod = flow.get(\"Line6_Bad_Production\");\n\n    // performance calcs\n    var e = a + d; // Addition of plan + unplan time\n    var calc_act_speed = Line6_Total_MC_Production / (480 - e);\n    var calc_design_speed = flow.get(\"AvgLine6_DHDesigned_MC_Speed\");\n    var calc_performance = calc_act_speed / calc_design_speed;  // calculated from average of designed speed\n\n    // availability calcs\n    var plan_time = 480 - a; // shift time - shutdown losses\n    var run_time = plan_time - d; // planned time - downtime\n    var calc_availability = run_time / plan_time;\n\n    // quality calcs\n    var good_prod = Line6_Total_MC_Production - bad_prod;   // Total production of all SKU\n    var calc_quality = good_prod / Line6_Total_MC_Production;\n\n    // Final OEE Calcs\n    var calc_OEE = calc_performance * calc_quality * calc_availability;\n    var b = (480 - a) / 480;  // capacity utilization\n    var c = calc_OEE * b; // BBOee\n\n    // Speed Loss\n    var spd_loss = ((calc_design_speed - calc_act_speed) * run_time) / calc_design_speed;\n\n    // Time Lost to produce quality defects\n    var quality_loss = bad_prod / calc_design_speed;\n\n    // Minor Stoppage Loss\n    var minor_stoppage_Loss = 480 - run_time - spd_loss - quality_loss;\n    if (minor_stoppage_Loss < 0) {\n        minor_stoppage_Loss = 0;\n    }\n\n    // Create a JSON object with the \"Line6_\" prefix removed from each name\n    var Line6_JSON = {\n        \"Reason_1\": 480,\n        \"Reason_2\": Line6_Reason_2,\n        \"Reason_3\": Line6_Reason_3,\n        \"Reason_4\": Line6_Reason_4,\n        \"Reason_5\": Line6_Reason_5,\n        \"Reason_6\": Line6_Reason_6,\n        \"Reason_7\": Line6_Reason_7,\n        \"Reason_8\": Line6_Reason_8,\n        \"Reason_9\": Line6_Reason_9,\n        \"Reason_10\": Line6_Reason_10,\n        \"Reason_11\": Line6_Reason_11,\n        \"Reason_12\": Line6_Reason_12,\n        \"Reason_13\": Line6_Reason_13,\n        \"Reason_14\": Line6_Reason_14,\n        \"Reason_15\": Line6_Reason_15,\n        \"Reason_16\": Line6_Reason_16,\n        \"Reason_17\": Line6_Reason_17,\n        \"Reason_18\": Line6_Reason_18,\n        \"Reason_19\": Line6_Reason_19,\n        \"Reason_20\": Line6_Reason_20,\n        \"Reason_21\": Line6_Reason_21,\n        \"Reason_22\": Line6_Reason_22,\n        \"Reason_23\": Line6_Reason_23,\n        \"Reason_24\": Line6_Reason_24,\n        \"Reason_25\": Line6_Reason_25,\n        \"Reason_26\": Line6_Reason_26,\n        \"Reason_27\": Line6_Reason_27,\n        \"Reason_28\": Line6_Reason_28,\n        \"Reason_29\": Line6_Reason_29,\n        \"Reason_30\": Line6_Reason_30,\n        \"Batch_Production\": Line6_Total_Production,\n        \"Batch_Shift\": Line6_Shift,\n        \"Batch_SKU_Name\": Line6_SKU_Name,\n        \"Batch_Product\": Line6_Product,\n        \"Batch_OEE\": Line6_OEE,\n        \"Capacity_Utilization\": 0,\n        \"BBOee\": 0,\n    };\n\n    // Add additional fields only if calc_performance is not zero\n    if (calc_performance !== 0) {\n        Line6_JSON[\"Reason_1\"] = Line6_Reason_1;\n        Line6_JSON[\"Avg_OEE\"] = calc_OEE;\n        Line6_JSON[\"Avg_Quality\"] = calc_quality;\n        Line6_JSON[\"Avg_Performance\"] = calc_performance;\n        Line6_JSON[\"Avg_Availability\"] = calc_availability;\n        Line6_JSON[\"Capacity_Utilization\"] = b;\n        Line6_JSON[\"BBOee\"] = c;\n        Line6_JSON[\"calc_act_speed\"] = calc_act_speed;\n        Line6_JSON[\"calc_design_speed\"] = calc_design_speed;\n        Line6_JSON[\"plan_time\"] = plan_time;\n        Line6_JSON[\"run_time\"] = run_time;\n        Line6_JSON[\"good_prod\"] = good_prod;\n        Line6_JSON[\"Speed_Loss\"] = spd_loss;\n        Line6_JSON[\"Quality_Loss\"] = quality_loss;\n        Line6_JSON[\"Minor_Stoppage_Loss\"] = minor_stoppage_Loss;\n    }\n\n    // Pass the JSON object to the next node or do any other desired operation\n    msg.payload = Line6_JSON;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            [
                "4c68eb45d46b295b",
                "44fc4fa576061c2d"
            ]
        ]
    },
    {
        "id": "7ac86265bc5e196f",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "Line3 Shift End Push",
        "func": "// Retrieve Line3 values from the flow context\n\n// Retrieve Line3 values from the flow context\nvar Line3_Timeout = flow.get(\"Line3_Timeout\");\n\nif (Line3_Timeout == false) \n{\n\nvar Line3_Reason_1 = flow.get(\"Line3_Reason_1\");\nvar Line3_Reason_2 = flow.get(\"Line3_Reason_2\");\nvar Line3_Reason_3 = flow.get(\"Line3_Reason_3\");\nvar Line3_Reason_4 = flow.get(\"Line3_Reason_4\");\nvar Line3_Reason_5 = flow.get(\"Line3_Reason_5\");\nvar Line3_Reason_6 = flow.get(\"Line3_Reason_6\");\nvar Line3_Reason_7 = flow.get(\"Line3_Reason_7\");\nvar Line3_Reason_8 = flow.get(\"Line3_Reason_8\");\nvar Line3_Reason_9 = flow.get(\"Line3_Reason_9\");\nvar Line3_Reason_10 = flow.get(\"Line3_Reason_10\");\nvar Line3_Reason_11 = flow.get(\"Line3_Reason_11\");\nvar Line3_Reason_12 = flow.get(\"Line3_Reason_12\");\nvar Line3_Reason_13 = flow.get(\"Line3_Reason_13\");\nvar Line3_Reason_14 = flow.get(\"Line3_Reason_14\");\nvar Line3_Reason_15 = flow.get(\"Line3_Reason_15\");\nvar Line3_Reason_16 = flow.get(\"Line3_Reason_16\");\nvar Line3_Reason_17 = flow.get(\"Line3_Reason_17\");\nvar Line3_Reason_18 = flow.get(\"Line3_Reason_18\");\nvar Line3_Reason_19 = flow.get(\"Line3_Reason_19\");\nvar Line3_Reason_20 = flow.get(\"Line3_Reason_20\");\nvar Line3_Total_Production = flow.get(\"Line3_Total_Production\");\nvar Line3_Shift = flow.get(\"Line3_Shift\");\nvar Line3_SKU_Name = flow.get(\"Line3_SKU_Name\");\nvar Line3_Product = flow.get(\"Line3_Product\");\nvar Line3_OEE = flow.get(\"Line3_OEE\");\nvar AvgLine3_OEE = flow.get(\"AvgLine3_OEE\");\nvar AvgLine3_Quality = flow.get(\"AvgLine3_Quality\");\nvar AvgLine3_Performance = flow.get(\"AvgLine3_Performance\");\nvar AvgLine3_Availability = flow.get(\"AvgLine3_Availability\");\nvar a = flow.get(\"Line3_Planned_StopTime\");\nvar b = (480 - a) / 480;  //capacity utilization;\nvar c = AvgLine3_OEE * b //BBOee;\n\n// Create a JSON object with the \"Line3_\" prefix removed from each name\nvar Line3_JSON = {\n    \"Reason_1\": Line3_Reason_1,\n    \"Reason_2\": Line3_Reason_2,\n    \"Reason_3\": Line3_Reason_3,\n    \"Reason_4\": Line3_Reason_4,\n    \"Reason_5\": Line3_Reason_5,\n    \"Reason_6\": Line3_Reason_6,\n    \"Reason_7\": Line3_Reason_7,\n    \"Reason_8\": Line3_Reason_8,\n    \"Reason_9\": Line3_Reason_9,\n    \"Reason_10\": Line3_Reason_10,\n    \"Reason_11\": Line3_Reason_11,\n    \"Reason_12\": Line3_Reason_12,\n    \"Reason_13\": Line3_Reason_13,\n    \"Reason_14\": Line3_Reason_14,\n    \"Reason_15\": Line3_Reason_15,\n    \"Reason_16\": Line3_Reason_16,\n    \"Reason_17\": Line3_Reason_17,\n    \"Reason_18\": Line3_Reason_18,\n    \"Reason_19\": Line3_Reason_19,\n    \"Reason_20\": Line3_Reason_20,\n    \"Batch_Production\": Line3_Total_Production,\n    \"Batch_Shift\": Line3_Shift,\n    \"Batch_SKU_Name\": Line3_SKU_Name,\n    \"Batch_Product\": Line3_Product,\n    \"Batch_OEE\": Line3_OEE,\n    \"Avg_OEE\": AvgLine3_OEE,\n    \"Avg_Quality\": AvgLine3_Quality,\n    \"Avg_Performance\": AvgLine3_Performance,\n    \"Avg_Availability\": AvgLine3_Availability,\n    \"Capacity_Utilization\": b,\n    \"BBOee\": c,\n};\n\n// Pass the JSON object to the next node or do any other desired operation\nmsg.payload = Line3_JSON;\nreturn msg;\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "a3280168c109030d"
            ]
        ]
    },
    {
        "id": "0b174c80883fe5f0",
        "type": "mqtt out",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "",
        "topic": "nodered/mahadc59/line3",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "88c82445ebcec3fa",
        "type": "mqtt out",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "",
        "topic": "nodered/mahadc59/line6",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "c766f28540c6839b",
        "type": "mqtt out",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "",
        "topic": "nodered/mahadc59/plant",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "c3d0a10ba285d267",
        "type": "inject",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "2:58PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "28 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "ac54da3fa6672dfe",
                "7ac86265bc5e196f"
            ]
        ]
    },
    {
        "id": "4c68eb45d46b295b",
        "type": "mqtt out",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "",
        "topic": "nodered/mahadc59/line6",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 670,
        "y": 560,
        "wires": []
    },
    {
        "id": "a3280168c109030d",
        "type": "mqtt out",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "",
        "topic": "nodered/mahadc59/line3",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "e49db31a7637b835",
        "type": "inject",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "10:58 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "28 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "ac54da3fa6672dfe",
                "7ac86265bc5e196f"
            ]
        ]
    },
    {
        "id": "7b4d8a235630b389",
        "type": "inject",
        "z": "e149d7250d3f3e9d",
        "g": "bb0c0c967e53f4c9",
        "name": "6:58 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "28 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "7ac86265bc5e196f",
                "ac54da3fa6672dfe"
            ]
        ]
    },
    {
        "id": "79710492b0e0aa9e",
        "type": "timeouttrigger",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "300",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "3f9c73d8804b8d11"
            ]
        ]
    },
    {
        "id": "93e521df5928fe95",
        "type": "timeouttrigger",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "300",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 450,
        "y": 200,
        "wires": [
            [
                "d0decc444504341f"
            ]
        ]
    },
    {
        "id": "3f9c73d8804b8d11",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"Line6_Timeout\", true);\n} else {\n    flow.set(\"Line6_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d0decc444504341f",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "e1e1c1532edcb723",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"Line3_Timeout\", true);\n} else {\n    flow.set(\"Line3_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7768fee09bee42cd",
        "type": "function",
        "z": "e149d7250d3f3e9d",
        "g": "d266316bb8967303",
        "name": "Average OEE (Shift end Push)",
        "func": "var Line6_MachineStatus = flow.get(\"Line6_MachineStatus\");\n\n// Get the current time in IST\nvar currentTime = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Kolkata\" });\n\n// Convert the string representation to a Date object\ncurrentTime = new Date(currentTime);\n\n// Calculate the start time of the current shift (8am IST)\nvar shiftStartTime = new Date(currentTime);\nshiftStartTime.setHours(8, 0, 0, 0);\n\n// Calculate the shift duration in milliseconds (8 hours)\nvar shiftDuration = 8 * 60 * 60 * 1000;\n\n// Calculate the shift index based on the current time\nvar shiftIndex = Math.floor((currentTime.getTime() - shiftStartTime.getTime()) / shiftDuration);\n\n// Initialize variables using flow context\ncontext.lastShiftIndex = context.lastShiftIndex || 0;\n\n// Line6 variables\ncontext.overallSum_Line6_OEE = context.overallSum_Line6_OEE || 0;\ncontext.overallCount_Line6_OEE = context.overallCount_Line6_OEE || 0;\ncontext.overallAverage_Line6_OEE = context.overallAverage_Line6_OEE || 0;\n\ncontext.overallSum_Line6_Quality = context.overallSum_Line6_Quality || 0;\ncontext.overallCount_Line6_Quality = context.overallCount_Line6_Quality || 0;\ncontext.overallAverage_Line6_Quality = context.overallAverage_Line6_Quality || 0;\n\ncontext.overallSum_Line6_Performance = context.overallSum_Line6_Performance || 0;\ncontext.overallCount_Line6_Performance = context.overallCount_Line6_Performance || 0;\ncontext.overallAverage_Line6_Performance = context.overallAverage_Line6_Performance || 0;\n\ncontext.overallSum_Line6_Availability = context.overallSum_Line6_Availability || 0;\ncontext.overallCount_Line6_Availability = context.overallCount_Line6_Availability || 0;\ncontext.overallAverage_Line6_Availability = context.overallAverage_Line6_Availability || 0;\n\ncontext.overallSum_Line6_DHDesigned_MC_Speed = context.overallSum_Line6_DHDesigned_MC_Speed || 0;\ncontext.overallCount_Line6_DHDesigned_MC_Speed = context.overallCount_Line6_DHDesigned_MC_Speed || 0;\ncontext.overallAverage_Line6_DHDesigned_MC_Speed = context.overallAverage_Line6_DHDesigned_MC_Speed || 0;\n\n// Line3 variables\ncontext.overallSum_Line3_OEE = context.overallSum_Line3_OEE || 0;\ncontext.overallCount_Line3_OEE = context.overallCount_Line3_OEE || 0;\ncontext.overallAverage_Line3_OEE = context.overallAverage_Line3_OEE || 0;\n\ncontext.overallSum_Line3_Quality = context.overallSum_Line3_Quality || 0;\ncontext.overallCount_Line3_Quality = context.overallCount_Line3_Quality || 0;\ncontext.overallAverage_Line3_Quality = context.overallAverage_Line3_Quality || 0;\n\ncontext.overallSum_Line3_Performance = context.overallSum_Line3_Performance || 0;\ncontext.overallCount_Line3_Performance = context.overallCount_Line3_Performance || 0;\ncontext.overallAverage_Line3_Performance = context.overallAverage_Line3_Performance || 0;\n\ncontext.overallSum_Line3_Availability = context.overallSum_Line3_Availability || 0;\ncontext.overallCount_Line3_Availability = context.overallCount_Line3_Availability || 0;\ncontext.overallAverage_Line3_Availability = context.overallAverage_Line3_Availability || 0;\n\n// Create variables to store the overall averages\nif (context.lastShiftIndex !== shiftIndex) {\n    // Reset the overall averages if it's a new shift\n    context.overallSum_Line6_OEE = 0;\n    context.overallCount_Line6_OEE = 0;\n\n    context.overallSum_Line6_Quality = 0;\n    context.overallCount_Line6_Quality = 0;\n\n    context.overallSum_Line6_Performance = 0;\n    context.overallCount_Line6_Performance = 0;\n\n    context.overallSum_Line6_Availability = 0;\n    context.overallCount_Line6_Availability = 0;\n\n    context.overallSum_Line6_DHDesigned_MC_Speed = 0;\n    context.overallCount_Line6_DHDesigned_MC_Speed = 0;\n\n    context.overallSum_Line3_OEE = 0;\n    context.overallCount_Line3_OEE = 0;\n\n    context.overallSum_Line3_Quality = 0;\n    context.overallCount_Line3_Quality = 0;\n\n    context.overallSum_Line3_Performance = 0;\n    context.overallCount_Line3_Performance = 0;\n\n    context.overallSum_Line3_Availability = 0;\n    context.overallCount_Line3_Availability = 0;\n\n    context.lastShiftIndex = shiftIndex;\n}\n\n// Update the total sum and count based on the current shift for Line6_Quality\ncontext.overallSum_Line6_Quality += flow.get('Line6_Quality');\ncontext.overallCount_Line6_Quality++;\n\n// Update the total sum and count based on the current shift for Line6_Performance\nif (Line6_MachineStatus == true) //If machine is stopped performance score will not be stored\n{\n    context.overallSum_Line6_Performance += flow.get('Line6_Performance');\n    context.overallCount_Line6_Performance++;\n}\n\n// Update the total sum and count based on the current shift for Line6_Availability\ncontext.overallSum_Line6_Availability += flow.get('Line6_Availability');\ncontext.overallCount_Line6_Availability++;\n\n// Update the total sum and count based on the current shift for Line6_DHDesigned_MC_Speed\ncontext.overallSum_Line6_DHDesigned_MC_Speed += flow.get('Line6_DHDesigned_MC_Speed');\ncontext.overallCount_Line6_DHDesigned_MC_Speed++;\n\n// Update the total sum and count based on the current shift for Line3_OEE\ncontext.overallSum_Line3_OEE += flow.get('Line3_OEE');\ncontext.overallCount_Line3_OEE++;\n\n// Update the total sum and count based on the current shift for Line3_Quality\ncontext.overallSum_Line3_Quality += flow.get('Line3_Quality');\ncontext.overallCount_Line3_Quality++;\n\n// Update the total sum and count based on the current shift for Line3_Performance\ncontext.overallSum_Line3_Performance += flow.get('Line3_Performance');\ncontext.overallCount_Line3_Performance++;\n\n// Update the total sum and count based on the current shift for Line3_Availability\ncontext.overallSum_Line3_Availability += flow.get('Line3_Availability');\ncontext.overallCount_Line3_Availability++;\n\n// Calculate the overall averages\ncontext.overallAverage_Line6_Quality = context.overallSum_Line6_Quality / context.overallCount_Line6_Quality;\ncontext.overallAverage_Line6_Performance = context.overallSum_Line6_Performance / context.overallCount_Line6_Performance;\ncontext.overallAverage_Line6_Availability = context.overallSum_Line6_Availability / context.overallCount_Line6_Availability;\ncontext.overallAverage_Line6_OEE = context.overallAverage_Line6_Quality * context.overallAverage_Line6_Performance * context.overallAverage_Line6_Availability;\ncontext.overallAverage_Line6_DHDesigned_MC_Speed = context.overallSum_Line6_DHDesigned_MC_Speed / context.overallCount_Line6_DHDesigned_MC_Speed;\n\ncontext.overallAverage_Line3_OEE = context.overallSum_Line3_OEE / context.overallCount_Line3_OEE;\ncontext.overallAverage_Line3_Quality = context.overallSum_Line3_Quality / context.overallCount_Line3_Quality;\ncontext.overallAverage_Line3_Performance = context.overallSum_Line3_Performance / context.overallCount_Line3_Performance;\ncontext.overallAverage_Line3_Availability = context.overallSum_Line3_Availability / context.overallCount_Line3_Availability;\n\n// Store averages in flow variables\nflow.set('AvgLine6_OEE', context.overallAverage_Line6_OEE);\nflow.set('AvgLine6_Quality', context.overallAverage_Line6_Quality);\nflow.set('AvgLine6_Performance', context.overallAverage_Line6_Performance);\nflow.set('AvgLine6_Availability', context.overallAverage_Line6_Availability);\nflow.set('AvgLine6_DHDesigned_MC_Speed', context.overallAverage_Line6_DHDesigned_MC_Speed);\n\nflow.set('AvgLine3_OEE', context.overallAverage_Line3_OEE);\nflow.set('AvgLine3_Quality', context.overallAverage_Line3_Quality);\nflow.set('AvgLine3_Performance', context.overallAverage_Line3_Performance);\nflow.set('AvgLine3_Availability', context.overallAverage_Line3_Availability);\n\n// Output the results\nmsg.payload = {\n    overallAverage_Line6_OEE: context.overallAverage_Line6_OEE,\n    overallAverage_Line6_Quality: context.overallAverage_Line6_Quality,\n    overallAverage_Line6_Performance: context.overallAverage_Line6_Performance,\n    overallAverage_Line6_Availability: context.overallAverage_Line6_Availability,\n    overallAverage_Line6_DHDesigned_MC_Speed: context.overallAverage_Line6_DHDesigned_MC_Speed,\n    overallAverage_Line3_OEE: context.overallAverage_Line3_OEE,\n    overallAverage_Line3_Quality: context.overallAverage_Line3_Quality,\n    overallAverage_Line3_Performance: context.overallAverage_Line3_Performance,\n    overallAverage_Line3_Availability: context.overallAverage_Line3_Availability,\n    overallSum_Line6_OEE: context.overallSum_Line6_OEE,\n    overallCount_Line6_OEE: context.overallCount_Line6_OEE,\n    overallSum_Line6_Quality: context.overallSum_Line6_Quality,\n    overallCount_Line6_Quality: context.overallCount_Line6_Quality,\n    overallSum_Line6_Performance: context.overallSum_Line6_Performance,\n    overallCount_Line6_Performance: context.overallCount_Line6_Performance,\n    overallSum_Line6_Availability: context.overallSum_Line6_Availability,\n    overallCount_Line6_Availability: context.overallCount_Line6_Availability,\n    overallSum_Line6_DHDesigned_MC_Speed: context.overallSum_Line6_DHDesigned_MC_Speed,\n    overallCount_Line6_DHDesigned_MC_Speed: context.overallCount_Line6_DHDesigned_MC_Speed,\n    overallSum_Line3_OEE: context.overallSum_Line3_OEE,\n    overallCount_Line3_OEE: context.overallCount_Line3_OEE,\n    overallSum_Line3_Quality: context.overallSum_Line3_Quality,\n    overallCount_Line3_Quality: context.overallCount_Line3_Quality,\n    overallSum_Line3_Performance: context.overallSum_Line3_Performance,\n    overallCount_Line3_Performance: context.overallCount_Line3_Performance,\n    overallSum_Line3_Availability: context.overallSum_Line3_Availability,\n    overallCount_Line3_Availability: context.overallCount_Line3_Availability\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "44fc4fa576061c2d",
        "type": "debug",
        "z": "e149d7250d3f3e9d",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.overallAverage_Line6_DHDesigned_MC_Speed",
        "statusType": "auto",
        "x": 880,
        "y": 560,
        "wires": []
    },
    {
        "id": "594b053b589348ca",
        "type": "debug",
        "z": "e149d7250d3f3e9d",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "7f1f21a9e00fbe4a",
        "type": "debug",
        "z": "e149d7250d3f3e9d",
        "name": "debug 90",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 820,
        "wires": []
    },
    {
        "id": "6596341f3fa86c05",
        "type": "mqtt in",
        "z": "e149d7250d3f3e9d",
        "name": "",
        "topic": "nodered/mahadc59/line6",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9b14792972648b23",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 800,
        "wires": [
            [
                "7f1f21a9e00fbe4a"
            ]
        ]
    },
    {
        "id": "f5c458b9ee04a807",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "taloja/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "3b52fb102a7ae976"
            ]
        ]
    },
    {
        "id": "3b52fb102a7ae976",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 4",
        "func": "\nvar a= parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "2023107a05a7daf1"
            ]
        ]
    },
    {
        "id": "b1d1fc07ee3701a2",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "vizag/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "ecc4b07aa203de8d"
            ]
        ]
    },
    {
        "id": "ecc4b07aa203de8d",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 5",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "0aa49bdc9c1e15e3"
            ]
        ]
    },
    {
        "id": "2023107a05a7daf1",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/taloja/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 120,
        "wires": []
    },
    {
        "id": "0aa49bdc9c1e15e3",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/vizag/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 180,
        "wires": []
    },
    {
        "id": "a45e570ce7dd7b16",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "pil/energy/taloja",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "477f83cc423524f4",
        "type": "debug",
        "z": "5e625e67d45a2a57",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 860,
        "wires": []
    },
    {
        "id": "972df4dc227319b7",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "Mahad_A22/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "b755e3686b432f06"
            ]
        ]
    },
    {
        "id": "b755e3686b432f06",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 6",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "7a92dbf142d79fbd"
            ]
        ]
    },
    {
        "id": "7a92dbf142d79fbd",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/Mahad_A22/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 890,
        "y": 240,
        "wires": []
    },
    {
        "id": "89b184f746a24ca6",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "Mahad_C58/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "9248e6a60177387f"
            ]
        ]
    },
    {
        "id": "9248e6a60177387f",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 7",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 300,
        "wires": [
            [
                "80bfe015048c9583"
            ]
        ]
    },
    {
        "id": "80bfe015048c9583",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/Mahad_C58/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "f19dfabd3935d44b",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "VAPI1806/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 360,
        "wires": [
            [
                "1bf34b16afe8289b"
            ]
        ]
    },
    {
        "id": "6ec7889d10127b01",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "BADDI2/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 420,
        "wires": [
            [
                "05722530eca87e25"
            ]
        ]
    },
    {
        "id": "f657d408ec6da7f2",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "FALNA/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "4a89c93e3ecd04ee"
            ]
        ]
    },
    {
        "id": "91d8a79889bbd333",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "NALAGARH/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 540,
        "wires": [
            [
                "e43cc4d3333ed81b"
            ]
        ]
    },
    {
        "id": "5152ab097a1d13d1",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "KALAMB2/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 600,
        "wires": [
            [
                "2d6e360fdcc22737"
            ]
        ]
    },
    {
        "id": "198a58ad22196af7",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "BADDI4/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 660,
        "wires": [
            [
                "e04b4d01b201592b"
            ]
        ]
    },
    {
        "id": "46450a4b02b18a34",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "PANOLI/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 410,
        "y": 720,
        "wires": [
            [
                "d1c74694f045c196"
            ]
        ]
    },
    {
        "id": "1bf34b16afe8289b",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 8",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "110871932b1ae20e"
            ]
        ]
    },
    {
        "id": "05722530eca87e25",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 9",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "0daef52aeebdf1bc"
            ]
        ]
    },
    {
        "id": "4a89c93e3ecd04ee",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 10",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 480,
        "wires": [
            [
                "50e3fb0ba9ed164b"
            ]
        ]
    },
    {
        "id": "e43cc4d3333ed81b",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 11",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "afea63aaf3ba5af7"
            ]
        ]
    },
    {
        "id": "2d6e360fdcc22737",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 12",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            [
                "9aabc7d7409139a4"
            ]
        ]
    },
    {
        "id": "e04b4d01b201592b",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 13",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "a178807a0a88ca4c"
            ]
        ]
    },
    {
        "id": "d1c74694f045c196",
        "type": "function",
        "z": "5e625e67d45a2a57",
        "name": "function 14",
        "func": "var a = parseFloat(msg.payload.Absorption);\nvar b = parseFloat(msg.payload.Concentration);\nvar c = parseFloat(msg.payload.Wavelength);\n\n// Check and set variables to 0 if they are NaN\nif (isNaN(a)) {\n    a = 0;\n}\nif (isNaN(b)) {\n    b = 0;\n}\nif (isNaN(c)) {\n    c = 0;\n}\n\n\nvar JSON_Output = {\n    \"Absorption\": a,\n    \"Concentration\": b,\n    \"Wavelength\": c\n};\n\nmsg.payload = JSON_Output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 720,
        "wires": [
            [
                "d8081499f5236ed4"
            ]
        ]
    },
    {
        "id": "110871932b1ae20e",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/VAPI1806/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "0daef52aeebdf1bc",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/BADDI2/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 420,
        "wires": []
    },
    {
        "id": "50e3fb0ba9ed164b",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/FALNA/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 480,
        "wires": []
    },
    {
        "id": "afea63aaf3ba5af7",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/NALAGARGH/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "9aabc7d7409139a4",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/KALAMB2/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 880,
        "y": 600,
        "wires": []
    },
    {
        "id": "a178807a0a88ca4c",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/BADDI4/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 660,
        "wires": []
    },
    {
        "id": "d8081499f5236ed4",
        "type": "mqtt out",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "spectrometer/PANOLI/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 870,
        "y": 720,
        "wires": []
    },
    {
        "id": "f3631784e162dd13",
        "type": "mqtt in",
        "z": "5e625e67d45a2a57",
        "name": "",
        "topic": "NALAGARGH/spectrometer/001",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 470,
        "y": 840,
        "wires": [
            [
                "477f83cc423524f4"
            ]
        ]
    },
    {
        "id": "67528aa8f4864af6",
        "type": "mqtt in",
        "z": "5b21b717b84c9578",
        "name": "Falna EXOR",
        "topic": "myaccount/data/falna",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 510,
        "y": 200,
        "wires": [
            [
                "9da05eb090ae8366",
                "b8f8aeac05d933aa"
            ]
        ]
    },
    {
        "id": "b8f8aeac05d933aa",
        "type": "debug",
        "z": "5b21b717b84c9578",
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 240,
        "wires": []
    },
    {
        "id": "9da05eb090ae8366",
        "type": "mqtt out",
        "z": "5b21b717b84c9578",
        "name": "To Thingsboard Falna",
        "topic": "myaccount/data/falna",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0f359e6fe6861745",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "bb54a469d3237512",
        "type": "mqtt in",
        "z": "c1e01897118eb874",
        "name": "Test Classic Stripes",
        "topic": "ClassicStripes/Data/1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 120,
        "wires": [
            [
                "330c755aad0448f9",
                "f870e5c05ab019df"
            ]
        ]
    },
    {
        "id": "9b58a69647aedef2",
        "type": "debug",
        "z": "c1e01897118eb874",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "330c755aad0448f9",
        "type": "function",
        "z": "c1e01897118eb874",
        "name": "Null to 0",
        "func": "// Input JSON object\nvar inputJson = msg.payload;\n\n// Iterate over the keys of the object\nfor (var key in inputJson) {\n    // Check if the value is null\n    if (inputJson[key] === null) {\n        // Replace null with 0\n        inputJson[key] = 0;\n    }\n}\n\n// Set the modified JSON object back to msg.payload\nmsg.payload = inputJson;\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 120,
        "wires": [
            [
                "db219ec6cbfd88b4"
            ]
        ]
    },
    {
        "id": "328c74695a675ebe",
        "type": "inject",
        "z": "c1e01897118eb874",
        "name": "2 min",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "a951aa054aee7879"
            ]
        ]
    },
    {
        "id": "a951aa054aee7879",
        "type": "function",
        "z": "c1e01897118eb874",
        "name": "PPRSPS2",
        "func": "var PPRSPS2_Timeout = flow.get(\"PPRSPS2_Timeout\");\nvar PPRSPS2_OEE = flow.get(\"PPRSPS2_OEE\");\nvar PPRSPS2_Availability = flow.get(\"PPRSPS2_Availability\");\nvar PPRSPS2_Performance = flow.get(\"PPRSPS2_Performance\");\nvar PPRSPS2_Quality = flow.get(\"PPRSPS2_Quality\");\nvar PPRSPS2_Current_PO_Name = flow.get(\"PPRSPS2_Current_PO_Name\");\nvar PPRSPS2_Shift = flow.get(\"PPRSPS2_Shift\");\nvar PPRSPS2_Total_Planned_Time = flow.get(\"PPRSPS2_Total_Planned_Time\");\nvar PPRSPS2_Total_Unplanned_Time = flow.get(\"PPRSPS2_Total_Unplanned_Time\");\nvar PPRSPS2_Actual_Speed = flow.get(\"PPRSPS2_Actual_Speed\");\nvar PPRSPS2_Designed_Speed = flow.get(\"PPRSPS2_Designed_Speed\");\nvar PPRSPS2_GoodProduction = flow.get(\"PPRSPS2_GoodProduction\");\nvar PPRSPS2_Reject_Production = flow.get(\"PPRSPS2_Reject_Production\");\nvar PPRSPS2_WorkCenter = flow.get(\"PPRSPS2_WorkCenter\");\nvar PPRSPS2_Phantom = flow.get(\"PPRSPS2_Phantom\");\nvar PPRSPS2_SheetQty = flow.get(\"PPRSPS2_SheetQty\");\n\n\nif (PPRSPS2_Timeout == false) \n{\n    \nvar PPRSPS2_JSON = \n{\n    \"OEE\": PPRSPS2_OEE,\n    \"Quality\": PPRSPS2_Quality,\n    \"Performance\": PPRSPS2_Performance,\n    \"Availability\": PPRSPS2_Availability,\n    \"Current_PO_Name\": PPRSPS2_Current_PO_Name,\n    \"Shift\": PPRSPS2_Shift,\n    \"Total_Planned_Time\": PPRSPS2_Total_Planned_Time,\n    \"Total_Unplanned_Time\": PPRSPS2_Total_Unplanned_Time,\n    \"Actual_Speed\": PPRSPS2_Actual_Speed,\n    \"Designed_Speed\": PPRSPS2_Designed_Speed,\n    \"GoodProduction\": PPRSPS2_GoodProduction,\n    \"Reject_Production\": PPRSPS2_Reject_Production,\n    \"WorkCenter\": PPRSPS2_WorkCenter,\n    \"Phantom\": PPRSPS2_Phantom,\n    \"SheetQty\": PPRSPS2_SheetQty\n   \n\n\n    \n    \n};\n    // Pass the JSON object to the next node or perform other desired operations\n    msg.payload = PPRSPS2_JSON;\n    return msg;\n\n   \n}\n\n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "0185cf960af6cbf5"
            ]
        ]
    },
    {
        "id": "d8176449c6a868ca",
        "type": "function",
        "z": "c1e01897118eb874",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"PPRSPS2_Timeout\", true);\n} else {\n    flow.set(\"PPRSPS2_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f870e5c05ab019df",
        "type": "timeouttrigger",
        "z": "c1e01897118eb874",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "300",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "d8176449c6a868ca"
            ]
        ]
    },
    {
        "id": "db219ec6cbfd88b4",
        "type": "function",
        "z": "c1e01897118eb874",
        "name": "Flow Variable Set",
        "func": "\nflow.set(\"PPRSPS2_OEE\", msg.payload.OEE);\nflow.set(\"PPRSPS2_Availability\", msg.payload.Availability);\nflow.set(\"PPRSPS2_Performance\", msg.payload.Performance);\nflow.set(\"PPRSPS2_Quality\", msg.payload.Quality);\nflow.set(\"PPRSPS2_Current_PO_Name\", msg.payload.Current_PO_Name);\nflow.set(\"PPRSPS2_Shift\", msg.payload.Shift);\nflow.set(\"PPRSPS2_Total_Planned_Time\", parseFloat(msg.payload.Total_Planned_Time));\nflow.set(\"PPRSPS2_Total_Unplanned_Time\", parseFloat(msg.payload.Total_Unplanned_Time));\nflow.set(\"PPRSPS2_Actual_Speed\", msg.payload.Actual_Speed);\nflow.set(\"PPRSPS2_Designed_Speed\", msg.payload.Designed_Speed);\nflow.set(\"PPRSPS2_GoodProduction\", msg.payload.GoodProduction);\nflow.set(\"PPRSPS2_Reject_Production\", msg.payload.Reject_Production);\nflow.set(\"PPRSPS2_WorkCenter\", msg.payload.WorkCenter);\nflow.set(\"PPRSPS2_Phantom\", msg.payload.Phantom);\nflow.set(\"PPRSPS2_SheetQty\", msg.payload.SheetQty);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0185cf960af6cbf5",
        "type": "mqtt out",
        "z": "c1e01897118eb874",
        "name": "",
        "topic": "naxnova/PPRSPS2",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b14792972648b23",
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "6a7094436ae82239",
        "type": "debug",
        "z": "c1e01897118eb874",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 160,
        "wires": []
    },
    {
        "id": "fdfcf832885b1242",
        "type": "mqtt in",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "myaccount/naxnovatest",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ab79866d752577c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "cd716fc7d1ef3e84",
                "2908256e62221031",
                "a1f6b1ef0cd1fa1c"
            ]
        ]
    },
    {
        "id": "7ce9e6087540396c",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "Chiller",
        "func": "var EM6400NGChiller_Average_L_L =  flow.get(\"EM6400NGChiller/Average_L-L\");\nvar EM6400NGChiller_Average_L_N =  flow.get(\"EM6400NGChiller/Average_L-N\");\nvar EM6400NGChiller_Average_Current =  flow.get(\"EM6400NGChiller/Average_Current\");\nvar EM6400NGChiller_EnergyVAh =  flow.get(\"EM6400NGChiller/EnergyVAh\");\nvar EM6400NGChiller_EnergyVARhInductive =  flow.get(\"EM6400NGChiller/EnergyVARhInductive\");\nvar EM6400NGChiller_EnergyWh =  flow.get(\"EM6400NGChiller/EnergyWh\");\nvar EM6400NGChiller_PowerFactor =  flow.get(\"EM6400NGChiller/PowerFactor\");\n\nmsg.payload = {\n        \"Avg_LL\": EM6400NGChiller_Average_L_L,\n        \"Avg_LN\": EM6400NGChiller_Average_L_N,\n        \"AvgCurrent\": EM6400NGChiller_Average_Current,\n        \"EnergyVAh\": EM6400NGChiller_EnergyVAh,\n        \"EnergyVARh\": EM6400NGChiller_EnergyVARhInductive,\n        \"EnergyWh\": EM6400NGChiller_EnergyWh,\n        \"PowerFactor\": EM6400NGChiller_PowerFactor\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "60375ba5abb1be7d"
            ]
        ]
    },
    {
        "id": "cd716fc7d1ef3e84",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Extract the tag name\nvar tagName = payload.tag;\n\n// Check if payload.v and payload.v.v are defined before accessing\nif (payload.v && typeof payload.v.v !== 'undefined') {\n    var value = payload.v.v;\n    var roundedValue = parseFloat(value.toFixed(2));\n\n    // Store the value in a flow variable using the tag name as the key\n    flow.set(tagName, roundedValue);\n}\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6c48a9e5a22ae0c2",
        "type": "inject",
        "z": "e8ab1e8943fdcd97",
        "name": "2 mins push",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "067ccdab9969b815"
            ]
        ]
    },
    {
        "id": "b406fba396f83c67",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB01",
        "func": "var EM6400OldPDB01_Average_L_L = flow.get(\"EM6400OldPDB01/Average_L-L\");\nvar EM6400OldPDB01_Average_L_N = flow.get(\"EM6400OldPDB01/Average_L-N\");\nvar EM6400OldPDB01_Average_Current = flow.get(\"EM6400OldPDB01/Average_Current\");\nvar EM6400OldPDB01_EnergyVAh = flow.get(\"EM6400OldPDB01/EnergyVAh\");\nvar EM6400OldPDB01_EnergyVARhInductive = flow.get(\"EM6400OldPDB01/EnergyVARhInductive\");\nvar EM6400OldPDB01_EnergyWh = flow.get(\"EM6400OldPDB01/EnergyWh\");\nvar EM6400OldPDB01_PowerFactor = flow.get(\"EM6400OldPDB01/PowerFactor\");\n\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldPDB01_Average_L_L,\n    \"Avg_LN\": EM6400OldPDB01_Average_L_N,\n    \"AvgCurrent\": EM6400OldPDB01_Average_Current,\n    \"EnergyVAh\": EM6400OldPDB01_EnergyVAh,\n    \"EnergyVARh\": EM6400OldPDB01_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldPDB01_EnergyWh,\n    \"PowerFactor\": EM6400OldPDB01_PowerFactor\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            [
                "ddee5640f8e7c44d"
            ]
        ]
    },
    {
        "id": "fcf8bb231d29ee21",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB06",
        "func": "var EM6400PDB04_Average_L_L = flow.get(\"EM6400PDB04/Average_L-L\");\nvar EM6400PDB04_Average_L_N = flow.get(\"EM6400PDB04/Average_L-N\");\nvar EM6400PDB04_Average_Current = flow.get(\"EM6400PDB04/Average_Current\");\nvar EM6400PDB04_EnergyVAh = flow.get(\"EM6400PDB04/EnergyVAh\");\nvar EM6400PDB04_EnergyVARhInductive = flow.get(\"EM6400PDB04/EnergyVARhInductive\");\nvar EM6400PDB04_EnergyWh = flow.get(\"EM6400PDB04/EnergyWh\");\nvar EM6400PDB04_PowerFactor = flow.get(\"EM6400PDB04/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400PDB04_Average_L_L,\n    \"Avg_LN\": EM6400PDB04_Average_L_N,\n    \"AvgCurrent\": EM6400PDB04_Average_Current,\n    \"EnergyVAh\": EM6400PDB04_EnergyVAh,\n    \"EnergyVARh\": EM6400PDB04_EnergyVARhInductive,\n    \"EnergyWh\": EM6400PDB04_EnergyWh,\n    \"PowerFactor\": EM6400PDB04_PowerFactor\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "dc5c361361760b3e"
            ]
        ]
    },
    {
        "id": "9f750c2fbe442627",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PanelMLDB",
        "func": "var EM6400OldPanelMLDB_Average_L_L = flow.get(\"EM6400OldPanelMLDB/Average_L-L\");\nvar EM6400OldPanelMLDB_Average_L_N = flow.get(\"EM6400OldPanelMLDB/Average_L-N\");\nvar EM6400OldPanelMLDB_Average_Current = flow.get(\"EM6400OldPanelMLDB/Average_Current\");\nvar EM6400OldPanelMLDB_EnergyVAh = flow.get(\"EM6400OldPanelMLDB/EnergyVAh\");\nvar EM6400OldPanelMLDB_EnergyVARhInductive = flow.get(\"EM6400OldPanelMLDB/EnergyVARhInductive\");\nvar EM6400OldPanelMLDB_EnergyWh = flow.get(\"EM6400OldPanelMLDB/EnergyWh\");\nvar EM6400OldPanelMLDB_PowerFactor = flow.get(\"EM6400OldPanelMLDB/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldPanelMLDB_Average_L_L,\n    \"Avg_LN\": EM6400OldPanelMLDB_Average_L_N,\n    \"AvgCurrent\": EM6400OldPanelMLDB_Average_Current,\n    \"EnergyVAh\": EM6400OldPanelMLDB_EnergyVAh,\n    \"EnergyVARh\": EM6400OldPanelMLDB_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldPanelMLDB_EnergyWh,\n    \"PowerFactor\": EM6400OldPanelMLDB_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "f437e124c8e583e7"
            ]
        ]
    },
    {
        "id": "7e8bfe35cada362c",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PanelAHU",
        "func": "var EM6400OldPanelAHU_Average_L_L = flow.get(\"EM6400OldPanelAHU/Average_L-L\");\nvar EM6400OldPanelAHU_Average_L_N = flow.get(\"EM6400OldPanelAHU/Average_L-N\");\nvar EM6400OldPanelAHU_Average_Current = flow.get(\"EM6400OldPanelAHU/Average_Current\");\nvar EM6400OldPanelAHU_EnergyVAh = flow.get(\"EM6400OldPanelAHU/EnergyVAh\");\nvar EM6400OldPanelAHU_EnergyVARhInductive = flow.get(\"EM6400OldPanelAHU/EnergyVARhInductive\");\nvar EM6400OldPanelAHU_EnergyWh = flow.get(\"EM6400OldPanelAHU/EnergyWh\");\nvar EM6400OldPanelAHU_PowerFactor = flow.get(\"EM6400OldPanelAHU/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldPanelAHU_Average_L_L,\n    \"Avg_LN\": EM6400OldPanelAHU_Average_L_N,\n    \"AvgCurrent\": EM6400OldPanelAHU_Average_Current,\n    \"EnergyVAh\": EM6400OldPanelAHU_EnergyVAh,\n    \"EnergyVARh\": EM6400OldPanelAHU_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldPanelAHU_EnergyWh,\n    \"PowerFactor\": EM6400OldPanelAHU_PowerFactor\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "7a43b28a908a2b11"
            ]
        ]
    },
    {
        "id": "cc980d67e15011b6",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PumpHouse",
        "func": "var EM6400OldPumpHouse_Average_L_L = flow.get(\"EM6400OldPumpHouse/Average_L-L\");\nvar EM6400OldPumpHouse_Average_L_N = flow.get(\"EM6400OldPumpHouse/Average_L-N\");\nvar EM6400OldPumpHouse_Average_Current = flow.get(\"EM6400OldPumpHouse/Average_Current\");\nvar EM6400OldPumpHouse_EnergyVAh = flow.get(\"EM6400OldPumpHouse/EnergyVAh\");\nvar EM6400OldPumpHouse_EnergyVARhInductive = flow.get(\"EM6400OldPumpHouse/EnergyVARhInductive\");\nvar EM6400OldPumpHouse_EnergyWh = flow.get(\"EM6400OldPumpHouse/EnergyWh\");\nvar EM6400OldPumpHouse_PowerFactor = flow.get(\"EM6400OldPumpHouse/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldPumpHouse_Average_L_L,\n    \"Avg_LN\": EM6400OldPumpHouse_Average_L_N,\n    \"AvgCurrent\": EM6400OldPumpHouse_Average_Current,\n    \"EnergyVAh\": EM6400OldPumpHouse_EnergyVAh,\n    \"EnergyVARh\": EM6400OldPumpHouse_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldPumpHouse_EnergyWh,\n    \"PowerFactor\": EM6400OldPumpHouse_PowerFactor\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "bdb067971edb87fd"
            ]
        ]
    },
    {
        "id": "c69813188a0f6ac9",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB05",
        "func": "var EM6400OldPDB05_Average_L_L = flow.get(\"EM6400OldPDB05/Average_L-L\");\nvar EM6400OldPDB05_Average_L_N = flow.get(\"EM6400OldPDB05/Average_L-N\");\nvar EM6400OldPDB05_Average_Current = flow.get(\"6400OldPDB05/Average_Current\");\nvar EM6400OldPDB05_EnergyVAh = flow.get(\"6400OldPDB05/EnergyVAh\");\nvar EM6400OldPDB05_EnergyVARhInductive = flow.get(\"6400OldPDB05/EnergyVARhInductive\");\nvar EM6400OldPDB05_EnergyWh = flow.get(\"6400OldPDB05/EnergyWh\");\nvar EM6400OldPDB05_PowerFactor = flow.get(\"EM6400OldPDB05/PowerFactor\");\n\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldPDB05_Average_L_L,\n    \"Avg_LN\": EM6400OldPDB05_Average_L_N,\n    \"AvgCurrent\": EM6400OldPDB05_Average_Current,\n    \"EnergyVAh\": EM6400OldPDB05_EnergyVAh,\n    \"EnergyVARh\": EM6400OldPDB05_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldPDB05_EnergyWh,\n    \"PowerFactor\": EM6400OldPDB05_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "80d6abaf4ac3474e"
            ]
        ]
    },
    {
        "id": "c25a21095fe9ac93",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB04",
        "func": "var EM6400PDB04_Average_L_L = flow.get(\"6400OldPDB04/Average_L-L\");\nvar EM6400PDB04_Average_L_N = flow.get(\"6400OldPDB04/Average_L-N\");\nvar EM6400PDB04_Average_Current = flow.get(\"6400OldPDB04/Average_Current\");\nvar EM6400PDB04_EnergyVAh = flow.get(\"6400OldPDB04/EnergyVAh\");\nvar EM6400PDB04_EnergyVARhInductive = flow.get(\"6400OldPDB04/EnergyVARhInductive\");\nvar EM6400PDB04_EnergyWh = flow.get(\"6400OldPDB04/EnergyWh\");\nvar EM6400PDB04_PowerFactor = flow.get(\"6400OldPDB04/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400PDB04_Average_L_L,\n    \"Avg_LN\": EM6400PDB04_Average_L_N,\n    \"AvgCurrent\": EM6400PDB04_Average_Current,\n    \"EnergyVAh\": EM6400PDB04_EnergyVAh,\n    \"EnergyVARh\": EM6400PDB04_EnergyVARhInductive,\n    \"EnergyWh\": EM6400PDB04_EnergyWh,\n    \"PowerFactor\": EM6400PDB04_PowerFactor\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "70e8e1efd498840d"
            ]
        ]
    },
    {
        "id": "f9f30852142c36d2",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "AirCompressor",
        "func": "var EM6400OldAirCompressor_Average_L_L = flow.get(\"EM6400OldAirCompressor/Average_L-L\");\nvar EM6400OldAirCompressor_Average_L_N = flow.get(\"EM6400OldAirCompressor/Average_L-N\");\nvar EM6400OldAirCompressor_Average_Current = flow.get(\"EM6400OldAirCompressor/Average_Current\");\nvar EM6400OldAirCompressor_EnergyVAh = flow.get(\"EM6400OldAirCompressor/EnergyVAh\");\nvar EM6400OldAirCompressor_EnergyVARhInductive = flow.get(\"EM6400OldAirCompressor/EnergyVARhInductive\");\nvar EM6400OldAirCompressor_EnergyWh = flow.get(\"EM6400OldAirCompressor/EnergyWh\");\nvar EM6400OldAirCompressor_PowerFactor = flow.get(\"EM6400OldAirCompressor/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldAirCompressor_Average_L_L,\n    \"Avg_LN\": EM6400OldAirCompressor_Average_L_N,\n    \"AvgCurrent\": EM6400OldAirCompressor_Average_Current,\n    \"EnergyVAh\": EM6400OldAirCompressor_EnergyVAh,\n    \"EnergyVARh\": EM6400OldAirCompressor_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldAirCompressor_EnergyWh,\n    \"PowerFactor\": EM6400OldAirCompressor_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "3ee30b012c5ea272"
            ]
        ]
    },
    {
        "id": "8475f6f6519aaf1e",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB08",
        "func": "var EM6400NGPDB08_Average_L_L = flow.get(\"EM6400NGPDB08/Average_L-L\");\nvar EM6400NGPDB08_Average_L_N = flow.get(\"EM6400NGPDB08/Average_L-N\");\nvar EM6400NGPDB08_Average_Current = flow.get(\"EM6400NGPDB08/Average_Current\");\nvar EM6400NGPDB08_EnergyVAh = flow.get(\"EM6400NGPDB08/EnergyVAh\");\nvar EM6400NGPDB08_EnergyVARhInductive = flow.get(\"EM6400NGPDB08/EnergyVARhInductive\");\nvar EM6400NGPDB08_EnergyWh = flow.get(\"EM6400NGPDB08/EnergyWh\");\nvar EM6400NGPDB08_PowerFactor = flow.get(\"EM6400NGPDB08/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400NGPDB08_Average_L_L,\n    \"Avg_LN\": EM6400NGPDB08_Average_L_N,\n    \"AvgCurrent\": EM6400NGPDB08_Average_Current,\n    \"EnergyVAh\": EM6400NGPDB08_EnergyVAh,\n    \"EnergyVARh\": EM6400NGPDB08_EnergyVARhInductive,\n    \"EnergyWh\": EM6400NGPDB08_EnergyWh,\n    \"PowerFactor\": EM6400NGPDB08_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 780,
        "wires": [
            [
                "9be7ff243caecb15"
            ]
        ]
    },
    {
        "id": "0c684bbc5e4b4272",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "SplitAC",
        "func": "var EM6400OldSplitAC_Average_L_L = flow.get(\"EM6400OldSplitAC/Average_L-L\");\nvar EM6400OldSplitAC_Average_L_N = flow.get(\"EM6400OldSplitAC/Average_L-N\");\nvar EM6400OldSplitAC_Average_Current = flow.get(\"EM6400OldSplitAC/Average_Current\");\nvar EM6400OldSplitAC_EnergyVAh = flow.get(\"EM6400OldSplitAC/EnergyVAh\");\nvar EM6400OldSplitAC_EnergyVARhInductive = flow.get(\"EM6400OldSplitAC/EnergyVARhInductive\");\nvar EM6400OldSplitAC_EnergyWh = flow.get(\"EM6400OldSplitAC/EnergyWh\");\nvar EM6400OldSplitAC_PowerFactor = flow.get(\"EM6400OldSplitAC/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldSplitAC_Average_L_L,\n    \"Avg_LN\": EM6400OldSplitAC_Average_L_N,\n    \"AvgCurrent\": EM6400OldSplitAC_Average_Current,\n    \"EnergyVAh\": EM6400OldSplitAC_EnergyVAh,\n    \"EnergyVARh\": EM6400OldSplitAC_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldSplitAC_EnergyWh,\n    \"PowerFactor\": EM6400OldSplitAC_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 820,
        "wires": [
            [
                "93703107574aeb44"
            ]
        ]
    },
    {
        "id": "cb4b3e265857b06f",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "ETPSTP",
        "func": "var EM6400OldETPSTP_Average_L_L = flow.get(\"EM6400OldETPSTP/Average_L-L\");\nvar EM6400OldETPSTP_Average_L_N = flow.get(\"EM6400OldETPSTP/Average_L-N\");\nvar EM6400OldETPSTP_Average_Current = flow.get(\"EM6400OldETPSTP/Average_Current\");\nvar EM6400OldETPSTP_EnergyVAh = flow.get(\"EM6400OldETPSTP/EnergyVAh\");\nvar EM6400OldETPSTP_EnergyVARhInductive = flow.get(\"EM6400OldETPSTP/EnergyVARhInductive\");\nvar EM6400OldETPSTP_EnergyWh = flow.get(\"EM6400OldETPSTP/EnergyWh\");\nvar EM6400OldETPSTP_PowerFactor = flow.get(\"EM6400OldETPSTP/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldETPSTP_Average_L_L,\n    \"Avg_LN\": EM6400OldETPSTP_Average_L_N,\n    \"AvgCurrent\": EM6400OldETPSTP_Average_Current,\n    \"EnergyVAh\": EM6400OldETPSTP_EnergyVAh,\n    \"EnergyVARh\": EM6400OldETPSTP_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldETPSTP_EnergyWh,\n    \"PowerFactor\": EM6400OldETPSTP_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 860,
        "wires": [
            [
                "2f536dde5f055419"
            ]
        ]
    },
    {
        "id": "9a13efbda9cf04b9",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PDB07",
        "func": "var EM6400NGPDB07_Average_L_L = flow.get(\"EM6400NGPDB07/Average_L-L\");\nvar EM6400NGPDB07_Average_L_N = flow.get(\"EM6400NGPDB07/Average_L-N\");\nvar EM6400NGPDB07_Average_Current = flow.get(\"EM6400NGPDB07/Average_Current\");\nvar EM6400NGPDB07_EnergyVAh = flow.get(\"EM6400NGPDB07/EnergyVAh\");\nvar EM6400NGPDB07_EnergyVARhInductive = flow.get(\"EM6400NGPDB07/EnergyVARhInductive\");\nvar EM6400NGPDB07_EnergyWh = flow.get(\"EM6400NGPDB07/EnergyWh\");\nvar EM6400NGPDB07_PowerFactor = flow.get(\"EM6400NGPDB07/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400NGPDB07_Average_L_L,\n    \"Avg_LN\": EM6400NGPDB07_Average_L_N,\n    \"AvgCurrent\": EM6400NGPDB07_Average_Current,\n    \"EnergyVAh\": EM6400NGPDB07_EnergyVAh,\n    \"EnergyVARh\": EM6400NGPDB07_EnergyVARhInductive,\n    \"EnergyWh\": EM6400NGPDB07_EnergyWh,\n    \"PowerFactor\": EM6400NGPDB07_PowerFactor\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 900,
        "wires": [
            [
                "5970aa088599a703"
            ]
        ]
    },
    {
        "id": "4aab6322ac7af220",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "PanelIncomer",
        "func": "var EM6400NGPanelIncomer_Average_L_L = flow.get(\"EM6400NGPanelIncomer/Average_L-L\");\nvar EM6400NGPanelIncomer_Average_L_N = flow.get(\"EM6400NGPanelIncomer/Average_L-N\");\nvar EM6400NGPanelIncomer_Average_Current = flow.get(\"EM6400NGPanelIncomer/Average_Current\");\nvar EM6400NGPanelIncomer_EnergyVAh = flow.get(\"EM6400NGPanelIncomer/EnergyVAh\");\nvar EM6400NGPanelIncomer_EnergyVARhInductive = flow.get(\"EM6400NGPanelIncomer/EnergyVARhInductive\");\nvar EM6400NGPanelIncomer_EnergyWh = flow.get(\"EM6400NGPanelIncomer/EnergyWh\");\nvar EM6400NGPanelIncomer_PowerFactor = flow.get(\"EM6400NGPanelIncomer/PowerFactor\");\n\n\nmsg.payload = {\n    \"Avg_LL\": EM6400NGPanelIncomer_Average_L_L,\n    \"Avg_LN\": EM6400NGPanelIncomer_Average_L_N,\n    \"AvgCurrent\": EM6400NGPanelIncomer_Average_Current,\n    \"EnergyVAh\": EM6400NGPanelIncomer_EnergyVAh,\n    \"EnergyVARh\": EM6400NGPanelIncomer_EnergyVARhInductive,\n    \"EnergyWh\": EM6400NGPanelIncomer_EnergyWh,\n    \"PowerFactor\": EM6400NGPanelIncomer_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 940,
        "wires": [
            [
                "cac4077b376eb28f"
            ]
        ]
    },
    {
        "id": "b9da17a613300b60",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "HTBreaker",
        "func": "var EM6400OldHTBreaker_Average_L_L = flow.get(\"EM6400OldHTBreaker/Average_L-L\");\nvar EM6400OldHTBreaker_Average_L_N = flow.get(\"EM6400OldHTBreaker/Average_L-N\");\nvar EM6400OldHTBreaker_Average_Current = flow.get(\"EM6400OldHTBreaker/Average_Current\");\nvar EM6400OldHTBreaker_EnergyVAh = flow.get(\"EM6400OldHTBreaker/EnergyVAh\");\nvar EM6400OldHTBreaker_EnergyVARhInductive = flow.get(\"EM6400OldHTBreaker/EnergyVARhInductive\");\nvar EM6400OldHTBreaker_EnergyWh = flow.get(\"EM6400OldHTBreaker/EnergyWh\");\nvar EM6400OldHTBreaker_PowerFactor = flow.get(\"EM6400OldHTBreaker/PowerFactor\");\n\nmsg.payload = {\n    \"Avg_LL\": EM6400OldHTBreaker_Average_L_L,\n    \"Avg_LN\": EM6400OldHTBreaker_Average_L_N,\n    \"AvgCurrent\": EM6400OldHTBreaker_Average_Current,\n    \"EnergyVAh\": EM6400OldHTBreaker_EnergyVAh,\n    \"EnergyVARh\": EM6400OldHTBreaker_EnergyVARhInductive,\n    \"EnergyWh\": EM6400OldHTBreaker_EnergyWh,\n    \"PowerFactor\": EM6400OldHTBreaker_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            [
                "f76d38f843facdf9"
            ]
        ]
    },
    {
        "id": "8766750ebe2be244",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "DGIncomer",
        "func": "var EM6400NGDGIncomer_Average_L_L = flow.get(\"EM6400NGDGIncomer/Average_L-L\");\nvar EM6400NGDGIncomer_Average_L_N = flow.get(\"EM6400NGDGIncomer/Average_L-N\");\nvar EM6400NGDGIncomer_Average_Current = flow.get(\"EM6400NGDGIncomer/Average_Current\");\nvar EM6400NGDGIncomer_EnergyVAh = flow.get(\"EM6400NGDGIncomer/EnergyVAh\");\nvar EM6400NGDGIncomer_EnergyVARhInductive = flow.get(\"EM6400NGDGIncomer/EnergyVARhInductive\");\nvar EM6400NGDGIncomer_EnergyWh = flow.get(\"EM6400NGDGIncomer/EnergyWh\");\nvar EM6400NGDGIncomer_PowerFactor = flow.get(\"EM6400NGDGIncomer/PowerFactor\");\n\n\nmsg.payload = {\n    \"Avg_LL\": EM6400NGDGIncomer_Average_L_L,\n    \"Avg_LN\": EM6400NGDGIncomer_Average_L_N,\n    \"AvgCurrent\": EM6400NGDGIncomer_Average_Current,\n    \"EnergyVAh\": EM6400NGDGIncomer_EnergyVAh,\n    \"EnergyVARh\": EM6400NGDGIncomer_EnergyVARhInductive,\n    \"EnergyWh\": EM6400NGDGIncomer_EnergyWh,\n    \"PowerFactor\": EM6400NGDGIncomer_PowerFactor\n}\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1020,
        "wires": [
            [
                "3075dee036c464ae"
            ]
        ]
    },
    {
        "id": "2908256e62221031",
        "type": "debug",
        "z": "e8ab1e8943fdcd97",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 120,
        "wires": []
    },
    {
        "id": "60375ba5abb1be7d",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/Chiller",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "ddee5640f8e7c44d",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB01",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc5c361361760b3e",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB06",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "f437e124c8e583e7",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PanelMLDB",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 220,
        "wires": []
    },
    {
        "id": "7a43b28a908a2b11",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PanelAHU",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "bdb067971edb87fd",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PumpHouse",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 340,
        "wires": []
    },
    {
        "id": "80d6abaf4ac3474e",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB05",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 660,
        "wires": []
    },
    {
        "id": "70e8e1efd498840d",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB04",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 700,
        "wires": []
    },
    {
        "id": "3ee30b012c5ea272",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/AirCompressor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 990,
        "y": 740,
        "wires": []
    },
    {
        "id": "9be7ff243caecb15",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB08",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 780,
        "wires": []
    },
    {
        "id": "93703107574aeb44",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/SplitAC",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 820,
        "wires": []
    },
    {
        "id": "2f536dde5f055419",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/ETPSTP",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 970,
        "y": 860,
        "wires": []
    },
    {
        "id": "5970aa088599a703",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PDB07",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 900,
        "wires": []
    },
    {
        "id": "cac4077b376eb28f",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/PanelIncomer",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 990,
        "y": 940,
        "wires": []
    },
    {
        "id": "f76d38f843facdf9",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/HTBreaker",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 980,
        "wires": []
    },
    {
        "id": "3075dee036c464ae",
        "type": "mqtt out",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "topic": "Naxnova/EM/DGIncomer",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 980,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a1f6b1ef0cd1fa1c",
        "type": "timeouttrigger",
        "z": "e8ab1e8943fdcd97",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "60",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "4bbd778f0c67ccbf"
            ]
        ]
    },
    {
        "id": "4bbd778f0c67ccbf",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"EM_Timeout\", true);\n} else {\n    flow.set(\"EM_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "067ccdab9969b815",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "timeout check",
        "func": "var timeout = flow.get(\"EM_Timeout\");\n\nif (timeout == false)\n{\n\nreturn msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 380,
        "wires": [
            [
                "7ce9e6087540396c",
                "b406fba396f83c67",
                "fcf8bb231d29ee21",
                "9f750c2fbe442627",
                "7e8bfe35cada362c",
                "cc980d67e15011b6",
                "c69813188a0f6ac9",
                "c25a21095fe9ac93",
                "f9f30852142c36d2",
                "8475f6f6519aaf1e",
                "0c684bbc5e4b4272",
                "cb4b3e265857b06f",
                "9a13efbda9cf04b9",
                "4aab6322ac7af220",
                "b9da17a613300b60",
                "8766750ebe2be244"
            ]
        ]
    },
    {
        "id": "a16df8a80d26d58b",
        "type": "function",
        "z": "e8ab1e8943fdcd97",
        "name": "Daily Consumption",
        "func": "// All the EM meters\nvar meters = [\n    { name: \"EM6400NGChiller\", outputs: 0 },\n    { name: \"EM6400OldPDB01\", outputs: 1 },\n    { name: \"EM6400PDB04\", outputs: 2 },\n    { name: \"EM6400OldPanelMLDB\", outputs: 3 },\n    { name: \"EM6400OldPanelAHU\", outputs: 4 },\n    { name: \"EM6400OldPumpHouse\", outputs: 5 },\n    { name: \"EM6400OldPDB05\", outputs: 6 },\n    { name: \"EM6400OldPDB04\", outputs: 7 },\n    { name: \"EM6400OldAirCompressor\", outputs: 8 },\n    { name: \"EM6400NGPDB08\", outputs: 9 },\n    { name: \"EM6400OldSplitAC\", outputs: 10 },\n    { name: \"EM6400OldETPSTP\", outputs: 11 },\n    { name: \"EM6400NGPDB07\", outputs: 12 },\n    { name: \"EM6400NGPanelIncomer\", outputs: 13 },\n    { name: \"EM6400OldHTBreaker\", outputs: 14 },\n    { name: \"EM6400NGDGIncomer\", outputs: 15 }\n];\n\n// Initialize an array for the output messages\nvar outputMsgs = new Array(meters.length).fill(null);\n\n// Loop through each meter to calculate daily consumption\nmeters.forEach(function (meter, index) {\n    var meterName = meter.name;\n\n    // Initialize context variables for each meter\n    if (typeof context[meterName + \"_prevEnergyVAh\"] === \"undefined\") {\n        context[meterName + \"_prevEnergyVAh\"] = 0;\n        context[meterName + \"_prevEnergyVARhInductive\"] = 0;\n        context[meterName + \"_prevEnergyWh\"] = 0;\n    }\n\n    // Retrieve current values for the meter\n    var currentEnergyVAh = flow.get(meterName + \"/EnergyVAh\");\n    var currentEnergyVARhInductive = flow.get(meterName + \"/EnergyVARhInductive\");\n    var currentEnergyWh = flow.get(meterName + \"/EnergyWh\");\n\n    // Calculate the daily consumption with reset handling\n    var dailyEnergyVAh = currentEnergyVAh - context[meterName + \"_prevEnergyVAh\"];\n    if (dailyEnergyVAh < 0) {\n        dailyEnergyVAh = currentEnergyVAh;\n    }\n\n    var dailyEnergyVARhInductive = currentEnergyVARhInductive - context[meterName + \"_prevEnergyVARhInductive\"];\n    if (dailyEnergyVARhInductive < 0) {\n        dailyEnergyVARhInductive = currentEnergyVARhInductive;\n    }\n\n    var dailyEnergyWh = currentEnergyWh - context[meterName + \"_prevEnergyWh\"];\n    if (dailyEnergyWh < 0) {\n        dailyEnergyWh = currentEnergyWh;\n    }\n\n    // Round values to two decimal places\n    dailyEnergyVAh = parseFloat(dailyEnergyVAh.toFixed(2));\n    dailyEnergyVARhInductive = parseFloat(dailyEnergyVARhInductive.toFixed(2));\n    dailyEnergyWh = parseFloat(dailyEnergyWh.toFixed(2));\n\n    // Store the current values as previous day's values for the next calculation\n    context[meterName + \"_prevEnergyVAh\"] = currentEnergyVAh;\n    context[meterName + \"_prevEnergyVARhInductive\"] = currentEnergyVARhInductive;\n    context[meterName + \"_prevEnergyWh\"] = currentEnergyWh;\n\n    // Prepare the output message for this meter without meter name in keys\n    outputMsgs[meter.outputs] = {\n        payload: {\n            dailyEnergyVAh: dailyEnergyVAh,\n            dailyEnergyVARhInductive: dailyEnergyVARhInductive,\n            dailyEnergyWh: dailyEnergyWh\n        }\n    };\n});\n\n// Return all output messages\nreturn outputMsgs;\n",
        "outputs": 16,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 500,
        "wires": [
            [
                "60375ba5abb1be7d"
            ],
            [
                "ddee5640f8e7c44d"
            ],
            [
                "dc5c361361760b3e"
            ],
            [
                "f437e124c8e583e7"
            ],
            [
                "7a43b28a908a2b11"
            ],
            [
                "bdb067971edb87fd"
            ],
            [
                "80d6abaf4ac3474e",
                "2ed4e155ac406915"
            ],
            [
                "70e8e1efd498840d",
                "2ed4e155ac406915"
            ],
            [
                "3ee30b012c5ea272"
            ],
            [
                "9be7ff243caecb15"
            ],
            [
                "93703107574aeb44"
            ],
            [
                "2f536dde5f055419"
            ],
            [
                "5970aa088599a703"
            ],
            [
                "cac4077b376eb28f"
            ],
            [
                "f76d38f843facdf9"
            ],
            [
                "3075dee036c464ae"
            ]
        ]
    },
    {
        "id": "75250a140a579fcc",
        "type": "inject",
        "z": "e8ab1e8943fdcd97",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 01 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "a16df8a80d26d58b"
            ]
        ]
    },
    {
        "id": "2ed4e155ac406915",
        "type": "debug",
        "z": "e8ab1e8943fdcd97",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 560,
        "wires": []
    },
    {
        "id": "1564b39e738ff76f",
        "type": "mqtt in",
        "z": "d757b67b1f0e02b2",
        "name": "",
        "topic": "myaccount/naxnovatest/tapepasting01",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7ab79866d752577c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "4afb826536c1338d"
            ]
        ]
    },
    {
        "id": "c53ef231204dcf30",
        "type": "debug",
        "z": "d757b67b1f0e02b2",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "4afb826536c1338d",
        "type": "function",
        "z": "d757b67b1f0e02b2",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Extract the tag name and value\nvar tagName = payload.tag;\nvar value = payload.v.v;\n// Store the value in a flow variable using the tag name as the key\nflow.set(tagName, value);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "c53ef231204dcf30"
            ]
        ]
    },
    {
        "id": "b921c72148a36e51",
        "type": "function",
        "z": "d757b67b1f0e02b2",
        "name": "Function",
        "func": "var Auto = flow.get(\"Auto\");\nvar Counter = flow.get(\"Counter\");\nvar Manual = flow.get(\"Manual\");\nvar NonOperational = flow.get(\"NonOperational\");\nvar Non_Operat_Bit = flow.get(\"Non_Operat_Bit\");\nvar Operational = flow.get(\"Operational\");\nvar Operational_Bit = flow.get(\"Operational_Bit\");\nvar Timeout = flow.get(\"Timeout\");\n\nmsg.payload = {\n        \"NoOP_Status\": Non_Operat_Bit ? 1 : 0,\n        \"OP_Status\": Operational_Bit ? 1 : 0,\n        \"NoOP_Time\": NonOperational,\n        \"OP_Time\": Operational,\n        \"Counter\": Counter\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "362611c5f478145e"
            ]
        ]
    },
    {
        "id": "0db0c95256f42c1c",
        "type": "inject",
        "z": "d757b67b1f0e02b2",
        "name": "10 secs push",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 380,
        "wires": [
            [
                "b921c72148a36e51"
            ]
        ]
    },
    {
        "id": "362611c5f478145e",
        "type": "mqtt out",
        "z": "d757b67b1f0e02b2",
        "name": "",
        "topic": "Naxnova/TP/001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ab79866d752577c",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "8118f86e028e545b",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "HMI Data",
        "topic": "devices/Device01/telemetry",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "b2341ed58539b0ff",
                "158da8931102fddd"
            ]
        ]
    },
    {
        "id": "b2341ed58539b0ff",
        "type": "timeouttrigger",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "60",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "205a43e85ecfbc5f"
            ]
        ]
    },
    {
        "id": "205a43e85ecfbc5f",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"EM_Timeout\", true);\n} else {\n    flow.set(\"EM_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "158da8931102fddd",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Ensure the payload is an object\nif (typeof payload === 'object' && payload !== null) {\n    // Iterate over the keys in the object\n    for (var tagName in payload) {\n        if (payload.hasOwnProperty(tagName)) {\n            var value = payload[tagName]; // Extract the value\n\n            // Ensure the value is a number before processing\n            if (typeof value === 'number') {\n                // Round the value to two decimal places\n                var roundedValue = parseFloat(value.toFixed(2));\n\n                // Store the rounded value in a flow variable using the tag name as the key\n                flow.set(tagName, roundedValue);\n\n                // Debug output (optional)\n                //node.warn(`Stored ${roundedValue} in flow variable with tag ${tagName}`);\n            } else {\n                // Debug if the value is not a number\n            //    node.warn(`Value for tag ${tagName} is not a number: ${value}`);\n            }\n        }\n    }\n} else {\n    // Debug if the payload is not an object\n    //node.warn(\"Unexpected payload format: \" + JSON.stringify(payload));\n}\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a50891da17a75302",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "Energy_Meter",
        "func": "// Check if EM_Timeout is false\nif (flow.get('EM_Timeout') === false) {\n    // Define an array of tags you want to retrieve\n    var tags = [\n        \"Energy_Meter/30014_Average_Voltage_LL\",\n        \"Energy_Meter/30022_Average_Current\",\n        \"Energy_Meter/30042_Total_kW\",\n        \"Energy_Meter/30044_Total_kVA\",\n        \"Energy_Meter/30046_Total_kVAr\",\n        \"Energy_Meter/30054_Average_PF\",\n        \"Energy_Meter/30056_Frequency\",\n        \"Energy_Meter/30124_THD_of_1st_Phase_Voltage\",\n        \"Energy_Meter/30126_THD_of_2nd_Phase_Voltage\",\n        \"Energy_Meter/30128_THD_of_3rd_Phase_Voltage\",\n        \"Energy_Meter/30130_THD_of_Voltage_V12\",\n        \"Energy_Meter/30132_THD_of_Voltage_V23\",\n        \"Energy_Meter/30134_THD_of_Voltage_V31\",\n        \"Energy_Meter/30136_THD_of_Current_I1\",\n        \"Energy_Meter/30138_THD_of_Current_I2\",\n        \"Energy_Meter/30140_THD_of_Current_I3\",\n        \"Energy_Meter/30000_Voltage_V1N\",\n        \"Energy_Meter/30002_Voltage_V2N\",\n        \"Energy_Meter/30004_Voltage_V3N\",\n        \"Energy_Meter/30006_Average_Voltage_LN\",\n        \"Energy_Meter/30122_Neutral_Current\",\n        \"Energy_Meter/30058_Total_Net_kWh\"\n    ];\n\n    // Initialize an object to store the values\n    var outputObject = {};\n\n    // Retrieve each value from the flow context and add it to the object\n    tags.forEach(tag => {\n        var value = flow.get(tag); // Get the value from the flow context\n        if (typeof value !== 'undefined') {\n            // Remove 'Energy_Meter/' and the numeric part '30xxx_'\n            var key = tag.replace('Energy_Meter/', '').replace(/^\\d+_/, '');\n            outputObject[key] = value; // Add to the output object if value exists\n        }\n    });\n\n    // Attach the generated object to the message payload\n    msg.payload = outputObject;\n\n    // Send the message forward\n    return msg;\n} else {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "f22b4cb710689d97"
            ]
        ]
    },
    {
        "id": "4ba7d561d23ddf09",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "a50891da17a75302",
                "bd5e486278be4924",
                "257c815d560de8c0",
                "dfd9e2499472b89c",
                "b19b545c100f8e43",
                "d20549764d2246c4"
            ]
        ]
    },
    {
        "id": "bee49cfd87408da1",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "",
        "topic": "office/energymeter/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 810,
        "y": 680,
        "wires": []
    },
    {
        "id": "bd5e486278be4924",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "Temperature_EnergyMeter",
        "func": "if (flow.get('EM_Timeout') === false) {\n\nvar Actual_Temp = flow.get(\"ActualTemp\");\n\nmsg.payload = {\n    \"Actual_Temp\": Actual_Temp\n}\nreturn msg;\n\n}\nelse {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1060,
        "wires": [
            [
                "13817aa63cdf72fc"
            ]
        ]
    },
    {
        "id": "13817aa63cdf72fc",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/DTC/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 690,
        "y": 1060,
        "wires": []
    },
    {
        "id": "257c815d560de8c0",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "Water_Meter",
        "func": "if (flow.get('EM_Timeout') === false) {\n\nvar InstantFlow = flow.get(\"FlowMeter/InstantFlow\");\nvar CumulFlow = flow.get(\"FlowMeter/cumuflow\");\nvar WaterTemp = flow.get(\"FlowMeter/WaterTemp\");\nvar AccumHours = flow.get(\"FlowMeter/AccumHours\");\n\nvar dailyConsumption = flow.get('flow_difference');\n\nmsg.payload = {\n    \"InstantFlow\": InstantFlow,\n    \"CumulFlow\": CumulFlow,\n    \"WaterTemp\": WaterTemp,\n    \"AccumHours\": AccumHours,\n    \"dailyConsumption\": dailyConsumption\n}\nreturn msg;\n\n}\nelse {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "8e132a5b705ae941"
            ]
        ]
    },
    {
        "id": "8e132a5b705ae941",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/FlowMeter/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 690,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3bcc5ce881f61c21",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "Daily Consumption Water",
        "func": "// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"FlowMeter/cumuflow\")) || 0;\n\n// Multiply by 1000\nvar b = a * 1000;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"previousvalue\") || 0;\n\nif(previous === 0){\n    previous = b;\n}\n\n// Save the current value for future use\nflow.set(\"previousvalue\", b);\n\n// Calculate the difference\nvar difference = b - previous;\nflow.set(\"flow_difference\", difference);\n\n// Create a JSON object for the output\nmsg.payload = { dailyconsumption: difference };\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1260,
        "wires": [
            [
                "8e132a5b705ae941"
            ]
        ]
    },
    {
        "id": "1362570454b6473f",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "SEN55 Data",
        "topic": "AMPL/sensor/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "7ebfc56d99967190",
                "1840221122eb8e69",
                "24991b9f081fa3e1",
                "f09c59d422efd0ca"
            ]
        ]
    },
    {
        "id": "189742384f11f07d",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 18 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "3bcc5ce881f61c21",
                "11722d2d3687abaf"
            ]
        ]
    },
    {
        "id": "7ebfc56d99967190",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Store to Context",
        "func": "var a = msg.payload.PM1P0;\nvar b = msg.payload.PM2P5;\nvar c = msg.payload.PM4P0;\nvar d = msg.payload.PM10P0;\nvar e = msg.payload.RH;\nvar f = msg.payload.Temp;\nvar g = msg.payload.VOCIndex;\nvar h = msg.payload.NOXIndex;\nvar i = msg.payload.message;\n\nflow.set(\"PM1P0\", a);\nflow.set(\"PM2P5\", b);\nflow.set(\"PM4P0\", c);\nflow.set(\"PM10P0\", d);\nflow.set(\"RH\", e);\nflow.set(\"Temp\", f);\nflow.set(\"VOCIndex\", g);\nflow.set(\"NOXIndex\", h);\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "dfd9e2499472b89c",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "SEN55",
        "func": "\nif (flow.get('EM_Timeout2') === false) {\n\nmsg.payload = {\n    \"PM1P0\": flow.get(\"PM1P0\"),\n    \"PM2P5\": flow.get(\"PM2P5\"),\n    \"PM4P0\": flow.get(\"PM4P0\"),\n    \"PM10P0\": flow.get(\"PM10P0\"),\n    \"RH\": flow.get(\"RH\"),\n    \"Temp\": flow.get(\"Temp\"),\n    \"VOCIndex\": flow.get(\"VOCIndex\"),\n    \"NOXIndex\": flow.get(\"NOXIndex\")\n}\n \nreturn msg;\n\n} \nelse {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"SEN55 not connected, not sending values.\");\n    return null;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "a51d9a3a4fc44f3c"
            ]
        ]
    },
    {
        "id": "a51d9a3a4fc44f3c",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/SEN55/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 680,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1840221122eb8e69",
        "type": "timeouttrigger",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "60",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "de692c7bfbe8bda4"
            ]
        ]
    },
    {
        "id": "de692c7bfbe8bda4",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"EM_Timeout2\", true);\n} else {\n    flow.set(\"EM_Timeout2\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "119a5f4ecec6317c",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "SPS30 Data",
        "topic": "ampl/sps30/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "a02f652f972f7920",
                "a738f584b9fddc16"
            ]
        ]
    },
    {
        "id": "a02f652f972f7920",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Store to Context",
        "func": "var a = msg.payload.PM1P0;\nvar b = msg.payload.PM2P5;\nvar c = msg.payload.PM4P0;\nvar d = msg.payload.PM10P0;\nvar e = msg.payload.NC_0N5;\nvar f = msg.payload.NC_1N0;\nvar g = msg.payload.NC_2N5;\nvar h = msg.payload.NC_4N0;\nvar i = msg.payload.NC_10N0;\nvar j = msg.payload.TypicalParticleSize;\nvar k = msg.payload.temp_out;\nvar l = msg.payload.humidity_out;\n\nflow.set(\"Sps30_PM1P0\", a);\nflow.set(\"Sps30_PM2P5\", b);\nflow.set(\"Sps30_PM4P0\", c);\nflow.set(\"Sps30_PM10P0\", d);\nflow.set(\"Sps30_NC_0N5\", e);\nflow.set(\"Sps30_NC_1N0\", f);\nflow.set(\"Sps30_NC_2N5\", g);\nflow.set(\"Sps30_NC_4N0\", h);\nflow.set(\"Sps30_NC_10N0\", i);\nflow.set(\"Sps30_TypicalParticleSize\", j);\nflow.set(\"temp_out\",k);\nflow.set(\"humidity_out\", l);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a738f584b9fddc16",
        "type": "timeouttrigger",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "60",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "85e15026447ddf5f"
            ]
        ]
    },
    {
        "id": "85e15026447ddf5f",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"EM_Timeout3\", true);\n} else {\n    flow.set(\"EM_Timeout3\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b19b545c100f8e43",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "SPS30",
        "func": "if (flow.get('EM_Timeout3') === false) {\n\n    msg.payload = {\n        \"PM1P0\": flow.get(\"Sps30_PM1P0\"),\n        \"PM2P5\": flow.get(\"Sps30_PM2P5\"),\n        \"PM4P0\": flow.get(\"Sps30_PM4P0\"),\n        \"PM10P0\": flow.get(\"Sps30_PM10P0\"),\n        \"NC_0N5\": flow.get(\"Sps30_NC_0N5\"),\n        \"NC_1N0\": flow.get(\"Sps30_NC_1N0\"),\n        \"NC_2N5\": flow.get(\"Sps30_NC_2N5\"),\n        \"NC_4N0\": flow.get(\"Sps30_NC_4N0\"),\n        \"NC_10N0\": flow.get(\"Sps30_NC_10N0\"),\n        \"TypicalParticleSize\": flow.get(\"Sps30_TypicalParticleSize\"),\n        \"temp_out\": flow.get(\"temp_out\"),\n        \"humidity_out\": flow.get(\"humidity_out\")\n    };\n\n    return msg;\n\n} else {\n    // If EM_Timeout2 is true, do nothing (or optionally warn)\n    node.warn(\"SPS30 not connected, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "cdbe53353904968c"
            ]
        ]
    },
    {
        "id": "cdbe53353904968c",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/SPS30/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 680,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9264d5c228cb60c1",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "DHT22 Data",
        "topic": "AMPL/DHT11/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "8d511018be2d54f5",
                "e8787c44530a51be"
            ]
        ]
    },
    {
        "id": "e8787c44530a51be",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Store to Context",
        "func": "var a = msg.payload.temperature;\nvar b = msg.payload.humidity;\n\n\nflow.set(\"DHT11_Temp\", a);\nflow.set(\"DHT11_Humidity\", b);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "8d511018be2d54f5",
        "type": "timeouttrigger",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "ontimeouttype": "bool",
        "ontimeoutval": "true",
        "duration": "60",
        "units": "s",
        "passthrough": true,
        "name": "",
        "x": 290,
        "y": 320,
        "wires": [
            [
                "1d6d98d5036cf474"
            ]
        ]
    },
    {
        "id": "1d6d98d5036cf474",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "fde10959108ef8cc",
        "name": "Check Timeout",
        "func": "if (msg.payload === true) {\n    flow.set(\"DHT_Timeout\", true);\n} else {\n    flow.set(\"DHT_Timeout\", false);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d20549764d2246c4",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "DHT11",
        "func": "if (flow.get('DHT_Timeout') === false) {\n\n    msg.payload = {\n        \"DHT11_Humidity\": flow.get(\"DHT11_Humidity\"),\n        \"DHT11_Temp\": flow.get(\"DHT11_Temp\")\n    };\n\n    return msg;\n\n} else {\n    // If EM_Timeout2 is true, do nothing (or optionally warn)\n    node.warn(\"DHT Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "9597e01f77c167d7"
            ]
        ]
    },
    {
        "id": "94e691c3491a5bf0",
        "type": "change",
        "z": "5256b1739de0f91b",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "DHT11,Humidity",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "f5d355954ab1fa9e",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "name": "Delete Variable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 2080,
        "wires": [
            [
                "94e691c3491a5bf0"
            ]
        ]
    },
    {
        "id": "9597e01f77c167d7",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/DHT11/furnace",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 680,
        "y": 1180,
        "wires": []
    },
    {
        "id": "56545a34e332c203",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 450,
        "y": 2160,
        "wires": [
            [
                "979c6319761e3f2f"
            ]
        ]
    },
    {
        "id": "979c6319761e3f2f",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "Energy_Meter",
        "func": "// Check if EM_Timeout is false\nif (flow.get('EM_Timeout') === false) {\n    // Define an array of tags you want to retrieve\n    var tags = [\n        \"Energy_Meter/30014_Average_Voltage_LL\",\n        \"Energy_Meter/30022_Average_Current\",\n        \"Energy_Meter/30042_Total_kW\",\n        \"Energy_Meter/30044_Total_kVA\",\n        \"Energy_Meter/30046_Total_kVAr\",\n        \"Energy_Meter/30054_Average_PF\",\n        \"Energy_Meter/30056_Frequency\",\n        \"Energy_Meter/30124_THD_of_1st_Phase_Voltage\",\n        \"Energy_Meter/30126_THD_of_2nd_Phase_Voltage\",\n        \"Energy_Meter/30128_THD_of_3rd_Phase_Voltage\",\n        \"Energy_Meter/30130_THD_of_Voltage_V12\",\n        \"Energy_Meter/30132_THD_of_Voltage_V23\",\n        \"Energy_Meter/30134_THD_of_Voltage_V31\",\n        \"Energy_Meter/30136_THD_of_Current_I1\",\n        \"Energy_Meter/30138_THD_of_Current_I2\",\n        \"Energy_Meter/30140_THD_of_Current_I3\",\n        \"Energy_Meter/30000_Voltage_V1N\",\n        \"Energy_Meter/30002_Voltage_V2N\",\n        \"Energy_Meter/30004_Voltage_V3N\",\n        \"Energy_Meter/30006_Average_Voltage_LN\",\n        \"Energy_Meter/30122_Neutral_Current\"\n    ];\n\n    // Initialize an object to store the values\n    var outputObject = {};\n\n    // Retrieve each value from the flow context and add it to the object\n    tags.forEach(tag => {\n        var value = flow.get(tag); // Get the value from the flow context\n        if (typeof value !== 'undefined') {\n            // Remove 'Energy_Meter/' and the numeric part '30xxx_'\n            var key = tag.replace('Energy_Meter/', '').replace(/^\\d+_/, '');\n            outputObject[key] = value; // Add to the output object if value exists\n        }\n    });\n\n    // Attach the generated object to the message payload\n    msg.payload = outputObject;\n\n    // Send the message forward\n    return msg;\n} else {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2160,
        "wires": [
            [
                "45ba507f309047f0",
                "f4d6661ffea9f1e0"
            ]
        ]
    },
    {
        "id": "45ba507f309047f0",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "name": "",
        "topic": "testampl/energymeter-1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 910,
        "y": 2140,
        "wires": []
    },
    {
        "id": "f4d6661ffea9f1e0",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "name": "",
        "topic": "testampl/energymeter-2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 910,
        "y": 2200,
        "wires": []
    },
    {
        "id": "a560eb1e9e2a7f7d",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "Daily Consumption Energy",
        "func": "\nif (flow.get('EM_Timeout') === false) {\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"EM_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"EM_previousvalue\", a);\n\n// Calculate the difference\nvar difference = a - previous;\nflow.set(\"EM_difference\", difference);\n\n// Create a JSON object for the output\nmsg.payload = { energy_dailyconsumption: difference };\nreturn msg;\n}else{\n    node.warn(\"Timeout is true\");\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "1d1404420c9f1e9a",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "a560eb1e9e2a7f7d"
            ]
        ]
    },
    {
        "id": "4f13e88cc4957022",
        "type": "email-send",
        "z": "5256b1739de0f91b",
        "transport": "b71233c4d16bcb61",
        "from": "iot91355@gmail.com",
        "to": "iot@absolutemotion.in",
        "cc": "sandeep@absolutemotion.in ",
        "bcc": "",
        "subject": "Email Alerts",
        "contentType": "text",
        "priority": "normal",
        "name": "",
        "x": 670,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "8a2629043679fbe2",
        "type": "status",
        "z": "5256b1739de0f91b",
        "name": "",
        "scope": [
            "8118f86e028e545b",
            "bee49cfd87408da1",
            "13817aa63cdf72fc",
            "8e132a5b705ae941",
            "1362570454b6473f",
            "a51d9a3a4fc44f3c",
            "119a5f4ecec6317c",
            "cdbe53353904968c",
            "9264d5c228cb60c1",
            "45ba507f309047f0",
            "f4d6661ffea9f1e0",
            "9597e01f77c167d7"
        ],
        "x": 260,
        "y": 2220,
        "wires": [
            [
                "13218e11272eb680"
            ]
        ]
    },
    {
        "id": "13218e11272eb680",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "function 15",
        "func": "// Store the previous status in flow context\nlet previousStatus = flow.get('previousStatus') || 'connected';\n\n// Check the current status of MQTT connection\nif (msg.status === \"disconnected\" && previousStatus !== \"disconnected\") {\n    // If the status is \"disconnected\" and it was previously not disconnected\n    flow.set('previousStatus', 'disconnected'); // Update previous status to 'disconnected'\n\n    // Send the message only once\n    msg.payload = \"MQTT Connection Lost! Please check the connection.\";\n    return msg;\n } // else if (msg.status !== \"disconnected\") {\n//     // If the status is not \"disconnected\", update previous status and do nothing\n//     flow.set('previousStatus', msg.status); // Update the previous status to the current one\n//     msg.payload = \"MQTT running\";\n//     return null;\n// }\n else {\n    // In case status was already \"disconnected\", do nothing\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2220,
        "wires": [
            [
                "4f13e88cc4957022"
            ]
        ]
    },
    {
        "id": "e90202df9c8c8c1b",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod1 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "4d45c539783077b8"
            ]
        ]
    },
    {
        "id": "f38c27dee81d6d06",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod3 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "39d0168780e80f1a"
            ]
        ]
    },
    {
        "id": "10f14a9e461de4dd",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod4 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 800,
        "wires": [
            [
                "71016a146d11a71d"
            ]
        ]
    },
    {
        "id": "659063189bf30d54",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod2 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 03 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "6e991fee29a49c7e"
            ]
        ]
    },
    {
        "id": "327bf3c86db62337",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod5 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "4ff6e67c9ad9e641",
                "706678d744e082a7"
            ]
        ]
    },
    {
        "id": "11722d2d3687abaf",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "Water Bill",
        "func": "// Retrieve CumulFlow from flow context and ensure it's a number\n\nif (flow.get('EM_Timeout') === false) {\n\nvar a = Number(flow.get(\"FlowMeter/cumuflow\")) || 0;\n\n// Multiply by 1000 to convert to milliliters\nvar b = a * 1000;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"bill_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"bill_previousvalue\", b);\n\n// Calculate the difference in consumption\nvar difference = b - previous;\nflow.set(\"bill_flow_difference\", difference);\n\n// Create a JSON object for daily consumption\nmsg.payload = { w_dailyconsumption: difference };\n\n// Log the values for debugging\nnode.warn('CumulFlow (liters): ' + a);  // Log in liters\nnode.warn('CumulFlow (milliliters): ' + b);  // Log in milliliters\nnode.warn('Previous Consumption Value (milliliters): ' + previous);\nnode.warn('Daily Consumption Difference (milliliters): ' + difference);\n\n// Extract daily consumption from payload and convert to kiloliters\nvar dailyConsumptionKiloliters = msg.payload.w_dailyconsumption * 0.001;\n\n// Water charges based on daily consumption\nvar chargesOnWater = dailyConsumptionKiloliters * 22.5;\n\n// GST for water charges\nvar gstForWater = chargesOnWater * 0.18;\n\n// Fixed charges for services\nvar serviceCharges = 33;\nvar gstService = serviceCharges * 0.18;\n\n// Fixed drainage charges\nvar drainageCharges = 22;\nvar gstDrainage = drainageCharges * 0.18;\n\n// Environment charges\nvar environmentCharges = 35.73;\nvar gstEnvironment = environmentCharges * 0.18;\n\n// Fire charges\nvar fireCharges = 10.43;\nvar gstFireCharges = fireCharges * 0.18;\n\n// Log the calculated values for debugging\nnode.warn('Daily Consumption (KL): ' + dailyConsumptionKiloliters);\nnode.warn('Water Charges: ' + chargesOnWater);\nnode.warn('GST on Water Charges: ' + gstForWater);\nnode.warn('Service Charges: ' + serviceCharges);\nnode.warn('GST on Service Charges: ' + gstService);\nnode.warn('Drainage Charges: ' + drainageCharges);\nnode.warn('GST on Drainage Charges: ' + gstDrainage);\nnode.warn('Environment Charges: ' + environmentCharges);\nnode.warn('GST on Environment Charges: ' + gstEnvironment);\nnode.warn('Fire Charges: ' + fireCharges);\nnode.warn('GST on Fire Charges: ' + gstFireCharges);\n\n// Calculate total bill prediction\nvar totalBillWater = chargesOnWater + gstForWater + environmentCharges + fireCharges +\n    serviceCharges + drainageCharges + gstDrainage + gstEnvironment +\n    gstFireCharges + gstService;\n\n// Log the predicted total bill\nnode.warn('Predicted Total Bill: ' + totalBillWater);\n\n// Create output message with all calculated data\nmsg.payload = {\n    ChargesonWater: chargesOnWater,\n    GST: gstForWater,\n    firecharges: fireCharges,\n    drainagecharges: drainageCharges,\n    environmentcharges: environmentCharges,\n    servicecharges: serviceCharges,\n    gstfirecharges: gstFireCharges,\n    gstdrainage: gstDrainage,\n    gstenvironment: gstEnvironment,\n    gstservice: gstService,\n    Predictedbill: totalBillWater\n};\n\n// Log the final output message for debugging\nnode.warn('Output message: ' + JSON.stringify(msg.payload));\n\n// Return the message with the calculated data\nreturn msg;\n}else {\n    node.warn(\"EM timeout is true\");\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "8e132a5b705ae941"
            ]
        ]
    },
    {
        "id": "902536bf259edc18",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/attendance",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fb79b5093b5e05ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "2332baa58651e724"
            ]
        ]
    },
    {
        "id": "2332baa58651e724",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "function 16",
        "func": "var a = msg.payload.attendance;\nvar b = msg.payload.date;\n\nflow.set('date', b);\nflow.set('attendance', a);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "6b7dce91e87a34fc",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 13 * * 1,2,3,4,5,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 1320,
        "wires": [
            [
                "e885dfdd2e5ab80f"
            ]
        ]
    },
    {
        "id": "e885dfdd2e5ab80f",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/attendance",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 670,
        "y": 1320,
        "wires": []
    },
    {
        "id": "4d45c539783077b8",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod1",
        "func": "\n\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"tod1_start\", currentReading);\n    node.warn(\"tod1 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"tod1_end\", currentReading);\n    node.warn(\"tod1 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod1 when both readings are available\nvar tod1_start = parseFloat(flow.get(\"tod1_start\")) || 0;\nvar tod1_end = parseFloat(flow.get(\"tod1_end\")) || 0;\n\nif (tod1_start > 0 && tod1_end > 0) {\n    var tod1_difference = parseFloat(tod1_end) - parseFloat(tod1_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod1_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod1, Ignoring...\");\n    } else {\n        // Accumulate the tod1 consumption\n        var tod1 = parseFloat(tod1_difference);\n        flow.set('tod1', tod1);\n\n        // Calculate tod1 Bill (Rate = 0.8)\n        var tod1Bill = tod1 * 5.8;\n        flow.set('tod1Bill', tod1Bill);\n\n        node.warn(\"tod1 Consumption: \" + tod1);\n        node.warn(\"tod1 Bill: \" + tod1Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"tod1_start\", 0);\n        flow.set(\"tod1_end\", 0);\n    }\n}\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod1: tod1,\n    tod1Bill: tod1Bill,\n    e_dailyconsumption: tod1,\n    totalBill: tod1Bill\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "71016a146d11a71d",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod4",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"tod4_start\", currentReading);\n    node.warn(\"tod4 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"tod4_end\", currentReading);\n    node.warn(\"tod4 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod4 when both readings are available\nvar tod4_start = parseFloat(flow.get(\"tod4_start\")) || 0;\nvar tod4_end = parseFloat(flow.get(\"tod4_end\")) || 0;\n\nif (tod4_start > 0 && tod4_end > 0) {\n    var tod4_difference = parseFloat(tod4_end) - parseFloat(tod4_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod4_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod4, Ignoring...\");\n    } else {\n        // Accumulate the tod4 consumption\n        var tod4 = parseFloat(tod4_difference);\n        flow.set('tod4', tod4);\n\n        // Calculate tod4 Bill (Rate = 0.8)\n        var tod4Bill = tod4 * 7.3;\n        flow.set('tod4Bill', tod4Bill);\n\n        node.warn(\"tod4 Consumption: \" + tod4);\n        node.warn(\"tod4 Bill: \" + tod4Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"tod4_start\", 0);\n        flow.set(\"tod4_end\", 0);\n    }\n}\n\nvar a = parseFloat(flow.get('tod1')) + parseFloat(flow.get('tod2')) + parseFloat(flow.get('tod3')) + parseFloat(tod4);\n\nvar b = parseFloat(flow.get('tod1Bill')) + parseFloat(flow.get('tod2Bill')) + parseFloat(flow.get('tod3Bill')) + parseFloat(tod4Bill);\n\n// Create the output message\n\nif (msg.payload.type === \"end\"){\nmsg.payload = {\n    tod4: tod4,\n    tod4Bill: tod4Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "4ff6e67c9ad9e641",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod5",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"tod5_start\", currentReading);\n    node.warn(\"tod5 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"tod5_end\", currentReading);\n    node.warn(\"tod5 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod5 when both readings are available\nvar tod5_start = parseFloat(flow.get(\"tod5_start\")) || 0;\nvar tod5_end = parseFloat(flow.get(\"tod5_end\")) || 0;\n\nif (tod5_start > 0 && tod5_end > 0) {\n    var tod5_difference = parseFloat(tod5_end) - parseFloat(tod5_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod5_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod5, Ignoring...\");\n    } else {\n        // Accumulate the tod5 consumption\n        var tod5 = parseFloat(tod5_difference);\n        flow.set('tod5', tod5);\n\n        // Calculate tod5 Bill (Rate = 0.8)\n        var tod5Bill = tod5 * 8.4;\n        flow.set('tod5Bill', tod5Bill);\n\n        node.warn(\"tod5 Consumption: \" + tod5);\n        node.warn(\"tod5 Bill: \" + tod5Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"tod5_start\", 0);\n        flow.set(\"tod5_end\", 0);\n    }\n}\n\nvar a = flow.get('tod1') + flow.get('tod2') + flow.get('tod3') + flow.get('tod4') + tod5;\n\nvar b = flow.get('tod1Bill') + flow.get('tod2Bill') + flow.get('tod3Bill') + flow.get('tod4Bill') + tod5Bill;\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod5: tod5,\n    tod5Bill: tod5Bill,\n    e_dailyconsumption: a,\n    totalBill: b,\n    taxedBill: c\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "e648714c14a99fb9",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "function 23",
        "func": "// Check if EM_Timeout is false\nif (flow.get('EM_Timeout') === false) {\n    // Define an array of tags you want to retrieve\n    var tags = [\n        \"Je_Energy/Active_Energy_Delivered_plus_Received\",\n        \"Je_Energy/Active_Energy_Delivered_minus_Received\",\n        \"Je_Energy/Active_Energy_Received_outof_load\",\n        \"Je_Energy/Active_Energy_Delivered_into_load\",\n        \"Je_Energy/Active_Power_A\",\n        \"Je_Energy/Active_Power_B\",\n        \"Je_Energy/Active_Power_C\",\n        \"Je_Energy/Active_Power_TOTAL\",\n        \"Je_Energy/Apparent_Energy_Delivered_plus_Received\",\n        \"Je_Energy/Apparent_Energy_Deliverred_minus_Received\",\n        \"Je_Energy/APparent_Energy_Delivered\",\n        \"Je_Energy/Apparent_Energy_Received\",\n        \"Je_Energy/Apparent_Power_A\",\n        \"Je_Energy/Apparent_Power_B\",\n        \"Je_Energy/Apparent_Power_C\",\n        \"Je_Energy/Apparent_Power_TOTAL\",\n        \"Je_Energy/Current_A\",\n        \"Je_Energy/Current_Average\",\n        \"Je_Energy/Current_B\",\n        \"Je_Energy/Current_C\",\n        \"Je_Energy/Current_N\",\n        \"Je_Energy/Current_Unbalance_A\",\n        \"Je_Energy/Current_Unbalance_B\",\n        \"Je_Energy/Current_Unbalance_C\",\n        \"Je_Energy/Current_Unbalance_WORST\",\n        \"Je_Energy/Frequency\",\n        \"Je_Energy/Last_Demand_kVA\",\n        \"Je_Energy/Last_Demand_A\",\n        \"Je_Energy/Last_Demand_kVAR\",\n        \"Je_Energy/Last_Demand_kW\",\n        \"Je_Energy/Max_Power_factor_Total\",\n        \"Je_Energy/Min_Power_factor_Total\",\n        \"Je_Energy/Min_Active_Power_Total\",\n        \"Je_Energy/Min_Apparent_Power_Total\",\n        \"Je_Energy/Min_Current_Average\",\n        \"Je_Energy/Min_Reactive_Power_Total\",\n        \"Je_Energy/Min_Voltage_L_to_L_Average\",\n        \"Je_Energy/Min_Voltage_L_to_N_Average\",\n        \"Je_Energy/Nominal_Current\",\n        \"Je_Energy/Nominal_Voltage\",\n        \"Je_Energy/Peak_Demand_A\",\n        \"Je_Energy/Peak_Demand_kVA\",\n        \"Je_Energy/Peak_Demand_kVAR\",\n        \"Je_Energy/Peak_Demand_kW\",\n        \"Je_Energy/Phase_Angle_Voltage_A_Current_A\",\n        \"Je_Energy/Phase_Angle_Voltage_B_Current_B\",\n        \"Je_Energy/Phase_Angle_Voltage_C_Current_C\",\n        \"Je_Energy/PowerFactor\",\n        \"Je_Energy/Power_Factor_total1\",\n        \"Je_Energy/Power_Factor_total2\",\n        \"Je_Energy/Predicted_Demand_A\",\n        \"Je_Energy/Predicted_Demand_kVA\",\n        \"Je_Energy/Predicted_Demand_kVAR\",\n        \"Je_Energy/Predicted_Demand_kW\",\n        \"Je_Energy/Present_Demand_A\",\n        \"Je_Energy/Present_Demand_kVA\",\n        \"Je_Energy/Present_Demand_kVAR\",\n        \"Je_Energy/Present_Demand_kW\",\n        \"Je_Energy/Reactive_Energy_Delivered\",\n        \"Je_Energy/Reactive_Energy_Delivered_plus_Received\",\n        \"Je_Energy/Reactive_Energy_Delivered_minus_Received\",\n        \"Je_Energy/Reactive_Energy_Received\",\n        \"Je_Energy/Reactive_Power_A\",\n        \"Je_Energy/Reactive_Power_B\",\n        \"Je_Energy/Reactive_Power_C\",\n        \"Je_Energy/Reactive_Power_TOTAL\",\n        \"Je_Energy/Voltage_A_B\",\n        \"Je_Energy/Voltage_A_N\",\n        \"Je_Energy/Voltage_B_C\",\n        \"Je_Energy/Voltage_B_N\",\n        \"Je_Energy/Voltage_C_A\",\n        \"Je_Energy/Voltage_C_N\",\n        \"Je_Energy/Voltage_L_to_L_Average\",\n        \"Je_Energy/Voltage_L_to_N_Average\",\n        \"Je_Energy/Voltage_Unalance_A_to_B\",\n        \"Je_Energy/Voltage_Unalance_B_to_C\",\n        \"Je_Energy/Voltage_Unalance_C_to_A\",\n        \"Je_Energy/Voltage_Unalance_A_to_N\",\n        \"Je_Energy/Voltage_Unalance_C_to_N\",\n        \"Je_Energy/Voltage_Unalance_B_to_N\",\n        \"Je_Energy/Voltage_Unbalance_L_to_L_WORST\",\n        \"Je_Energy/Voltage_Unbalance_L_to_N_WORST\",\n        \"Je_Energy/THD_Current_A\",\n        \"Je_Energy/THD_Current_B\",\n        \"Je_Energy/THD_Current_C\",\n        \"Je_Energy/THD_Current_N\",\n        \"Je_Energy/THD_Current_G\",\n        \"Je_Energy/THD_Voltage_A_to_B\",\n        \"Je_Energy/THD_Voltage_A_to_N\",\n        \"Je_Energy/THD_Voltage_B_to_C\", \n        \"Je_Energy/THD_Voltage_B_to_N\",\n        \"Je_Energy/THD_Voltage_C_to_A\",\n        \"Je_Energy/THD_Voltage_C_to_N\",\n        \"Je_Energy/THD_Voltage_L_to_L\",\n        \"Je_Energy/THD_Voltage_L_to_N\", \n        \"Je_Energy/Max_Active_Power_Total\",\n        \"Je_Energy/Max_Current_Average\",\n        \"Je_Energy/Max_Reactive_Power_Total\",\n        \"Je_Energy/Max_Apparent_Power_Total\",\n        \"Je_Energy/Max_Voltage_L_to_N_Average\",\n        \"Je_Energy/Max_Voltage_L_to_L_Average\",\n        \"Je_Energy/Max_Frequency\",\n        \"Je_Energy/Min_Frequency\"\n\n    ];\n\n    // Initialize an object to store the values\n    var outputObject = {};\n\n    // Retrieve each value from the flow context and add it to the object\n    tags.forEach(tag => {\n        var value = flow.get(tag); // Get the value from the flow context\n        if (typeof value !== 'undefined') {\n            // Remove 'Energy_Meter/' and the numeric part '30xxx_'\n            var key = tag.replace('Je_Energy/', '').replace(/^\\d+_/, '');\n            outputObject[key] = value; // Add to the output object if value exists\n        }\n    });\n\n    // Attach the generated object to the message payload\n    msg.payload = outputObject;\n\n    // Send the message forward\n    return msg;\n} else {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1480,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "42921b628f776e55",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 1480,
        "wires": [
            [
                "e648714c14a99fb9"
            ]
        ]
    },
    {
        "id": "106ee1a0db09a5ba",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod5 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "4ff6e67c9ad9e641"
            ]
        ]
    },
    {
        "id": "a17c676f2c7cd83c",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod1 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "4d45c539783077b8"
            ]
        ]
    },
    {
        "id": "7a87537c8bfb151a",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod2 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "6e991fee29a49c7e"
            ]
        ]
    },
    {
        "id": "e33305c9f8e9c3cf",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod3 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 03 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "39d0168780e80f1a"
            ]
        ]
    },
    {
        "id": "f679e36439281ee6",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod4 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "71016a146d11a71d"
            ]
        ]
    },
    {
        "id": "39d0168780e80f1a",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod3 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"tod3_start\", currentReading);\n    node.warn(\"ToD3 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"tod3_end\", currentReading);\n    node.warn(\"ToD3 End Reading Stored: \" + currentReading);\n}\n\n// Calculate ToD3 when both readings are available\nvar tod3_start = parseFloat(flow.get(\"tod3_start\")) || 0;\nvar tod3_end = parseFloat(flow.get(\"tod3_end\")) || 0;\n\nif (tod3_start > 0 && tod3_end > 0) {\n    var tod3_difference = parseFloat(tod3_end) - parseFloat(tod3_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod3_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for ToD3, Ignoring...\");\n    } else {\n        // Accumulate the ToD3 consumption\n        var tod3 = parseFloat(tod3_difference);\n        flow.set('tod3', tod3);\n\n        // Calculate ToD3 Bill (Rate = 0.8)\n        var tod3Bill = tod3 * 8.1;\n        flow.set('tod3Bill', tod3Bill);\n\n        node.warn(\"ToD3 Consumption: \" + tod3);\n        node.warn(\"ToD3 Bill: \" + tod3Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"tod3_start\", 0);\n        flow.set(\"tod3_end\", 0);\n    }\n}\n\nvar a = flow.get('tod1') + flow.get('tod2') + tod3;\n\nvar b = flow.get('tod1Bill') + flow.get('tod2Bill') + tod3Bill;\n\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod3: tod3,\n    tod3Bill: tod3Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 700,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "6e991fee29a49c7e",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "tod2 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"tod2_start\", currentReading);\n    node.warn(\"tod2 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"tod2_end\", currentReading);\n    node.warn(\"tod2 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod2 when both readings are available\nvar tod2_start = parseFloat(flow.get(\"tod2_start\")) || 0;\nvar tod2_end = parseFloat(flow.get(\"tod2_end\")) || 0;\n\nif (tod2_start > 0 && tod2_end > 0) {\n    var tod2_difference = parseFloat(tod2_end) - parseFloat(tod2_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod2_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod2, Ignoring...\");\n    } else {\n        // Accumulate the tod2 consumption\n        var tod2 = parseFloat(tod2_difference);\n        flow.set('tod2', tod2);\n\n        // Calculate tod2 Bill (Rate = 0.8)\n        var tod2Bill = tod2 * 7.3;\n        flow.set('tod2Bill', tod2Bill);\n\n        node.warn(\"tod2 Consumption: \" + tod2);\n        node.warn(\"tod2 Bill: \" + tod2Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"tod2_start\", 0);\n        flow.set(\"tod2_end\", 0);\n    }\n}\n\nvar a = flow.get('tod1') + tod2;\n\nvar b = flow.get('tod1Bill') + tod2Bill;\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod2: tod2,\n    tod2Bill: tod2Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "eb1fef0be2664f07",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "Reset",
        "func": "\nvar a = (flow.get('tod1') || 0) * 6;\nvar b = (flow.get('tod2') || 0) * 7.5;\nvar c = (flow.get('tod3') || 0) * 8.3;\nvar d = (flow.get('tod4') || 0) * 7.5;\nvar e = (flow.get('tod5') || 0) * 8.6;\n\nlet totalBill = a + b + c + d + e;\n\nmsg.payload = {\n    tod1: 0,\n    tod1Bill: 0,\n    tod2: 0,\n    tod2Bill: 0,\n    tod3: 0,\n    tod3Bill: 0,\n    tod4: 0,\n    tod4Bill: 0,\n    tod5:0,\n    tod5Bill: 0,\n    totalBill: 0 \n};\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 900,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "d993a3cbed73e15d",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "eb1fef0be2664f07"
            ]
        ]
    },
    {
        "id": "f22b4cb710689d97",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "topic": "office/energymeter/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "790d89d6937eb1fd",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "",
        "topic": "office/JEenergymeter/ground",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 820,
        "y": 1720,
        "wires": []
    },
    {
        "id": "e37e718262ead913",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "Daily Consumption Energy",
        "func": "if (flow.get('EM_Timeout') === false) {\n\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"JE_EM_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"JE_EM_previousvalue\", a);\n\n// Calculate the difference\nvar difference = a - previous;\nflow.set(\"JE_EM_difference\", difference);\n\n// Create a JSON object for the output\nmsg.payload = { energy_dailyconsumption: difference };\nreturn msg;\n} else{\n    node.warn(\"Timeout true\");\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1540,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "e00143de82a3ecc7",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1540,
        "wires": [
            [
                "e37e718262ead913"
            ]
        ]
    },
    {
        "id": "e3326c01e19655c2",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod1 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "1d70cf3e15a4c765"
            ]
        ]
    },
    {
        "id": "0055f303a855eb55",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod1 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "22 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1620,
        "wires": [
            [
                "1d70cf3e15a4c765"
            ]
        ]
    },
    {
        "id": "36c1ed2b951f6267",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod2 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1660,
        "wires": [
            [
                "11c5ab258a6a38d8"
            ]
        ]
    },
    {
        "id": "6282894a489c64d5",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod2 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "22 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "11c5ab258a6a38d8"
            ]
        ]
    },
    {
        "id": "77a642c1a4449212",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod3 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1740,
        "wires": [
            [
                "cc431901746fbc2d"
            ]
        ]
    },
    {
        "id": "c70eb6329c0d1a90",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod3 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1780,
        "wires": [
            [
                "cc431901746fbc2d"
            ]
        ]
    },
    {
        "id": "e5324e34132c652a",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod4 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1820,
        "wires": [
            [
                "dc8aa3d875da55a4"
            ]
        ]
    },
    {
        "id": "f48f516bc9b9b197",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod4 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "dc8aa3d875da55a4"
            ]
        ]
    },
    {
        "id": "958c0971c443b20d",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod5 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1900,
        "wires": [
            [
                "c7a920a37ea2097d"
            ]
        ]
    },
    {
        "id": "46e4a19c0d7f375c",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod5 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1940,
        "wires": [
            [
                "c7a920a37ea2097d",
                "6f9c9ea8ad22c8d6"
            ]
        ]
    },
    {
        "id": "895786a37cf351f1",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1980,
        "wires": [
            [
                "b355c2d48351f36e"
            ]
        ]
    },
    {
        "id": "1d70cf3e15a4c765",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod1",
        "func": "\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"jetod1_start\", currentReading);\n    node.warn(\"tod1 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"jetod1_end\", currentReading);\n    node.warn(\"tod1 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod1 when both readings are available\nvar tod1_start = parseFloat(flow.get(\"jetod1_start\")) || 0;\nvar tod1_end = parseFloat(flow.get(\"jetod1_end\")) || 0;\n\nif (tod1_start > 0 && tod1_end > 0) {\n    var tod1_difference = parseFloat(tod1_end) - parseFloat(tod1_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod1_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod1, Ignoring...\");\n    } else {\n        // Accumulate the tod1 consumption\n        var tod1 = parseFloat(tod1_difference);\n        flow.set('jetod1', tod1);\n\n        // Calculate tod1 Bill (Rate = 0.8)\n        var tod1Bill = tod1 * 5.8;\n        flow.set('jetod1Bill', tod1Bill);\n\n        node.warn(\"tod1 Consumption: \" + tod1);\n        node.warn(\"tod1 Bill: \" + tod1Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"jetod1_start\", 0);\n        flow.set(\"jetod1_end\", 0);\n    }\n}\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod1: tod1,\n    tod1Bill: tod1Bill,\n    e_dailyconsumption: tod1,\n    totalBill: tod1Bill\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1680,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "11c5ab258a6a38d8",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod2 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"jetod2_start\", currentReading);\n    node.warn(\"tod2 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"jetod2_end\", currentReading);\n    node.warn(\"tod2 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod2 when both readings are available\nvar tod2_start = parseFloat(flow.get(\"jetod2_start\")) || 0;\nvar tod2_end = parseFloat(flow.get(\"jetod2_end\")) || 0;\n\nif (tod2_start > 0 && tod2_end > 0) {\n    var tod2_difference = parseFloat(tod2_end) - parseFloat(tod2_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod2_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod2, Ignoring...\");\n    } else {\n        // Accumulate the tod2 consumption\n        var tod2 = parseFloat(tod2_difference);\n        flow.set('jetod2', tod2);\n\n        // Calculate tod2 Bill (Rate = 0.8)\n        var tod2Bill = tod2 * 7.3;\n        flow.set('jetod2Bill', tod2Bill);\n\n        node.warn(\"tod2 Consumption: \" + tod2);\n        node.warn(\"tod2 Bill: \" + tod2Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"jetod2_start\", 0);\n        flow.set(\"jetod2_end\", 0);\n    }\n}\n\n\nvar a = flow.get('jetod1') + tod2;\n\nvar b = flow.get('jetod1Bill') + tod2Bill;\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod2: tod2,\n    tod2Bill: tod2Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1720,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "cc431901746fbc2d",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod3 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"jetod3_start\", currentReading);\n    node.warn(\"ToD3 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"jetod3_end\", currentReading);\n    node.warn(\"ToD3 End Reading Stored: \" + currentReading);\n}\n\n// Calculate ToD3 when both readings are available\nvar tod3_start = parseFloat(flow.get(\"jetod3_start\")) || 0;\nvar tod3_end = parseFloat(flow.get(\"jetod3_end\")) || 0;\n\nif (tod3_start > 0 && tod3_end > 0) {\n    var tod3_difference = parseFloat(tod3_end) - parseFloat(tod3_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod3_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for ToD3, Ignoring...\");\n    } else {\n        // Accumulate the ToD3 consumption\n        var tod3 = parseFloat(tod3_difference);\n        flow.set('jetod3', tod3);\n\n        // Calculate ToD3 Bill (Rate = 0.8)\n        var tod3Bill = tod3 * 8.1;\n        flow.set('jetod3Bill', tod3Bill);\n\n        node.warn(\"ToD3 Consumption: \" + tod3);\n        node.warn(\"ToD3 Bill: \" + tod3Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"jetod3_start\", 0);\n        flow.set(\"jetod3_end\", 0);\n    }\n}\n\nvar a = flow.get('jetod1') + flow.get('jetod2') + tod3;\n\nvar b = flow.get('jetod1Bill') + flow.get('jetod2Bill') + tod3Bill;\n\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod3: tod3,\n    tod3Bill: tod3Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1760,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "dc8aa3d875da55a4",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod4",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"jetod4_start\", currentReading);\n    node.warn(\"tod4 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"jetod4_end\", currentReading);\n    node.warn(\"tod4 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod4 when both readings are available\nvar tod4_start = parseFloat(flow.get(\"jetod4_start\")) || 0;\nvar tod4_end = parseFloat(flow.get(\"jetod4_end\")) || 0;\n\nif (tod4_start > 0 && tod4_end > 0) {\n    var tod4_difference = parseFloat(tod4_end) - parseFloat(tod4_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod4_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod4, Ignoring...\");\n    } else {\n        // Accumulate the tod4 consumption\n        var tod4 = parseFloat(tod4_difference);\n        flow.set('jetod4', tod4);\n\n        // Calculate tod4 Bill (Rate = 0.8)\n        var tod4Bill = tod4 * 7.3;\n        flow.set('jetod4Bill', tod4Bill);\n\n        node.warn(\"tod4 Consumption: \" + tod4);\n        node.warn(\"tod4 Bill: \" + tod4Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"jetod4_start\", 0);\n        flow.set(\"jetod4_end\", 0);\n    }\n}\n\nvar a = parseFloat(flow.get('jetod1')) + parseFloat(flow.get('jetod2')) + parseFloat(flow.get('jetod3')) + parseFloat(tod4);\n\nvar b = parseFloat(flow.get('jetod1Bill')) + parseFloat(flow.get('jetod2Bill')) + parseFloat(flow.get('jetod3Bill')) + parseFloat(tod4Bill);\n\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod4: tod4,\n    tod4Bill: tod4Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1800,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "c7a920a37ea2097d",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "tod5",
        "func": "\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"jetod5_start\", currentReading);\n    node.warn(\"tod5 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"jetod5_end\", currentReading);\n    node.warn(\"tod5 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod5 when both readings are available\nvar tod5_start = parseFloat(flow.get(\"jetod5_start\")) || 0;\nvar tod5_end = parseFloat(flow.get(\"jetod5_end\")) || 0;\n\nif (tod5_start > 0 && tod5_end > 0) {\n    var tod5_difference = parseFloat(tod5_end) - parseFloat(tod5_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod5_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod5, Ignoring...\");\n    } else {\n        // Accumulate the tod5 consumption\n        var tod5 = parseFloat(tod5_difference);\n        flow.set('jetod5', tod5);\n\n        // Calculate tod5 Bill (Rate = 0.8)\n        var tod5Bill = tod5 * 8.4;\n        flow.set('jetod5Bill', tod5Bill);\n\n        node.warn(\"tod5 Consumption: \" + tod5);\n        node.warn(\"tod5 Bill: \" + tod5Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"jetod5_start\", 0);\n        flow.set(\"jetod5_end\", 0);\n    }\n}\n\nvar a = flow.get('jetod1') + flow.get('jetod2') + flow.get('jetod3') + flow.get('jetod4') + tod5;\n\nvar b = flow.get('jetod1Bill') + flow.get('jetod2Bill') + flow.get('jetod3Bill') + flow.get('jetod4Bill') + tod5Bill;\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\n\nif (msg.payload.type === \"end\") {\n    msg.payload = {\n    tod5: tod5,\n    tod5Bill: tod5Bill,\n    e_dailyconsumption: a,\n    totalBill: b,\n    taxedBill: c\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1840,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "b355c2d48351f36e",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "Reset",
        "func": "var a = (flow.get('jetod1') || 0) * 6;\nvar b = (flow.get('jetod2') || 0) * 7.5;\nvar c = (flow.get('jetod3') || 0) * 8.3;\nvar d = (flow.get('jetod4') || 0) * 7.5;\nvar e = (flow.get('jetod5') || 0) * 8.6;\n\nlet totalBill = a + b + c + d + e;\n\nmsg.payload = {\n    tod1: 0,\n    tod1Bill: 0,\n    tod2: 0,\n    tod2Bill: 0,\n    tod3: 0,\n    tod3Bill: 0,\n    tod4: 0,\n    tod4Bill: 0,\n    tod5: 0,\n    tod5Bill: 0,\n    totalBill: 0\n};\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1920,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "d05ceabc2fe96b52",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "function 26",
        "func": "var CumulFlow = flow.get(\"FlowMeter/cumuflow\");\nmsg.payload = CumulFlow;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1200,
        "wires": [
            [
                "4be5a176cd4ebb89",
                "222798cc50086927"
            ]
        ]
    },
    {
        "id": "4be5a176cd4ebb89",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "name": "",
        "topic": "local/rpiserver",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 1040,
        "y": 1280,
        "wires": []
    },
    {
        "id": "222798cc50086927",
        "type": "debug",
        "z": "5256b1739de0f91b",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1360,
        "wires": []
    },
    {
        "id": "49b665891d83d16d",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "d05ceabc2fe96b52"
            ]
        ]
    },
    {
        "id": "706678d744e082a7",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "f4559bb1d40e1d21",
        "name": "Monthly Bill",
        "func": "var b = flow.get('tod1Bill') + flow.get('tod2Bill') + flow.get('tod3Bill') + flow.get('tod4Bill') + flow.get('tod5Bill');\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\nmsg.payload = {\n    monthlytotalBill: b,\n    taxedMonthlyBill: c\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "bee49cfd87408da1"
            ]
        ]
    },
    {
        "id": "6f9c9ea8ad22c8d6",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "d0aec0a065e03058",
        "name": "Monthly Bill",
        "func": "var b = flow.get('jetod1Bill') + flow.get('jetod2Bill') + flow.get('jetod3Bill') + flow.get('jetod4Bill') + flow.get('jetod5Bill');\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\nmsg.payload = {\n    monthlytotalBill: b,\n    taxedMonthlyBill: c\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1880,
        "wires": [
            [
                "790d89d6937eb1fd"
            ]
        ]
    },
    {
        "id": "1d8e779961eac347",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "0b75b6adef8e59b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "257c815d560de8c0"
            ]
        ]
    },
    {
        "id": "beae8e183e7fb5b2",
        "type": "email-send",
        "z": "5256b1739de0f91b",
        "transport": "b71233c4d16bcb61",
        "from": "iot91355@gmail.com",
        "to": "sandeep@absolutemotion.in;",
        "cc": "",
        "bcc": "",
        "subject": "Email Alerts",
        "contentType": "text",
        "priority": "normal",
        "name": "",
        "x": 990,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "24991b9f081fa3e1",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "function 32",
        "func": "// // Check if payload has expected structure\n// if (msg.payload && msg.payload.message && msg.payload.message.toLowerCase() === \"sensor reboot\") {\n\n//     // Get last reboot state from flow context\n//     var lastReboot = flow.get(\"sensorRebooted\") || false;\n\n//     if (!lastReboot) {\n//         // First reboot detected — mark as rebooted\n//         flow.set(\"sensorRebooted\", true);\n\n//         // Prepare email message\n//         msg.topic = \"Sensor Reboot Alert\";\n//         msg.payload = \"The sensor SEN55 has rebooted.\";\n//         return msg; // Pass to email node\n//     } else {\n//         // Already marked rebooted, do not send email again\n//         return null;\n//     }\n// } else {\n//     // If message is not \"sensor reboot\", reset the reboot state\n//     flow.set(\"sensorRebooted\", false);\n//     return null;\n// }\n\n// Check if payload contains the expected reboot message\nif (msg.payload && msg.payload.message && msg.payload.message.trim().toLowerCase() === \"sensor reboot\") {\n\n    // Check the last reboot state from flow context\n    let hasRebooted = flow.get(\"sensorRebooted\") || false;\n\n    if (!hasRebooted) {\n        // First detection of reboot — set flag\n        flow.set(\"sensorRebooted\", true);\n\n        // Get and increment reboot count\n        let rebootCount = flow.get(\"rebootCount\") || 0;\n        rebootCount++;\n        flow.set(\"rebootCount\", rebootCount);\n\n        // Prepare the alert message\n        msg.topic = \"Sensor Reboot Alert\";\n        msg.payload = `The sensor SEN55 has rebooted.\\nTotal reboot count: ${rebootCount}`;\n        return msg; // Pass to email or notification node\n    } else {\n        // Already acknowledged reboot — do not resend\n        return null;\n    }\n\n} else {\n    // If it's a different message, reset the reboot state\n    flow.set(\"sensorRebooted\", false);\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 240,
        "wires": [
            [
                "beae8e183e7fb5b2"
            ]
        ]
    },
    {
        "id": "cba48941f74d897f",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "Reset sen55 reboot ",
        "func": "flow.set('rebootCount', 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cf3fa1e88242a07c",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 18 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "cba48941f74d897f"
            ]
        ]
    },
    {
        "id": "529e0b2af095914c",
        "type": "mqtt out",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "",
        "topic": "office/EM_2ndFloor/ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 820,
        "y": 2560,
        "wires": []
    },
    {
        "id": "2806248d56c5183d",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "Daily Consumption Energy",
        "func": "if (flow.get('EM_Timeout') === false) {\n\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"EM2_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"EM2_previousvalue\", a);\n\n// Calculate the difference\nvar difference = a - previous;\nflow.set(\"EM2_difference\", difference);\n\n// Create a JSON object for the output\nmsg.payload = { energy_dailyconsumption: difference };\nreturn msg;\n}else{\n    node.warn(\"Timeout true\");\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2460,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "afd58dbb83644bda",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 2360,
        "wires": [
            [
                "2806248d56c5183d"
            ]
        ]
    },
    {
        "id": "2c5ebf8f03ce4b25",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod1 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2400,
        "wires": [
            [
                "71c8b69d6ffda6f8"
            ]
        ]
    },
    {
        "id": "02fba8c0aa407afa",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod3 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 2600,
        "wires": [
            [
                "550c20cf415c80db"
            ]
        ]
    },
    {
        "id": "e6f7556b3e41dce4",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod4 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 2680,
        "wires": [
            [
                "1c10e7f9fafea414"
            ]
        ]
    },
    {
        "id": "3570124044cf33e9",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod2 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 2520,
        "wires": [
            [
                "105d808a9a195c56"
            ]
        ]
    },
    {
        "id": "322a09ac63ac21ed",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod5 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 2760,
        "wires": [
            [
                "9c03a41f24e0c1b1",
                "f126394d53967047"
            ]
        ]
    },
    {
        "id": "71c8b69d6ffda6f8",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod1",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"2tod1_start\", currentReading);\n    node.warn(\"2tod1 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"2tod1_end\", currentReading);\n    node.warn(\"2tod1 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod1 when both readings are available\nvar tod1_start = parseFloat(flow.get(\"2tod1_start\")) || 0;\nvar tod1_end = parseFloat(flow.get(\"2tod1_end\")) || 0;\n\nif (tod1_start > 0 && tod1_end > 0) {\n    var tod1_difference = parseFloat(tod1_end) - parseFloat(tod1_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod1_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod1, Ignoring...\");\n    } else {\n        // Accumulate the tod1 consumption\n        var tod1 = parseFloat(tod1_difference);\n        flow.set('2tod1', tod1);\n\n        // Calculate tod1 Bill (Rate = 0.8)\n        var tod1Bill = tod1 * 5.8;\n        flow.set('2tod1Bill', tod1Bill);\n\n        node.warn(\"2tod1 Consumption: \" + tod1);\n        node.warn(\"2tod1 Bill: \" + tod1Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"2tod1_start\", 0);\n        flow.set(\"2tod1_end\", 0);\n    }\n}\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod1: tod1,\n    tod1Bill: tod1Bill,\n    e_dailyconsumption: tod1,\n    totalBill: tod1Bill\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2500,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "1c10e7f9fafea414",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod4",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"2tod4_start\", currentReading);\n    node.warn(\"2tod4 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"2tod4_end\", currentReading);\n    node.warn(\"2tod4 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod4 when both readings are available\nvar tod4_start = parseFloat(flow.get(\"2tod4_start\")) || 0;\nvar tod4_end = parseFloat(flow.get(\"2tod4_end\")) || 0;\n\nif (tod4_start > 0 && tod4_end > 0) {\n    var tod4_difference = parseFloat(tod4_end) - parseFloat(tod4_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod4_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod4, Ignoring...\");\n    } else {\n        // Accumulate the tod4 consumption\n        var tod4 = parseFloat(tod4_difference);\n        flow.set('2tod4', tod4);\n\n        // Calculate tod4 Bill (Rate = 0.8)\n        var tod4Bill = tod4 * 7.3;\n        flow.set('2tod4Bill', tod4Bill);\n\n        node.warn(\"2tod4 Consumption: \" + tod4);\n        node.warn(\"2tod4 Bill: \" + tod4Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"2tod4_start\", 0);\n        flow.set(\"2tod4_end\", 0);\n    }\n}\n\nvar a = parseFloat(flow.get('2tod1')) + parseFloat(flow.get('2tod2')) + parseFloat(flow.get('2tod3')) + parseFloat(tod4);\n\nvar b = parseFloat(flow.get('2tod1Bill')) + parseFloat(flow.get('2tod2Bill')) + parseFloat(flow.get('2tod3Bill')) + parseFloat(tod4Bill);\n\n// Create the output message\n\nif (msg.payload.type === \"end\"){\nmsg.payload = {\n    tod4: tod4,\n    tod4Bill: tod4Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2620,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "9c03a41f24e0c1b1",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod5",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"2tod5_start\", currentReading);\n    node.warn(\"2tod5 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"2tod5_end\", currentReading);\n    node.warn(\"2tod5 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod5 when both readings are available\nvar tod5_start = parseFloat(flow.get(\"2tod5_start\")) || 0;\nvar tod5_end = parseFloat(flow.get(\"2tod5_end\")) || 0;\n\nif (tod5_start > 0 && tod5_end > 0) {\n    var tod5_difference = parseFloat(tod5_end) - parseFloat(tod5_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod5_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod5, Ignoring...\");\n    } else {\n        // Accumulate the tod5 consumption\n        var tod5 = parseFloat(tod5_difference);\n        flow.set('2tod5', tod5);\n\n        // Calculate tod5 Bill (Rate = 0.8)\n        var tod5Bill = tod5 * 8.4;\n        flow.set('2tod5Bill', tod5Bill);\n\n        node.warn(\"2tod5 Consumption: \" + tod5);\n        node.warn(\"2tod5 Bill: \" + tod5Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"2tod5_start\", 0);\n        flow.set(\"2tod5_end\", 0);\n    }\n}\n\nvar a = flow.get('2tod1') + flow.get('2tod2') + flow.get('2tod3') + flow.get('2tod4') + tod5;\n\nvar b = flow.get('2tod1Bill') + flow.get('2tod2Bill') + flow.get('2tod3Bill') + flow.get('2tod4Bill') + tod5Bill;\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod5: tod5,\n    tod5Bill: tod5Bill,\n    e_dailyconsumption: a,\n    totalBill: b,\n    taxedBill: c\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2660,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "6494657ed2d34db4",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod5 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2720,
        "wires": [
            [
                "9c03a41f24e0c1b1"
            ]
        ]
    },
    {
        "id": "a0b11256fb212088",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod1 end",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"end\"}",
        "payloadType": "json",
        "x": 120,
        "y": 2440,
        "wires": [
            [
                "71c8b69d6ffda6f8"
            ]
        ]
    },
    {
        "id": "a56fa2abce2d7a4f",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod2 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2480,
        "wires": [
            [
                "105d808a9a195c56"
            ]
        ]
    },
    {
        "id": "c7652317807cb29b",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod3 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\": \"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2560,
        "wires": [
            [
                "550c20cf415c80db"
            ]
        ]
    },
    {
        "id": "4bbee88f2001a9fd",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod4 start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "32 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"start\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2640,
        "wires": [
            [
                "1c10e7f9fafea414"
            ]
        ]
    },
    {
        "id": "550c20cf415c80db",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod3 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"2tod3_start\", currentReading);\n    node.warn(\"2ToD3 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"2tod3_end\", currentReading);\n    node.warn(\"2ToD3 End Reading Stored: \" + currentReading);\n}\n\n// Calculate ToD3 when both readings are available\nvar tod3_start = parseFloat(flow.get(\"2tod3_start\")) || 0;\nvar tod3_end = parseFloat(flow.get(\"2tod3_end\")) || 0;\n\nif (tod3_start > 0 && tod3_end > 0) {\n    var tod3_difference = parseFloat(tod3_end) - parseFloat(tod3_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod3_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for ToD3, Ignoring...\");\n    } else {\n        // Accumulate the ToD3 consumption\n        var tod3 = parseFloat(tod3_difference);\n        flow.set('2tod3', tod3);\n\n        // Calculate ToD3 Bill (Rate = 0.8)\n        var tod3Bill = tod3 * 8.1;\n        flow.set('2tod3Bill', tod3Bill);\n\n        node.warn(\"2ToD3 Consumption: \" + tod3);\n        node.warn(\"2ToD3 Bill: \" + tod3Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"2tod3_start\", 0);\n        flow.set(\"2tod3_end\", 0);\n    }\n}\n\nvar a = flow.get('2tod1') + flow.get('2tod2') + tod3;\n\nvar b = flow.get('2tod1Bill') + flow.get('2tod2Bill') + tod3Bill;\n\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod3: tod3,\n    tod3Bill: tod3Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2580,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "105d808a9a195c56",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "tod2 new",
        "func": "\n// Retrieve CumulFlow from flow context and ensure it's a number\nvar currentReading = Number(flow.get(\"Absfloor2/30058_Total_Net_kWh\")) || 0;\n\n// Check if this is a start or end trigger\nif (msg.payload.type === \"start\") {\n    flow.set(\"2tod2_start\", currentReading);\n    node.warn(\"2tod2 Start Reading Stored: \" + currentReading);\n} else if (msg.payload.type === \"end\") {\n    flow.set(\"2tod2_end\", currentReading);\n    node.warn(\"2tod2 End Reading Stored: \" + currentReading);\n}\n\n// Calculate tod2 when both readings are available\nvar tod2_start = parseFloat(flow.get(\"2tod2_start\")) || 0;\nvar tod2_end = parseFloat(flow.get(\"2tod2_end\")) || 0;\n\nif (tod2_start > 0 && tod2_end > 0) {\n    var tod2_difference = parseFloat(tod2_end) - parseFloat(tod2_start);\n\n    // If the difference is negative or zero, ignore it\n    if (tod2_difference <= 0) {\n        node.warn(\"Negative or Zero Difference Detected for tod2, Ignoring...\");\n    } else {\n        // Accumulate the tod2 consumption\n        var tod2 = parseFloat(tod2_difference);\n        flow.set('2tod2', tod2);\n\n        // Calculate tod2 Bill (Rate = 0.8)\n        var tod2Bill = tod2 * 7.3;\n        flow.set('2tod2Bill', tod2Bill);\n\n        node.warn(\"2tod2 Consumption: \" + tod2);\n        node.warn(\"2tod2 Bill: \" + tod2Bill);\n\n        // Reset the readings for the next cycle\n        flow.set(\"2tod2_start\", 0);\n        flow.set(\"2tod2_end\", 0);\n    }\n}\n\nvar a = flow.get('2tod1') + tod2;\n\nvar b = flow.get('2tod1Bill') + tod2Bill;\n\n// Create the output message\nif (msg.payload.type === \"end\") {\nmsg.payload = {\n    tod2: tod2,\n    tod2Bill: tod2Bill,\n    e_dailyconsumption: a,\n    totalBill: b\n}\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2540,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "2ec564add7d81e1a",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "Reset",
        "func": "\nvar a = (flow.get('2tod1') || 0) * 6;\nvar b = (flow.get('2tod2') || 0) * 7.5;\nvar c = (flow.get('2tod3') || 0) * 8.3;\nvar d = (flow.get('2tod4') || 0) * 7.5;\nvar e = (flow.get('2tod5') || 0) * 8.6;\n\nlet totalBill = a + b + c + d + e;\n\nmsg.payload = {\n    tod1: 0,\n    tod1Bill: 0,\n    tod2: 0,\n    tod2Bill: 0,\n    tod3: 0,\n    tod3Bill: 0,\n    tod4: 0,\n    tod4Bill: 0,\n    tod5:0,\n    tod5Bill: 0,\n    totalBill: 0 \n};\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2780,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "330c47e0636008da",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 2800,
        "wires": [
            [
                "2ec564add7d81e1a"
            ]
        ]
    },
    {
        "id": "f126394d53967047",
        "type": "function",
        "z": "5256b1739de0f91b",
        "g": "e62e4efa7e4c7c36",
        "name": "Monthly Bill",
        "func": "var b = flow.get('2tod1Bill') + flow.get('2tod2Bill') + flow.get('2tod3Bill') + flow.get('2tod4Bill') + flow.get('2tod5Bill');\n\nvar c = b + (b / 100 * 36);\n\n// Create the output message\nmsg.payload = {\n    monthlytotalBill: b,\n    taxedMonthlyBill: c\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2720,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "9761e9baaf253701",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "Energy_Meter",
        "func": "// Check if EM_Timeout is false\nif (flow.get('EM_Timeout') === false) {\n    // Define an array of tags you want to retrieve\n    var tags = [\n        \"Absfloor2/30014_Average_Voltage_LL\",\n        \"Absfloor2/30022_Average_Current\",\n        \"Absfloor2/30042_Total_kW\",\n        \"Absfloor2/30044_Total_kVA\",\n        \"Absfloor2/30046_Total_kVAr\",\n        \"Absfloor2/30054_Average_PF\",\n        \"Absfloor2/30056_Frequency\",\n        \"Absfloor2/30124_THD_of_1st_Phase_Voltage\",\n        \"Absfloor2/30126_THD_of_2nd_Phase_Voltage\",\n        \"Absfloor2/30128_THD_of_3rd_Phase_Voltage\",\n        \"Absfloor2/30130_THD_of_Voltage_V12\",\n        \"Absfloor2/30132_THD_of_Voltage_V23\",\n        \"Absfloor2/30134_THD_of_Voltage_V31\",\n        \"Absfloor2/30136_THD_of_Current_I1\",\n        \"Absfloor2/30138_THD_of_Current_I2\",\n        \"Absfloor2/30140_THD_of_Current_I3\",\n        \"Absfloor2/30000_Voltage_V1N\",\n        \"Absfloor2/30002_Voltage_V2N\",\n        \"Absfloor2/30004_Voltage_V3N\",\n        \"Absfloor2/30006_Average_Voltage_LN\",\n        \"Absfloor2/30122_Neutral_Current\",\n        \"Absfloor2/30058_Total_Net_kWh\"\n    ];\n\n    // Initialize an object to store the values\n    var outputObject = {};\n\n    // Retrieve each value from the flow context and add it to the object\n    tags.forEach(tag => {\n        var value = flow.get(tag); // Get the value from the flow context\n        if (typeof value !== 'undefined') {\n            // Remove 'Energy_Meter/' and the numeric part '30xxx_'\n            var key = tag.replace('Absfloor2/', '').replace(/^\\d+_/, '');\n            outputObject[key] = value; // Add to the output object if value exists\n        }\n    });\n\n    // Attach the generated object to the message payload\n    msg.payload = outputObject;\n\n    // Send the message forward\n    return msg;\n} else {\n    // If EM_Timeout is true, do nothing (or optionally warn)\n    node.warn(\"EM_Timeout is true, not sending values.\");\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2740,
        "wires": [
            [
                "529e0b2af095914c"
            ]
        ]
    },
    {
        "id": "14b5e225bcf9b032",
        "type": "inject",
        "z": "5256b1739de0f91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 450,
        "y": 2820,
        "wires": [
            [
                "9761e9baaf253701"
            ]
        ]
    },
    {
        "id": "f09c59d422efd0ca",
        "type": "debug",
        "z": "5256b1739de0f91b",
        "name": "debug 86",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "a9e12db724e118b8",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "name": "",
        "topic": "local/rpiserver3",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df19db5e803f7272",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "f0b31a0e38bfc45b"
            ]
        ]
    },
    {
        "id": "0fb18c50d4c6331c",
        "type": "debug",
        "z": "5256b1739de0f91b",
        "name": "debug 87",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 340,
        "wires": []
    },
    {
        "id": "f0b31a0e38bfc45b",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "function 33",
        "func": "// var a = msg.payload;\n\n// msg.payload = {\n//     relayStatus: a\n// }\n// return msg;\n\n// var a = msg.payload;\n\n// if (a === 0) {\n//     msg.topic = \"Alert: Power Supply Switched to UPS\";\n//     msg.payload = \"The system is running on UPS.\";\n//     return msg; // Send email\n// }\n\n// // If relay status is not 0, do nothing\n// return null;\n\n\nvar currentStatus = msg.payload; // 0 or 1\nvar previousStatus = flow.get(\"previousRelayStatus\");\n\nflow.set(\"previousRelayStatus\", currentStatus); // Update stored value\n\n// If status changed\nif (previousStatus !== currentStatus) {\n    if (currentStatus === 0) {\n        msg.topic = \"Alert: Power Switched to UPS\";\n        msg.payload = JSON.stringify({\n            \"Alert: Power Switched to UPS\": \"The system is running on UPS.\"\n            });\n        return msg;\n    } else if (currentStatus === 1) {\n        msg.topic = \"Info: Power Restored\";\n        msg.payload = JSON.stringify({\n            \"Info: Power Restored\": \"The system is running on main power.\"\n        });\n        return msg;\n    }\n}\n\n// No change or same state → no email\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 340,
        "wires": [
            [
                "0fb18c50d4c6331c",
                "beae8e183e7fb5b2"
            ]
        ]
    },
    {
        "id": "a2668fbbec207cc1",
        "type": "mqtt in",
        "z": "5256b1739de0f91b",
        "name": "",
        "topic": "local/rpiserver2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "df19db5e803f7272",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 752.6692504882812,
        "y": 401.1666564941406,
        "wires": [
            [
                "fd4ff80ec584ff08",
                "571ffe43a1815fd5"
            ]
        ]
    },
    {
        "id": "61c33b51b3657719",
        "type": "debug",
        "z": "5256b1739de0f91b",
        "name": "debug 88",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 400,
        "wires": []
    },
    {
        "id": "fd4ff80ec584ff08",
        "type": "function",
        "z": "5256b1739de0f91b",
        "name": "function 34",
        "func": "let currentLevel = msg.payload.utp;\nlet valveStatus = msg.payload.Valve_status;\nlet lastLevel = flow.get(\"lastUTP\");\nlet lastChanged = flow.get(\"lastUTPChanged\");\nlet now = new Date().getTime();\n\n// First run: set values and skip\nif (lastLevel === undefined || lastChanged === undefined) {\n    flow.set(\"lastUTP\", currentLevel);\n    flow.set(\"lastUTPChanged\", now);\n    return null;\n}\n\n// Level increased → update timestamp\nif (currentLevel > lastLevel) {\n    flow.set(\"lastUTP\", currentLevel);\n    flow.set(\"lastUTPChanged\", now);\n    return null;\n}\n\n// Check if valve is ON and level hasn't increased for 50 minutes\nlet timeDiff = now - lastChanged;\nif (valveStatus === 1 && timeDiff >= 50 * 60 * 1000) {\n    msg.topic = \"Alert: UG Level Not Increasing\";\n    msg.payload = JSON.stringify({\n        \"UTP Level Issue\": `Valve has been ON for over 50 minutes but underground level has not increased. Current level: ${currentLevel.toFixed(2)}%.`\n    });\n    return msg;\n}\n\n// Update last level for tracking\nflow.set(\"lastUTP\", currentLevel);\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "61c33b51b3657719",
                "beae8e183e7fb5b2"
            ]
        ]
    },
    {
        "id": "571ffe43a1815fd5",
        "type": "debug",
        "z": "5256b1739de0f91b",
        "name": "debug 89",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "eb0e064b07f7f437",
        "type": "ui_button",
        "z": "be07d30774e85419",
        "name": "",
        "group": "13ad8bd5156e8abe",
        "order": 2,
        "width": 4,
        "height": 3,
        "passthru": false,
        "label": "Batch Start",
        "tooltip": "",
        "color": "black",
        "bgcolor": "lime",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "9e16f8b8ca4c7f4c"
            ]
        ]
    },
    {
        "id": "04ae8c9bc68be1a1",
        "type": "ui_dropdown",
        "z": "be07d30774e85419",
        "name": "",
        "label": "Select SKU",
        "tooltip": "",
        "place": "Select option ",
        "group": "13ad8bd5156e8abe",
        "order": 16,
        "width": 5,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Product A",
                "value": "A",
                "type": "str"
            },
            {
                "label": "Product B",
                "value": "B",
                "type": "str"
            },
            {
                "label": "Product C",
                "value": "C",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "5979c24a508dfc45"
            ]
        ]
    },
    {
        "id": "e4e077c9b59d9efb",
        "type": "ui_slider",
        "z": "be07d30774e85419",
        "name": "",
        "label": "No. of Samples",
        "tooltip": "",
        "group": "13ad8bd5156e8abe",
        "order": 22,
        "width": "6",
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "1",
        "max": 10,
        "step": 1,
        "className": "",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "ebe52010c659f068"
            ]
        ]
    },
    {
        "id": "48087bb3d947a6a7",
        "type": "ui_button",
        "z": "be07d30774e85419",
        "name": "",
        "group": "13ad8bd5156e8abe",
        "order": 4,
        "width": 4,
        "height": 3,
        "passthru": true,
        "label": "Batch Stop",
        "tooltip": "",
        "color": "black",
        "bgcolor": "orange",
        "className": "",
        "icon": "stop",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "9e16f8b8ca4c7f4c"
            ]
        ]
    },
    {
        "id": "b44c479672444423",
        "type": "ui_slider",
        "z": "be07d30774e85419",
        "name": "",
        "label": "Time to Push",
        "tooltip": "",
        "group": "13ad8bd5156e8abe",
        "order": 24,
        "width": "6",
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "1",
        "max": "20",
        "step": 1,
        "className": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "a222ccfb45c86553"
            ]
        ]
    },
    {
        "id": "9e16f8b8ca4c7f4c",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Auto Mode Set",
        "func": "var a = msg.payload;\nflow.set(\"AutoMode\", a);\n\nvar b = flow.get('Time_to_Push');\n\nif(a === false){\n    b = 0\n}\n\nmsg.payload = {\n    AutoMode: a\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "6a2bb801bf0c80e4",
                "4eb49db61414c533"
            ]
        ]
    },
    {
        "id": "5979c24a508dfc45",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Store to Context",
        "func": "var a = msg.payload;\nflow.set('Product', a);\n\n\nvar b = flow.get('Product');\n\nif (b === \"A\") {\n    msg.payload = { A: b };\n} else if (b === \"B\") {\n    msg.payload = { B: b };\n} else {\n    msg.payload = { C: b };\n}\n\nvar Product = b;\n\nmsg.payload = { Product: b};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "6a2bb801bf0c80e4"
            ]
        ]
    },
    {
        "id": "bebfe2e2329bf688",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Auto ON Interlock",
        "func": "\n// // Get AutoMode status/\n// let mode = flow.get('AutoMode');\n\n// if (mode === true) {\n//     // Get required values from flow context\n//     let n = flow.get('Number_of_Samples') || 1;\n//     let product = flow.get('Product') || \"Unknown\";\n//     let timeToPush = flow.get('Time_to_Push') || 60000; // Default 1 second\n\n//     node.warn(\"Time to Push: \" + timeToPush);\n\n\n//     msg.delay = timeToPush; // Store delay for pacing message flow\n\n//     msg.payload = {\n//         status: \"Number of Samples set\",\n//         Number_of_Samples: n,\n//         Product: product,\n//         Time_to_Push: timeToPush\n//     };\n\n//     return msg;\n// }\n// // If AutoMode is OFF, do nothing\n// return null;\n\nlet mode = flow.get('AutoMode');\n\nif (mode === true) {\n    let n = flow.get('Number_of_Samples') || 1;\n    let product = flow.get('Product') || \"Unknown\";\n    let timeToPush = (flow.get('Time_to_Push') || 1) * 60000; // Convert minutes to ms\n    let sampleCount = flow.get(`sampleCount_${product}`) || 0;\n    let accumulatedSamples = flow.get('weightArray') || [];\n\n    node.warn(`🔄 Accumulate Samples - Current Count: ${sampleCount}, Required: ${n}`);\n\n    // If already accumulated n samples, do nothing until reset\n    if (sampleCount >= n) {\n        node.warn(`⏳ Waiting for Reset - Samples Collected: ${sampleCount}/${n}`);\n        return null;\n    }\n\n    // Fetch weight dynamically\n    let weight = flow.get('prod_weight') || 0;\n    accumulatedSamples.push(weight);\n    sampleCount++;\n\n    flow.set('weightArray', accumulatedSamples);\n    flow.set(`sampleCount_${product}`, sampleCount);\n\n    node.warn(`📌 Sample ${sampleCount}: Weight = ${weight}`);\n    node.warn(`📊 Batch Accumulated: ${JSON.stringify(accumulatedSamples)}`);\n\n    // If batch is complete, return message\n    if (sampleCount === n) {\n        msg.payload = {\n            status: \"Batch Complete\",\n            Product: product,\n            Number_of_Samples: n,\n            StoredSamples: accumulatedSamples,\n            Time_to_Push: timeToPush\n        };\n        node.warn(`✅ Batch Completed - Pushing Data`);\n        return msg;\n    }\n\n    return null;\n}\n\nreturn null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "dad18690cf59b963"
            ]
        ]
    },
    {
        "id": "99b0644f5dbde726",
        "type": "inject",
        "z": "be07d30774e85419",
        "g": "cb4af27768414654",
        "name": "1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "f6d8d0dbf16308d8"
            ]
        ]
    },
    {
        "id": "f6d8d0dbf16308d8",
        "type": "function",
        "z": "be07d30774e85419",
        "g": "cb4af27768414654",
        "name": "Machine Simulator",
        "func": "// var auto = flow.get(\"AutoMode\") || 0;\n// if ( auto === true) \n// {\n//     // Generate a random number between 98 and 102 with 0.1 resolution\n//     // msg.payload = (Math.floor(Math.random() * 47) / 10) + 98;\n//     // flow.set(\"prod_weight\",msg.payload);\n//     // return msg;\n\n//     // Define the standard number\n//     let standardNumber = flow.get('Std_weight'); // This can be dynamically changed\n\n//     // Calculate the range and generate a random number\n//     let min = standardNumber - 2; // Lower bound (98 if standardNumber is 100)\n//     let max = standardNumber + 2; // Upper bound (102 if standardNumber is 100)\n//     let resolution = 0.2; // Resolution of 0.2\n\n//     // Generate a random number within the range with the specified resolution\n//     let randomNumber = Math.floor(Math.random() * ((max - min) / resolution + 1)) * resolution + min;\n\n//     // Assign the result to msg.payload\n//     msg.payload = randomNumber;\n\n\n// } \n// else \n// {\n\n//     return null;\n// }\n\n\nvar auto = flow.get(\"AutoMode\") || 0;\n\nif (auto === true) {\n    // Get the standard weight (default to 100 if undefined)\n    let standardNumber = flow.get('Std_weight') || 100;\n\n    // Define the range based on the standard weight\n    let min = standardNumber - 2.1; // Lower bound\n    let max = standardNumber + 2.1; // Upper bound\n    let resolution = 0.2; // Step size\n\n    // Generate a random number within the range with the specified resolution\n    let randomNumber = (Math.floor(Math.random() * ((max - min) / resolution + 1)) * resolution + min).toFixed(2);\n    randomNumber = Number(randomNumber); // Convert back to number type\n\n    // Store the generated weight in the flow context\n    flow.set(\"prod_weight\", randomNumber);\n\n    // Assign the result to msg.payload\n    msg.payload = randomNumber;\n\n    return msg;\n}\n\n// If AutoMode is OFF, do nothing\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 80,
        "wires": [
            [
                "719b613d22ad63b2",
                "4eb49db61414c533"
            ]
        ]
    },
    {
        "id": "719b613d22ad63b2",
        "type": "debug",
        "z": "be07d30774e85419",
        "g": "cb4af27768414654",
        "name": "debug 79",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1100,
        "y": 80,
        "wires": []
    },
    {
        "id": "6a2bb801bf0c80e4",
        "type": "debug",
        "z": "be07d30774e85419",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "a222ccfb45c86553",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Store to Context",
        "func": "var a = msg.payload*60*1000;\nflow.set('Time_to_Push', a);\n\nvar b = flow.get('AutoMode');\n\nif(b === false){\n    a = msg.payload*0\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "6a2bb801bf0c80e4"
            ]
        ]
    },
    {
        "id": "ebe52010c659f068",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Store to Context",
        "func": "var a = msg.payload;\nflow.set('Number_of_Samples', a);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "6a2bb801bf0c80e4"
            ]
        ]
    },
    {
        "id": "7d6bc207edb2117b",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Calculations",
        "func": "// // Retrieve stored weight samples from the previous function node\n// let weightArray = msg.payload.storedSamples || [];\n\n// // Get the product from the flow context\n// let product = msg.payload.Product || flow.get('Product') || \"Unknown\";\n\n// if (weightArray.length > 0) {\n//     // Sort array in ascending order\n//     weightArray.sort((a, b) => a - b);\n\n//     // Extract min and max values\n//     let minWeight = weightArray[0];\n//     let maxWeight = weightArray[weightArray.length - 1];\n\n//     // Compute average (X) as a number\n//     let sum = weightArray.reduce((acc, val) => acc + val, 0);\n//     let avgWeight = parseFloat((sum / weightArray.length).toFixed(2)); // Convert to number\n\n//     // Compute range (R = max - min) as a number\n//     let R = parseFloat((maxWeight - minWeight).toFixed(2)); // Convert to number\n\n//     // Store calculated values in flow context\n//     flow.set('minWeight', minWeight);\n//     flow.set('maxWeight', maxWeight);\n//     flow.set('avgWeight', avgWeight);\n//     flow.set('R', R);\n\n//     // Output results\n//     msg.payload = {\n//         Product: product,\n//         Number_of_Samples: flow.get('Number_of_Samples'),\n//         sortedSamples: weightArray,\n//         minWeight: minWeight,\n//         maxWeight: maxWeight,\n//         avgWeight: avgWeight,\n//         R: R\n//     };\n\n//     return msg;\n// }\n\n// // If no samples are available, do nothing\n// return null;\n\n\n// Retrieve stored weight samples from the previous function node\nlet weightArray = msg.payload.storedSamples || [];\n\n// Get the product from flow context\nlet product = msg.payload.Product || flow.get('Product') || \"Unknown\";\n\n// Retrieve previous running sum and count\nlet xRunningSum = flow.get('xRunningSum') || 0; // Cumulative sum for X\nlet RRunningSum = flow.get('RRunningSum') || 0; // Cumulative sum for R\nlet runningCount = flow.get('runningCount') || 0; // Number of samples processed\n\nif (weightArray.length > 0) {\n    // Sort array in ascending order\n    weightArray.sort((a, b) => a - b);\n\n    // Extract min and max values\n    let minWeight = parseFloat(weightArray[0]);\n    let maxWeight = parseFloat(weightArray[weightArray.length - 1]);\n\n    // Compute average (X) as a number\n    let sum = weightArray.reduce((acc, val) => acc + val, 0);\n    let avgWeight = parseFloat((sum / weightArray.length).toFixed(2)); // Convert to number\n\n    // Compute range (R = max - min) as a number\n    let R = parseFloat((maxWeight - minWeight).toFixed(2)); // Convert to number\n\n    // Update running sum and count\n    xRunningSum += avgWeight;\n    RRunningSum += R;\n    runningCount++;\n\n    // Compute running averages\n    let xAvg = parseFloat((xRunningSum / runningCount).toFixed(2));\n    let RAvg = parseFloat((RRunningSum / runningCount).toFixed(2));\n\n    // Store updated running averages and count in flow context\n    flow.set('xRunningSum', xRunningSum);\n    flow.set('RRunningSum', RRunningSum);\n    flow.set('runningCount', runningCount);\n    flow.set('xAvg', xAvg);\n    flow.set('RAvg', RAvg);\n\n    // Output results\n    msg.payload = {\n        Product: product,\n        Number_of_Samples: flow.get('Number_of_Samples'),\n        TotalSamplesCollected : flow.get(`totalSamples_${product}`),\n        sortedSamples: weightArray,\n        minWeight: minWeight,\n        maxWeight: maxWeight,\n        avgWeight: avgWeight,\n        R: R,\n        xAvg: xAvg, // Running average of X\n        RAvg: RAvg,  // Running average of R\n        StandardWeight: flow.get('Std_weight'),\n        BatchDuration: flow.get('batchDuration'),\n        BatchTotal: flow.get('BatchTotal')\n    };\n\n    return msg;\n}\n\n// If no samples are available, do nothing\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "1028da1571a9bbaa",
                "4eb49db61414c533"
            ]
        ]
    },
    {
        "id": "1028da1571a9bbaa",
        "type": "debug",
        "z": "be07d30774e85419",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "4eb49db61414c533",
        "type": "mqtt out",
        "z": "be07d30774e85419",
        "name": "",
        "topic": "office/machine",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 1020,
        "y": 300,
        "wires": []
    },
    {
        "id": "d097903f156ba4e4",
        "type": "delay",
        "z": "be07d30774e85419",
        "name": "Delay",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 460,
        "wires": [
            [
                "7d6bc207edb2117b"
            ]
        ]
    },
    {
        "id": "d4f5918b13f929bf",
        "type": "ui_slider",
        "z": "be07d30774e85419",
        "name": "",
        "label": "Standard Weight",
        "tooltip": "",
        "group": "13ad8bd5156e8abe",
        "order": 22,
        "width": "6",
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": "99",
        "max": "101",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 380,
        "wires": [
            [
                "62e22e9a9d36678f"
            ]
        ]
    },
    {
        "id": "62e22e9a9d36678f",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Store to Context",
        "func": "var a = msg.payload;\nflow.set('Std_weight', a);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "6a2bb801bf0c80e4"
            ]
        ]
    },
    {
        "id": "c07ddf53eb025196",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "function 27",
        "func": "var a = flow.get('AutoMode');\n\nvar b = flow.get('Product');\n\nif (b === \"A\"){\n    msg.payload = { A: b };\n}else if( b === \"B\"){\n    msg.payload = { B: b };\n}else{\n    msg.payload = {C: b};\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "9f8cb405f738bd68"
            ]
        ]
    },
    {
        "id": "9f8cb405f738bd68",
        "type": "debug",
        "z": "be07d30774e85419",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 660,
        "wires": []
    },
    {
        "id": "50a2e270b1feda11",
        "type": "inject",
        "z": "be07d30774e85419",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 660,
        "wires": [
            [
                "c07ddf53eb025196"
            ]
        ]
    },
    {
        "id": "5dc48b371a14601e",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "collect N samples",
        "func": "// let mode = flow.get('AutoMode') || false;\n// let product = flow.get('Product') || \"Unknown\";\n\n// if (mode === true) {\n//     // Retrieve the number of samples (n) and product details\n//     let newN = flow.get('Number_of_Samples') || 0;\n//     let timeToPush = flow.get('Time_to_Push') || 60000; // Default 1 minute\n\n//     node.warn(`Time to Push: ${timeToPush}`);\n//     node.warn(`Expected Samples per batch for ${product}: ${newN}`);\n\n//     // Retrieve total samples collected\n//     let totalSamplesCollected = flow.get(`totalSamples_${product}`) || 0;\n\n//     // Get previous n from context\n//     let prevN = flow.get('prev_Number_of_Samples') || 0;\n\n//     // If the number of samples (n) has changed, reset the array\n//     if (newN !== prevN) {\n//         flow.set('weightArray', []);\n//         flow.set('prev_Number_of_Samples', newN);\n//     }\n\n//     msg.delay = timeToPush;\n\n//     // Get the current weight reading\n//     let weight = flow.get('prod_weight') || 0;\n\n//     // Get or initialize the weight array\n//     let weightArray = flow.get('weightArray') || [];\n\n//     // If this is the first sample in a new batch, record the start time\n//     if (weightArray.length === 0) {\n//         let batchStartTime = new Date().getTime();\n//         flow.set(`batchStartTime_${product}`, batchStartTime);\n//         node.warn(`Batch started for ${product} at ${new Date(batchStartTime).toISOString()}`);\n//     }\n\n//     // Add new weight to the array\n//     weightArray.push(weight);\n\n//     // Keep only the last 'n' samples\n//     if (weightArray.length > newN) {\n//         weightArray.shift();\n//     }\n\n//     flow.set('weightArray', weightArray);\n\n//     node.warn(`Current Samples for ${product}: ` + JSON.stringify(weightArray));\n\n//     // If 'n' samples are collected, complete the batch\n//     if (weightArray.length === newN) {\n//         let batchEndTime = new Date().getTime();\n//         let batchStartTime = flow.get(`batchStartTime_${product}`) || batchEndTime;\n//         let batchDuration = Number(((batchEndTime - batchStartTime) / 1000).toFixed(2));\n//         flow.set('batchDuration', batchDuration);\n\n//         // ✅ FIX: Use `flow.set()` instead of `flow.get()`\n//         totalSamplesCollected += newN;\n//         flow.set(`totalSamples_${product}`, totalSamplesCollected);\n\n//         node.warn(`Pushing batch of ${newN} samples for ${product}. Total collected: ${totalSamplesCollected}`);\n//         node.warn(`Batch duration for ${product}: ${batchDuration} seconds`);\n\n//         msg.payload = {\n//             Product: product,\n//             Number_of_Samples: newN,\n//             storedSamples: weightArray,\n//             TotalSamplesCollected: totalSamplesCollected,\n//             BatchStartTime: new Date(batchStartTime).toISOString(),\n//             BatchEndTime: new Date(batchEndTime).toISOString(),\n//             BatchDuration: batchDuration // Duration in seconds\n//         };\n\n//         // Reset the array for the next batch\n//         flow.set('weightArray', []);\n\n\n//         if(mode === false){\n//         flow.set(`totalSamples_${product}`, 0);\n//         }\n//         return msg;\n//     } else {\n//         msg.payload = {\n//             accumulatingSamples: weightArray,\n//             Product: product,\n//             TotalSamplesCollected: totalSamplesCollected\n//         };\n\n//         return msg;\n//     }\n// }\n\n// // **If AutoMode is OFF, log batch duration and reset all batch data**\n// let batchEndTime = new Date().getTime();\n// let batchStartTime = flow.get(`batchStartTime_${product}`) || batchEndTime;\n// let batchDuration = Number(((batchEndTime - batchStartTime) / 1000).toFixed(2));\n\n// node.warn(`Process Stopped! Total batch duration for ${product}: ${batchDuration} seconds`);\n// node.warn(`Total Samples Collected before stop: ${flow.get(`totalSamples_${product}`) || 0}`);\n\n// // Store batch duration for reference before resetting\n// msg.payload = {\n//     Product: product,\n//     TotalSamplesCollected: flow.get(`totalSamples_${product}`) || 0,\n//     BatchStartTime: new Date(batchStartTime).toISOString(),\n//     BatchEndTime: new Date(batchEndTime).toISOString(),\n//     BatchDuration: batchDuration // Duration in seconds\n// };\n\n// // **Reset all batch data**\n// flow.set(`totalSamples_${product}`, 0);\n// flow.set('weightArray', []);\n// flow.set('prev_Number_of_Samples', 0);\n// flow.set(`batchStartTime_${product}`, null);\n\n// return msg;\n\n\n\nlet mode = flow.get('AutoMode') || false;\nlet product = flow.get('Product') || \"Unknown\";\n\nif (mode === true) {\n    // Retrieve the number of samples (n) and product details\n    let newN = flow.get('Number_of_Samples') || 0;\n    let timeToPush = flow.get('Time_to_Push') || 60000; // Default 1 minute\n\n    node.warn(`Time to Push: ${timeToPush}`);\n    node.warn(`Expected Samples per batch for ${product}: ${newN}`);\n\n    // Retrieve total samples collected\n    let totalSamplesCollected = flow.get(`totalSamples_${product}`) || 0;\n\n    // Get previous n from context\n    let prevN = flow.get('prev_Number_of_Samples') || 0;\n\n    // If the number of samples (n) has changed, reset the array\n    if (newN !== prevN) {\n        flow.set('weightArray', []);\n        flow.set('prev_Number_of_Samples', newN);\n    }\n\n    msg.delay = timeToPush;\n\n    // Get the current weight reading\n    let weight = flow.get('prod_weight') || 0;\n\n    // Get or initialize the weight array\n    let weightArray = flow.get('weightArray') || [];\n\n    // If this is the first sample in a new batch, record the start time\n    if (weightArray.length === 0) {\n        let batchStartTime = new Date().getTime();\n        flow.set(`batchStartTime_${product}`, batchStartTime);\n        node.warn(`Batch started for ${product} at ${new Date(batchStartTime).toISOString()}`);\n    }\n\n    // Add new weight to the array\n    weightArray.push(weight);\n\n    // Keep only the last 'n' samples\n    if (weightArray.length > newN) {\n        weightArray.shift();\n    }\n\n    flow.set('weightArray', weightArray);\n\n    node.warn(`Current Samples for ${product}: ` + JSON.stringify(weightArray));\n\n    // If 'n' samples are collected, complete the batch\n    if (weightArray.length === newN) {\n        let batchEndTime = new Date().getTime();\n        let batchStartTime = flow.get(`batchStartTime_${product}`) || batchEndTime;\n        let batchDuration = Number(((batchEndTime - batchStartTime) / 1000).toFixed(2));\n        flow.set('batchDuration', batchDuration);\n\n        // ✅ Accumulate total samples until mode turns OFF\n        totalSamplesCollected += newN;\n        flow.set(`totalSamples_${product}`, totalSamplesCollected);\n\n        node.warn(`Pushing batch of ${newN} samples for ${product}. Total collected so far: ${totalSamplesCollected}`);\n        node.warn(`Batch duration for ${product}: ${batchDuration} seconds`);\n\n        msg.payload = {\n            Product: product,\n            Number_of_Samples: newN,\n            storedSamples: weightArray,\n            TotalSamplesCollected: totalSamplesCollected,\n            BatchStartTime: new Date(batchStartTime).toISOString(),\n            BatchEndTime: new Date(batchEndTime).toISOString(),\n            BatchDuration: batchDuration // Duration in seconds\n        };\n\n        // Reset the array for the next batch but keep the total count\n        flow.set('weightArray', []);\n\n        return msg;\n    } else {\n        msg.payload = {\n            accumulatingSamples: weightArray,\n            // Product: product,\n            TotalSamplesCollected: totalSamplesCollected\n        };\n\n        return msg;\n    }\n}\n\n// **If AutoMode is OFF, post total samples and reset**\nlet batchEndTime = new Date().getTime();\nlet batchStartTime = flow.get(`batchStartTime_${product}`) || batchEndTime;\nlet batchDuration = Number(((batchEndTime - batchStartTime) / 1000).toFixed(2));\n\nlet finalTotalSamples = flow.get(`totalSamples_${product}`) || 0;\n\nnode.warn(`Process Stopped! Total batch duration for ${product}: ${batchDuration} seconds`);\nnode.warn(`Total Samples Collected before stop: ${finalTotalSamples}`);\n\n// **Send the final accumulated total samples before reset**\nmsg.payload = {\n    Product: product,\n    TotalSamplesCollected: finalTotalSamples,  // ✅ Post final total before reset\n    BatchStartTime: new Date(batchStartTime).toISOString(),\n    BatchEndTime: new Date(batchEndTime).toISOString(),\n    BatchDuration: batchDuration // Duration in seconds\n};\n\nnode.warn(`Resetting total samples for ${product} to 0`);\n\n// **Reset all batch data**\nflow.set(`totalSamples_${product}`, 0);\n\nlet checkReset = flow.get(`totalSamples_${product}`);\nnode.warn(`After reset, totalSamples_${product} = ${checkReset}`);\nflow.set('weightArray', []);\nflow.set('prev_Number_of_Samples', 0);\nflow.set(`batchStartTime_${product}`, null);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "45d7d52402200f78",
        "type": "delay",
        "z": "be07d30774e85419",
        "name": "Delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 500,
        "wires": [
            [
                "bebfe2e2329bf688"
            ]
        ]
    },
    {
        "id": "dad18690cf59b963",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "function 28",
        "func": "let mode = flow.get('AutoMode') || false;\nlet product = flow.get('Product') || \"Unknown\";\n\nif (mode === true) {\n    // Retrieve parameters\n    let newN = flow.get('Number_of_Samples') || 0;\n    let timeToPush = flow.get('Time_to_Push') || 60000; // Default: 1 min\n\n    node.warn(`Time to Push: ${timeToPush}`);\n    node.warn(`Expected Samples per batch for ${product}: ${newN}`);\n\n    let totalSamplesCollected = flow.get(`totalSamples_${product}`) || 0;\n    let prevN = flow.get('prev_Number_of_Samples') || 0;\n\n    // If the number of samples has changed, reset the array\n    if (newN !== prevN) {\n        flow.set('weightArray', []);\n        flow.set('prev_Number_of_Samples', newN);\n    }\n\n    msg.delay = timeToPush;\n    let weight = flow.get('prod_weight') || 0;\n    let weightArray = flow.get('weightArray') || [];\n\n    // Start a new batch if array is empty\n    if (weightArray.length === 0) {\n        let batchStartTime = new Date().getTime(); // ✅ Set correct start time\n        flow.set(`batchStartTime_${product}`, batchStartTime);\n        node.warn(`Batch started for ${product} at ${new Date(batchStartTime).toISOString()}`);\n    }\n\n    weightArray.push(weight);\n\n    // Keep only the last 'n' samples\n    if (weightArray.length > newN) {\n        weightArray.shift();\n    }\n\n    flow.set('weightArray', weightArray);\n    node.warn(`Current Samples for ${product}: ` + JSON.stringify(weightArray));\n\n    if (weightArray.length === newN) {\n        // ✅ Correct batch duration calculation\n        let batchDuration = newN * (timeToPush / 1000);\n        flow.set('batchDuration', batchDuration);\n\n        // ✅ Accumulate total samples\n        totalSamplesCollected += newN;\n        flow.set(`totalSamples_${product}`, totalSamplesCollected);\n\n        // ✅ Calculate batch total\n        let batchTotal = totalSamplesCollected / newN;\n        flow.set('BatchTotal', batchTotal);\n\n        node.warn(`Pushing batch of ${newN} samples for ${product}. Total collected so far: ${totalSamplesCollected}`);\n        node.warn(`Batch duration for ${product}: ${batchDuration} seconds`);\n        node.warn(`Batch Total for ${product}: ${batchTotal}`);\n\n        msg.payload = {\n            Product: product,\n            Number_of_Samples: newN,\n            storedSamples: weightArray,\n            TotalSamplesCollected: totalSamplesCollected,\n            BatchTotal: batchTotal,\n            BatchDuration: batchDuration\n        };\n\n        flow.set('weightArray', []);\n        return msg;\n    } else {\n        msg.payload = {\n            accumulatingSamples: weightArray,\n            TotalSamplesCollected: totalSamplesCollected\n        };\n\n        return msg;\n    }\n}\n\n// **If AutoMode is OFF, post total samples and reset**\nlet finalTotalSamples = flow.get(`totalSamples_${product}`) || 0;\nlet finalBatchTotal = finalTotalSamples / (flow.get('Number_of_Samples') || 1);\n\nnode.warn(`Process Stopped! Total Samples Collected before stop: ${finalTotalSamples}`);\nnode.warn(`Final Batch Total: ${finalBatchTotal}`);\n\n// ✅ Post final accumulated total samples before reset\nmsg.payload = {\n    Product: product,\n    TotalSamplesCollected: finalTotalSamples,\n    BatchTotal: finalBatchTotal,\n    BatchDuration: flow.get('batchDuration') || 0\n};\n\nnode.warn(`Resetting total samples and batch total for ${product} to 0`);\n\n// ✅ Reset all batch data\n\nif(mode === false){\n    flow.set(`totalSamples_${product}`, 0);\n    flow.set('totalSamples_A', 0);\n}\n\nflow.set(`batchTotal_${product}`, 0); // ✅ Reset batch total after stop\nflow.set('weightArray', []);\nflow.set('prev_Number_of_Samples', 0);\nflow.set(`batchStartTime_${product}`, null);\nflow.set('batchDuration', 0); // ✅ Reset batch duration\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 480,
        "wires": [
            [
                "d097903f156ba4e4"
            ]
        ]
    },
    {
        "id": "aca86042010cf95a",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "function 29",
        "func": "let mode = flow.get('AutoMode') || false;\nlet product = flow.get('Product') || \"Unknown\";\n\nif (mode === true) {\n    // Retrieve parameters\n    let newN = flow.get('Number_of_Samples') || 0;\n    let timeToPush = flow.get('Time_to_Push') || 1; // Default: 1 min\n    let pushInterval = timeToPush * 60 * 1000; // Convert minutes to milliseconds\n\n    node.warn(`Time to Push: ${timeToPush} min (${pushInterval} ms)`);\n    node.warn(`Expected Samples per batch for ${product}: ${newN}`);\n\n    let totalSamplesCollected = flow.get(`totalSamples_${product}`) || 0;\n    let prevN = flow.get('prev_Number_of_Samples') || 0;\n\n    // Reset weight array if sample size changes\n    if (newN !== prevN) {\n        flow.set('weightArray', []);\n        flow.set('prev_Number_of_Samples', newN);\n    }\n\n    msg.delay = pushInterval; // Apply correct delay\n    let weight = flow.get('prod_weight') || 0;\n    let weightArray = flow.get('weightArray') || [];\n\n    // Get batch start time\n    let batchStartTime = flow.get(`batchStartTime_${product}`) || new Date().getTime();\n    flow.set(`batchStartTime_${product}`, batchStartTime);\n\n    let currentTime = new Date().getTime();\n    let elapsedTime = currentTime - batchStartTime;\n\n    if (weightArray.length === 0) {\n        node.warn(`Batch started for ${product} at ${new Date(batchStartTime).toISOString()}`);\n    }\n\n    weightArray.push(weight);\n\n    // Keep only last 'n' samples\n    if (weightArray.length > newN) {\n        weightArray.shift();\n    }\n\n    flow.set('weightArray', weightArray);\n    node.warn(`Current Samples for ${product}: ` + JSON.stringify(weightArray));\n\n    // **Ensure batch is pushed only after 1 hour**\n    if (elapsedTime >= 120000) { // 1 hour\n        let batchDuration = newN * (timeToPush * 60); // Convert to seconds\n        flow.set('batchDuration', batchDuration);\n\n        // Accumulate total samples\n        totalSamplesCollected += newN;\n        flow.set(`totalSamples_${product}`, totalSamplesCollected);\n\n        // Compute batch total\n        let batchTotal = totalSamplesCollected / newN;\n        flow.set('BatchTotal', batchTotal);\n\n        // **Fix: Ensure full array is pushed**\n        let sortedSamples = [...weightArray]; // Copy the array\n        sortedSamples.sort((a, b) => a - b); // Sort for min/max\n\n        let minWeight = sortedSamples[0];\n        let maxWeight = sortedSamples[sortedSamples.length - 1];\n        let avgWeight = sortedSamples.reduce((sum, val) => sum + val, 0) / sortedSamples.length;\n\n        node.warn(`✅ Pushing batch of ${newN} samples for ${product}. Total collected so far: ${totalSamplesCollected}`);\n        node.warn(`✅ Batch duration for ${product}: ${batchDuration} seconds`);\n        node.warn(`✅ Batch Total for ${product}: ${batchTotal}`);\n\n        msg.payload = {\n            Product: product,\n            Number_of_Samples: newN,\n            TotalSamplesCollected: totalSamplesCollected,\n            sortedSamples: sortedSamples,  // ✅ FIX: Push full batch\n            minWeight: minWeight,\n            maxWeight: maxWeight,\n            avgWeight: avgWeight,\n            R: maxWeight - minWeight,\n            xAvg: avgWeight,\n            RAvg: (maxWeight - minWeight) / sortedSamples.length,\n            StandardWeight: 100,\n            BatchDuration: batchDuration,\n            BatchTotal: batchTotal\n        };\n\n        // **Reset batch and restart accumulation**\n        flow.set('weightArray', []);\n        flow.set(`batchStartTime_${product}`, new Date().getTime()); // Reset batch start time\n        return msg;\n    } else {\n        msg.payload = {\n            accumulatingSamples: weightArray,\n            TotalSamplesCollected: totalSamplesCollected\n        };\n\n        return msg;\n    }\n}\n\n// **If AutoMode is OFF, post total samples and reset**\nlet finalTotalSamples = flow.get(`totalSamples_${product}`) || 0;\nlet finalBatchTotal = finalTotalSamples / (flow.get('Number_of_Samples') || 1);\n\nnode.warn(`❌ Process Stopped! Total Samples Collected before stop: ${finalTotalSamples}`);\nnode.warn(`❌ Final Batch Total: ${finalBatchTotal}`);\n\n// ✅ Post final accumulated total samples before reset\nmsg.payload = {\n    Product: product,\n    TotalSamplesCollected: finalTotalSamples,\n    BatchTotal: finalBatchTotal,\n    BatchDuration: flow.get('batchDuration') || 0\n};\n\nnode.warn(`♻️ Resetting total samples and batch total for ${product} to 0`);\n\n// ✅ Reset all batch data\nflow.set(`totalSamples_${product}`, 0);\nflow.set(`batchTotal_${product}`, 0); // Reset batch total after stop\nflow.set('weightArray', []);\nflow.set('prev_Number_of_Samples', 0);\nflow.set(`batchStartTime_${product}`, null);\nflow.set('batchDuration', 0); // Reset batch duration\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4c37b60f477a73",
        "type": "inject",
        "z": "be07d30774e85419",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "delay",
                "v": "Time_to_Push",
                "vt": "flow"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "45d7d52402200f78"
            ]
        ]
    },
    {
        "id": "e9fa7cfc2a81add3",
        "type": "debug",
        "z": "be07d30774e85419",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 440,
        "wires": []
    },
    {
        "id": "d488d532cb546e18",
        "type": "inject",
        "z": "be07d30774e85419",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "6599b5c6fd7fdaca"
            ]
        ]
    },
    {
        "id": "6599b5c6fd7fdaca",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "function 30",
        "func": "let product = flow.get('Product') || \"Unknown\";\n\n// Reset sample count and clear stored samples\nflow.set(`sampleCount_${product}`, 0);\nflow.set('weightArray', []);\n\nnode.warn(`🔄 Reset Accumulation: Ready for new batch`);\n\nmsg.payload = { status: \"Reset Done\", Product: product };\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "e9fa7cfc2a81add3"
            ]
        ]
    },
    {
        "id": "81fbed20ec881af9",
        "type": "function",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "Machine Checkweigher Simulator",
        "func": "// Parameters\nconst targetWeight = 100; // Ideal weight in grams\nconst maxDeviation = 5;   // Maximum deviation in grams (+/- 5%)\nconst efficiency = 85;    // Efficiency percentage (0-100)\n\n// Compute standard deviation based on efficiency\nconst sigma = (1 - (efficiency / 100)) * maxDeviation;\n\n// Generate a weight using a normal distribution\nfunction generateWeight(mean, stdDev) {\n    let u1 = Math.random();\n    let u2 = Math.random();\n    let randStdNormal = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2); // Box-Muller transform\n    return mean + stdDev * randStdNormal;\n}\n\n// Generate and clamp value to 95g-105g\nlet weight = generateWeight(targetWeight, sigma);\nweight = Math.max(95, Math.min(105, weight));\n\n// Output as JSON object\nmsg.payload = { checkweigher_weight: weight.toFixed(2) }; // Keep two decimal places\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 840,
        "wires": [
            [
                "f14a89d0ba973b19",
                "a5defb6a66662703"
            ]
        ]
    },
    {
        "id": "32c7889a89981ccd",
        "type": "inject",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "1 sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "8f41961a42c418c8"
            ]
        ]
    },
    {
        "id": "f14a89d0ba973b19",
        "type": "debug",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "debug 85",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 840,
        "wires": []
    },
    {
        "id": "8f41961a42c418c8",
        "type": "function",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "5 Sample 10 Mins",
        "func": "var count = flow.get(\"samplecnt\") || 0; // Retrieve previous count or initialize to 0\ncount = count + 1; // Increment count\nflow.set(\"samplecnt\", count); // Store updated count\n\nif (count <= 2) {\n    return msg; // Only return msg if count is 5 or less\n}\nreturn null; // Otherwise, stop the message flow\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 840,
        "wires": [
            [
                "81fbed20ec881af9",
                "3634cda3bab534af"
            ]
        ]
    },
    {
        "id": "fe49b10621a733a5",
        "type": "inject",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "10 mins",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 780,
        "wires": [
            [
                "dc5ec02a036baf61"
            ]
        ]
    },
    {
        "id": "dc5ec02a036baf61",
        "type": "function",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "function 31",
        "func": "flow.set(\"samplecnt\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a5defb6a66662703",
        "type": "mqtt out",
        "z": "be07d30774e85419",
        "g": "e5eb009d748ff2a8",
        "name": "",
        "topic": "office/machine",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 1060,
        "y": 940,
        "wires": []
    },
    {
        "id": "3634cda3bab534af",
        "type": "function",
        "z": "be07d30774e85419",
        "name": "Machine Checkweigher Simulator",
        "func": "// Parameters\nconst targetWeight = 100; // Ideal weight in grams\nconst maxDeviation = 5;   // Maximum deviation in grams (+/- 5%)\nconst efficiency = 85;    // Efficiency percentage (0-100)\n\n// Compute standard deviation based on efficiency\nconst sigma = (1 - (efficiency / 100)) * maxDeviation;\n\n// Generate a weight using a normal distribution\nfunction generateWeight(mean, stdDev) {\n    let u1 = Math.random();\n    let u2 = Math.random();\n    let randStdNormal = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2); // Box-Muller transform\n    return mean + stdDev * randStdNormal;\n}\n\n// Function to calculate mean\nfunction mean(arr) {\n    return arr.reduce((sum, val) => sum + val, 0) / arr.length;\n}\n\n// Function to calculate standard deviation\nfunction standardDeviation(arr, meanValue) {\n    return Math.sqrt(arr.reduce((sum, val) => sum + Math.pow(val - meanValue, 2), 0) / arr.length);\n}\n\n// Function to calculate skewness\nfunction skewness(arr, meanValue, stdDev) {\n    return arr.reduce((sum, val) => sum + Math.pow((val - meanValue) / stdDev, 3), 0) / arr.length;\n}\n\n// Function to calculate kurtosis\nfunction kurtosis(arr, meanValue, stdDev) {\n    return arr.reduce((sum, val) => sum + Math.pow((val - meanValue) / stdDev, 4), 0) / arr.length - 3;\n}\n\n// Function to calculate quartiles\nfunction quartiles(arr) {\n    let sortedArr = [...arr].sort((a, b) => a - b);\n    const q1 = sortedArr[Math.floor(sortedArr.length * 0.25)];\n    const q3 = sortedArr[Math.floor(sortedArr.length * 0.75)];\n    return { Q1: q1, Q3: q3 };\n}\n\n// Function to calculate quartile deviation\nfunction quartileDeviation(q1, q3) {\n    return (q3 - q1) / 2;\n}\n\n// Arrays to store data\nconst sampleSize = 5; // Number of weights per iteration\nconst iterationSize = 5; // Number of iterations for checkweigher_weightx\nlet checkweigher_weightx = [];\nlet checkweigher_weight_samples = []; // Store all weight samples\n\n// Generate 5 iterations of weights and means\nfor (let j = 0; j < iterationSize; j++) {\n    let weights = [];\n\n    // Generate 5 random weights per iteration\n    for (let i = 0; i < sampleSize; i++) {\n        let weight = generateWeight(targetWeight, sigma);\n        weight = Math.max(95, Math.min(105, weight)); // Clamp between 95g and 105g\n        weights.push(weight.toFixed(2)); // Convert to fixed decimal places\n    }\n\n    // Store this iteration's weights\n    checkweigher_weight_samples.push(weights); // Ensure proper nesting\n\n    // Calculate mean of this iteration and store in checkweigher_weightx\n    let meanValue = mean(weights.map(Number)); // Convert strings back to numbers for calculations\n    checkweigher_weightx.push(meanValue.toFixed(2));\n}\n\n// Compute statistics on checkweigher_weightx\nconst meanValueX = mean(checkweigher_weightx.map(Number));\nconst stdDevX = standardDeviation(checkweigher_weightx.map(Number), meanValueX);\nconst skewX = skewness(checkweigher_weightx.map(Number), meanValueX, stdDevX);\nconst kurtX = kurtosis(checkweigher_weightx.map(Number), meanValueX, stdDevX);\nconst { Q1, Q3 } = quartiles(checkweigher_weightx.map(Number));\nconst qDeviationX = quartileDeviation(Q1, Q3);\n\n// const upperLimit = parseInt(meanValueX + 3 * stdDevX).toFixed(2);\n// const lowerLimit = parseInt(meanValueX - 3 * stdDevX).toFixed(2);\n\n// Output results\nmsg.payload = {\n    checkweigher_weight_samples: checkweigher_weight_samples, // Properly formatted array of samples\n    checkweigher_weightx: checkweigher_weightx, // Accumulated means, properly formatted\n    mean: meanValueX.toFixed(2),\n    standardDeviation: stdDevX.toFixed(2),\n    skewness: skewX.toFixed(2),\n    kurtosis: kurtX.toFixed(2),\n    Q1: Q1.toFixed(2),\n    Q3: Q3.toFixed(2),\n    quartileDeviation: qDeviationX.toFixed(2),\n    upperLimit: 101.01,\n    lowerLimit: 99.01\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 781,
        "y": 924,
        "wires": [
            [
                "f14a89d0ba973b19",
                "a5defb6a66662703"
            ]
        ]
    },
    {
        "id": "6702dc66f5bd7c6c",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "4e3e7fe5b909b663"
            ]
        ]
    },
    {
        "id": "4e3e7fe5b909b663",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Increment Count",
        "func": "\n// Retrieve previous count value from context, default to 0 if undefined\n// Retrieve previous count value from context, default to 0 if undefined\nvar count = flow.get('count') || 0;\n\n// Increment count\ncount += 1;\n\n// Store updated count in context\nflow.set(\"count\", count);\n\n// Return count as message payload\nmsg.payload = {\n    count: count\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 40,
        "wires": [
            [
                "67ab6ff33039fbe5"
            ]
        ]
    },
    {
        "id": "67ab6ff33039fbe5",
        "type": "debug",
        "z": "f68cc45902e5c2d5",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd7912a0dd290af8",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Performance and Reset Count",
        "func": "var actualSpeed = flow.get('count');\nflow.set(\"actualSpeed\", actualSpeed);\nflow.set('count', 0);\n\nvar designedSpeed = 65;\n\nvar performance = actualSpeed / designedSpeed;\nflow.set('performance', performance);\n\nmsg.payload = {\n    actualSpeed: actualSpeed,\n    designedSpeed: designedSpeed,\n    performance: performance\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 160,
        "wires": [
            [
                "5ca8e067b34474e9"
            ]
        ]
    },
    {
        "id": "1f8540c919c89c6e",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "fd7912a0dd290af8",
                "073a1f6706801dde"
            ]
        ]
    },
    {
        "id": "073a1f6706801dde",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Quality",
        "func": "var totalProduction = flow.get('actualSpeed');\n\n// var a = totalProduction++;\n// flow.set('totalProduction', a);\n\nvar rejected = flow.get('BadCount');\n\nvar good = totalProduction - rejected;\nflow.set('GoodCount', good);\n\nvar quality = good / totalProduction;\nflow.set('Quality', quality);\n\nmsg.payload = {\n    totalProduction : totalProduction,\n    BadCount: rejected,\n    GoodCount: good,\n    Quality: quality\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            [
                "5ca8e067b34474e9"
            ]
        ]
    },
    {
        "id": "7e39c2cad1e2a893",
        "type": "ui_numeric",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "label": "Reject Count",
        "tooltip": "",
        "group": "0373d8596dbb0f89",
        "order": 26,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 170,
        "y": 40,
        "wires": [
            [
                "809e2db64409b1e4"
            ]
        ]
    },
    {
        "id": "809e2db64409b1e4",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Quality",
        "func": "\nvar rejected = msg.payload;\nflow.set('BadCount', rejected);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e27c247e4311833d",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "Trials",
        "func": "var a = 60;\nflow.set('trials', a);\n\nmsg.payload = {\n    trials: a\n}\n\n// setTimeout(() => {\n//     flow.set('trials', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0a2e92875d2c7709",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "No production",
        "func": "var a = 80;\nflow.set('No_Production', a);\n\nmsg.payload = {\n    No_Production: a\n}\n\n// setTimeout(() => {\n//     flow.set('No_Production', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "1f6ff09b038e415c",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "Maintenance",
        "func": "var a = 120;\nflow.set('maintenance', a);\n\nmsg.payload = {\n    maintenance: a\n}\n\n\n// setTimeout(() => {\n//     flow.set('maintenance', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "861e565d129be742",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "Lunch",
        "func": "var a = 40;\nflow.set('lunch', a);\n\nmsg.payload = {\n    lunch: a\n}\n\n// setTimeout(() => {\n//     flow.set('lunch', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "64b980207c49283e",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 07 * * 1,2,3,4,5,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "861e565d129be742"
            ]
        ]
    },
    {
        "id": "61828b43a0feb666",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 10 * * 2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "e27c247e4311833d"
            ]
        ]
    },
    {
        "id": "a7b81bd10dd5a4a7",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * 1,5,0",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "1f6ff09b038e415c"
            ]
        ]
    },
    {
        "id": "49ee5ba83c531b9b",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "0a2e92875d2c7709"
            ]
        ]
    },
    {
        "id": "e951c3ed5df2e670",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Material Shortage",
        "func": "var a = 20;\nflow.set('material_shortage', a);\n\nmsg.payload = {\n    material_shortage: a\n}\n\n// setTimeout(() => {\n//     flow.set('material_shortage', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3af72093016a856d",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Electrical",
        "func": "var a = 30;\nflow.set('Electrical', a);\n\nmsg.payload = {\n    Electrical: a\n}\n\n// setTimeout(() => {\n//     flow.set('Electrical', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8ee66768d70ffd63",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Power Failure",
        "func": "var a = 90;\nflow.set('powerFailure', a);\n\nmsg.payload = {\n    powerFailure: a\n}\n\n\n// setTimeout(() => {\n//     flow.set('powerFailure', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "806de01c271c12af",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Mechanical Breakdown",
        "func": "var a = 30;\nflow.set('mech_brk', a);\n\nmsg.payload = {\n    Mechanical_Breakdown: a\n}\n\n// setTimeout(() => {\n//     flow.set('mech_brk', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "33af2b36c60ac4b8",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 09 * * 3,5",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "806de01c271c12af"
            ]
        ]
    },
    {
        "id": "04115b17e8da1192",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 10 * * 2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "e951c3ed5df2e670"
            ]
        ]
    },
    {
        "id": "db5f7979e23d4a95",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * 1,3,5,0",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "8ee66768d70ffd63"
            ]
        ]
    },
    {
        "id": "89fb7e86b9e12876",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "3af72093016a856d"
            ]
        ]
    },
    {
        "id": "8555341694376891",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "SKU Change",
        "func": "var a = 30;\nflow.set('sku', a);\n\nmsg.payload = {\n    sku: a\n}\n\n// setTimeout(() => {\n//     flow.set('sku', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "e18a1fe5292c0f21",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "8555341694376891"
            ]
        ]
    },
    {
        "id": "9adb62a8d09f59a3",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Minor Stoppage",
        "func": "var a = 40;\nflow.set('minorStop', a);\n\nmsg.payload = {\n    minorStop: a\n}\n\n// setTimeout(() => {\n//     flow.set('minorStop', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c9461d54dd83f180",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "9adb62a8d09f59a3"
            ]
        ]
    },
    {
        "id": "56d92074d0c236c4",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "Startup",
        "func": "var a = 20;\nflow.set('startup', a);\n\nmsg.payload = {\n    startup: a\n}\n\n// setTimeout(() => {\n//     flow.set('startup', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "57cd673ba084d019",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "g": "f545a640936fc892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "56d92074d0c236c4"
            ]
        ]
    },
    {
        "id": "ce74a922127d8102",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Availibility",
        "func": "var shiftTime = 480;\n\nvar shutdown = (flow.get('lunch') || 0) + (flow.get('maintenance') || 0) + (flow.get('No_Production') || 0) + (flow.get('trials') || 0);\n\nvar plannedTime = shiftTime - shutdown;\nflow.set('plannedTime', plannedTime);\n\nvar unplannedTime = (flow.get('mech_brk') || 0) + (flow.get('powerFailure') || 0) + (flow.get('Electrical') || 0) + (flow.get('minorStop') || 0) + (flow.get('sku') || 0) + (flow.get('startup') || 0);\nflow.set('unplannedTime', unplannedTime);\n\nvar runTime = plannedTime - unplannedTime;\nflow.set(\"runTime\", runTime);\n\nvar availability = runTime / plannedTime;\nflow.set('availability', availability);\n\nmsg.payload = {\n    availability: availability,\n    runTime: runTime,\n    plannedTime: plannedTime,\n    unplannedTime: unplannedTime,\n    shiftTime: shiftTime\n};\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "5ca8e067b34474e9"
            ]
        ]
    },
    {
        "id": "1e9b4f37fe044c1e",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "ce74a922127d8102"
            ]
        ]
    },
    {
        "id": "5ca8e067b34474e9",
        "type": "mqtt out",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "topic": "office/oee/machine",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 1230,
        "y": 220,
        "wires": []
    },
    {
        "id": "842a47108682c180",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "OEE",
        "func": "var availability = flow.get('availability');\nvar quality = flow.get('Quality');\nvar performance = flow.get('performance');\n\nvar oee = availability * quality * performance;\nflow.set('oee', oee);\n\nmsg.payload = {\n    oee: oee\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 360,
        "wires": [
            [
                "5ca8e067b34474e9"
            ]
        ]
    },
    {
        "id": "b761355f021c6afd",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "842a47108682c180"
            ]
        ]
    },
    {
        "id": "69b94051e3979457",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Accumulate Data every min",
        "func": "// Retrieve accumulated values or initialize if not set\nvar accumulatedTotalProduction = flow.get('accumulatedTotalProduction') || 0;\nvar accumulatedGoodCount = flow.get('accumulatedGoodCount') || 0;\nvar accumulatedBadCount = flow.get('accumulatedBadCount') || 0;\n\n// Get the latest 1-minute batch values\nvar currentTotalProduction = flow.get('actualSpeed') || 0;\nvar currentBadCount = flow.get('BadCount') || 0;\nvar currentGoodCount = currentTotalProduction - currentBadCount;\n\n// Accumulate values\naccumulatedTotalProduction += currentTotalProduction;\naccumulatedGoodCount += currentGoodCount;\naccumulatedBadCount += currentBadCount;\n\n// Store updated totals\nflow.set('accumulatedTotalProduction', accumulatedTotalProduction);\nflow.set('accumulatedGoodCount', accumulatedGoodCount);\nflow.set('accumulatedBadCount', accumulatedBadCount);\n\n// No message output, just accumulation\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "0c4997979c5976a5",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 830,
        "y": 720,
        "wires": [
            [
                "69b94051e3979457"
            ]
        ]
    },
    {
        "id": "380141edccb7a959",
        "type": "function",
        "z": "f68cc45902e5c2d5",
        "name": "Shift A",
        "func": "// Retrieve accumulated values\nvar accumulatedTotalProduction = flow.get('accumulatedTotalProduction') || 0;\nvar accumulatedGoodCount = flow.get('accumulatedGoodCount') || 0;\nvar accumulatedBadCount = flow.get('accumulatedBadCount') || 0;\n\n// Create payload for daily report\nmsg.payload = {\n    Shift_totalProduction: accumulatedTotalProduction,\n    Shift_goodCount: accumulatedGoodCount,\n    Shift_badCount: accumulatedBadCount,\n    Lunch: flow.get('lunch'),\n    Maintenance: flow.get('maintenance'),\n    trials: flow.get('trials'),\n    No_Production: flow.get('No_Production'),\n    mech_brk: flow.get('mech_brk'),\n    material_shortage: flow.get('material_shortage'),\n    powerFailure: flow.get('powerFailure'),\n    Electrical: flow.get('Electrical'),\n    minorStop: flow.get('minorStop'),\n    startup: flow.get('startup'),\n    sku: flow.get('sku')\n};\n\n// Reset accumulated values after push\nflow.set('accumulatedTotalProduction', 0);\nflow.set('accumulatedGoodCount', 0);\nflow.set('accumulatedBadCount', 0);\n\nflow.set('lunch', 0);\nflow.set('maintenance', 0);\nflow.set('trials', 0);\nflow.set('No_Production', 0);\nflow.set('mech_brk', 0);\nflow.set('material_shortage', 0);\nflow.set('powerFailure', 0);\nflow.set('Electrical', 0);\nflow.set('minorStop', 0);\nflow.set('startup', 0);\nflow.set('sku', 0);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 420,
        "wires": [
            [
                "5ca8e067b34474e9"
            ]
        ]
    },
    {
        "id": "588c77bcf9ead504",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "Shift A 3AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 20 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "380141edccb7a959"
            ]
        ]
    },
    {
        "id": "11cb7e534174bb0d",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "Shift B 11 AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 05 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 780,
        "y": 460,
        "wires": [
            [
                "380141edccb7a959"
            ]
        ]
    },
    {
        "id": "27cfc6fc018724f9",
        "type": "inject",
        "z": "f68cc45902e5c2d5",
        "name": "Shift C 7 PM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 780,
        "y": 500,
        "wires": [
            [
                "380141edccb7a959"
            ]
        ]
    }
]